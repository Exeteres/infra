// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { AdvancedCronJobArgs } from "./advancedCronJob";
export type AdvancedCronJob = import("./advancedCronJob").AdvancedCronJob;
export const AdvancedCronJob: typeof import("./advancedCronJob").AdvancedCronJob = null as any;
utilities.lazyLoad(exports, ["AdvancedCronJob"], () => require("./advancedCronJob"));

export { BroadcastJobArgs } from "./broadcastJob";
export type BroadcastJob = import("./broadcastJob").BroadcastJob;
export const BroadcastJob: typeof import("./broadcastJob").BroadcastJob = null as any;
utilities.lazyLoad(exports, ["BroadcastJob"], () => require("./broadcastJob"));

export { CloneSetArgs } from "./cloneSet";
export type CloneSet = import("./cloneSet").CloneSet;
export const CloneSet: typeof import("./cloneSet").CloneSet = null as any;
utilities.lazyLoad(exports, ["CloneSet"], () => require("./cloneSet"));

export { ContainerRecreateRequestArgs } from "./containerRecreateRequest";
export type ContainerRecreateRequest = import("./containerRecreateRequest").ContainerRecreateRequest;
export const ContainerRecreateRequest: typeof import("./containerRecreateRequest").ContainerRecreateRequest = null as any;
utilities.lazyLoad(exports, ["ContainerRecreateRequest"], () => require("./containerRecreateRequest"));

export { DaemonSetArgs } from "./daemonSet";
export type DaemonSet = import("./daemonSet").DaemonSet;
export const DaemonSet: typeof import("./daemonSet").DaemonSet = null as any;
utilities.lazyLoad(exports, ["DaemonSet"], () => require("./daemonSet"));

export { ImageListPullJobArgs } from "./imageListPullJob";
export type ImageListPullJob = import("./imageListPullJob").ImageListPullJob;
export const ImageListPullJob: typeof import("./imageListPullJob").ImageListPullJob = null as any;
utilities.lazyLoad(exports, ["ImageListPullJob"], () => require("./imageListPullJob"));

export { ImagePullJobArgs } from "./imagePullJob";
export type ImagePullJob = import("./imagePullJob").ImagePullJob;
export const ImagePullJob: typeof import("./imagePullJob").ImagePullJob = null as any;
utilities.lazyLoad(exports, ["ImagePullJob"], () => require("./imagePullJob"));

export { NodeImageArgs } from "./nodeImage";
export type NodeImage = import("./nodeImage").NodeImage;
export const NodeImage: typeof import("./nodeImage").NodeImage = null as any;
utilities.lazyLoad(exports, ["NodeImage"], () => require("./nodeImage"));

export { NodePodProbeArgs } from "./nodePodProbe";
export type NodePodProbe = import("./nodePodProbe").NodePodProbe;
export const NodePodProbe: typeof import("./nodePodProbe").NodePodProbe = null as any;
utilities.lazyLoad(exports, ["NodePodProbe"], () => require("./nodePodProbe"));

export { PersistentPodStateArgs } from "./persistentPodState";
export type PersistentPodState = import("./persistentPodState").PersistentPodState;
export const PersistentPodState: typeof import("./persistentPodState").PersistentPodState = null as any;
utilities.lazyLoad(exports, ["PersistentPodState"], () => require("./persistentPodState"));

export { PodProbeMarkerArgs } from "./podProbeMarker";
export type PodProbeMarker = import("./podProbeMarker").PodProbeMarker;
export const PodProbeMarker: typeof import("./podProbeMarker").PodProbeMarker = null as any;
utilities.lazyLoad(exports, ["PodProbeMarker"], () => require("./podProbeMarker"));

export { ResourceDistributionArgs } from "./resourceDistribution";
export type ResourceDistribution = import("./resourceDistribution").ResourceDistribution;
export const ResourceDistribution: typeof import("./resourceDistribution").ResourceDistribution = null as any;
utilities.lazyLoad(exports, ["ResourceDistribution"], () => require("./resourceDistribution"));

export { SidecarSetArgs } from "./sidecarSet";
export type SidecarSet = import("./sidecarSet").SidecarSet;
export const SidecarSet: typeof import("./sidecarSet").SidecarSet = null as any;
utilities.lazyLoad(exports, ["SidecarSet"], () => require("./sidecarSet"));

export { StatefulSetArgs } from "./statefulSet";
export type StatefulSet = import("./statefulSet").StatefulSet;
export const StatefulSet: typeof import("./statefulSet").StatefulSet = null as any;
utilities.lazyLoad(exports, ["StatefulSet"], () => require("./statefulSet"));

export { UnitedDeploymentArgs } from "./unitedDeployment";
export type UnitedDeployment = import("./unitedDeployment").UnitedDeployment;
export const UnitedDeployment: typeof import("./unitedDeployment").UnitedDeployment = null as any;
utilities.lazyLoad(exports, ["UnitedDeployment"], () => require("./unitedDeployment"));

export { WorkloadSpreadArgs } from "./workloadSpread";
export type WorkloadSpread = import("./workloadSpread").WorkloadSpread;
export const WorkloadSpread: typeof import("./workloadSpread").WorkloadSpread = null as any;
utilities.lazyLoad(exports, ["WorkloadSpread"], () => require("./workloadSpread"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:apps.kruise.io/v1alpha1:AdvancedCronJob":
                return new AdvancedCronJob(name, <any>undefined, { urn })
            case "kubernetes:apps.kruise.io/v1alpha1:BroadcastJob":
                return new BroadcastJob(name, <any>undefined, { urn })
            case "kubernetes:apps.kruise.io/v1alpha1:CloneSet":
                return new CloneSet(name, <any>undefined, { urn })
            case "kubernetes:apps.kruise.io/v1alpha1:ContainerRecreateRequest":
                return new ContainerRecreateRequest(name, <any>undefined, { urn })
            case "kubernetes:apps.kruise.io/v1alpha1:DaemonSet":
                return new DaemonSet(name, <any>undefined, { urn })
            case "kubernetes:apps.kruise.io/v1alpha1:ImageListPullJob":
                return new ImageListPullJob(name, <any>undefined, { urn })
            case "kubernetes:apps.kruise.io/v1alpha1:ImagePullJob":
                return new ImagePullJob(name, <any>undefined, { urn })
            case "kubernetes:apps.kruise.io/v1alpha1:NodeImage":
                return new NodeImage(name, <any>undefined, { urn })
            case "kubernetes:apps.kruise.io/v1alpha1:NodePodProbe":
                return new NodePodProbe(name, <any>undefined, { urn })
            case "kubernetes:apps.kruise.io/v1alpha1:PersistentPodState":
                return new PersistentPodState(name, <any>undefined, { urn })
            case "kubernetes:apps.kruise.io/v1alpha1:PodProbeMarker":
                return new PodProbeMarker(name, <any>undefined, { urn })
            case "kubernetes:apps.kruise.io/v1alpha1:ResourceDistribution":
                return new ResourceDistribution(name, <any>undefined, { urn })
            case "kubernetes:apps.kruise.io/v1alpha1:SidecarSet":
                return new SidecarSet(name, <any>undefined, { urn })
            case "kubernetes:apps.kruise.io/v1alpha1:StatefulSet":
                return new StatefulSet(name, <any>undefined, { urn })
            case "kubernetes:apps.kruise.io/v1alpha1:UnitedDeployment":
                return new UnitedDeployment(name, <any>undefined, { urn })
            case "kubernetes:apps.kruise.io/v1alpha1:WorkloadSpread":
                return new WorkloadSpread(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kruise", "apps.kruise.io/v1alpha1", _module)
