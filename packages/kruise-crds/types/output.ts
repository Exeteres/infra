// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import * as utilities from "../utilities";

import {ObjectMeta} from "../meta/v1";

export namespace apps {
    export namespace v1alpha1 {
        /**
         * AdvancedCronJobSpec defines the desired state of AdvancedCronJob
         */
        export interface AdvancedCronJobSpec {
            /**
             * Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
             */
            concurrencyPolicy?: string;
            /**
             * The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
             */
            failedJobsHistoryLimit?: number;
            /**
             * Paused will pause the cron job.
             */
            paused?: boolean;
            /**
             * The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
             */
            schedule: string;
            /**
             * Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
             */
            startingDeadlineSeconds?: number;
            /**
             * The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
             */
            successfulJobsHistoryLimit?: number;
            /**
             * Specifies the job that will be created when executing a CronJob.
             */
            template: outputs.apps.v1alpha1.AdvancedCronJobSpecTemplate;
            /**
             * The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones. If not specified, this will default to the time zone of the kruise-controller-manager process.
             */
            timeZone?: string;
        }

        /**
         * Specifies the job that will be created when executing a CronJob.
         */
        export interface AdvancedCronJobSpecTemplate {
            /**
             * Specifies the broadcastjob that will be created when executing a BroadcastCronJob.
             */
            broadcastJobTemplate?: outputs.apps.v1alpha1.AdvancedCronJobSpecTemplateBroadcastJobTemplate;
            /**
             * Specifies the job that will be created when executing a CronJob.
             */
            jobTemplate?: {[key: string]: any};
        }

        /**
         * Specifies the broadcastjob that will be created when executing a BroadcastCronJob.
         */
        export interface AdvancedCronJobSpecTemplateBroadcastJobTemplate {
            /**
             * Standard object's metadata of the jobs created from this template.
             */
            metadata?: {[key: string]: any};
            /**
             * Specification of the desired behavior of the broadcastjob.
             */
            spec?: outputs.apps.v1alpha1.AdvancedCronJobSpecTemplateBroadcastJobTemplateSpec;
        }

        /**
         * Specification of the desired behavior of the broadcastjob.
         */
        export interface AdvancedCronJobSpecTemplateBroadcastJobTemplateSpec {
            /**
             * CompletionPolicy indicates the completion policy of the job. Default is Always CompletionPolicyType.
             */
            completionPolicy?: outputs.apps.v1alpha1.AdvancedCronJobSpecTemplateBroadcastJobTemplateSpecCompletionPolicy;
            /**
             * FailurePolicy indicates the behavior of the job, when failed pod is found.
             */
            failurePolicy?: outputs.apps.v1alpha1.AdvancedCronJobSpecTemplateBroadcastJobTemplateSpecFailurePolicy;
            /**
             * Parallelism specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when the work left to do is less than max parallelism. Not setting this value means no limit.
             */
            parallelism?: number | string;
            /**
             * Paused will pause the job.
             */
            paused?: boolean;
            /**
             * Template describes the pod that will be created when executing a job.
             */
            template: {[key: string]: any};
        }

        /**
         * CompletionPolicy indicates the completion policy of the job. Default is Always CompletionPolicyType.
         */
        export interface AdvancedCronJobSpecTemplateBroadcastJobTemplateSpecCompletionPolicy {
            /**
             * ActiveDeadlineSeconds specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer. Only works for Always type.
             */
            activeDeadlineSeconds?: number;
            /**
             * ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature. Only works for Always type
             */
            ttlSecondsAfterFinished?: number;
            /**
             * Type indicates the type of the CompletionPolicy. Default is Always.
             */
            type?: string;
        }

        /**
         * FailurePolicy indicates the behavior of the job, when failed pod is found.
         */
        export interface AdvancedCronJobSpecTemplateBroadcastJobTemplateSpecFailurePolicy {
            /**
             * RestartLimit specifies the number of retries before marking the pod failed.
             */
            restartLimit?: number;
            /**
             * Type indicates the type of FailurePolicyType. Default is FailurePolicyTypeFailFast.
             */
            type?: string;
        }

        /**
         * AdvancedCronJobStatus defines the observed state of AdvancedCronJob
         */
        export interface AdvancedCronJobStatus {
            /**
             * A list of pointers to currently running jobs.
             */
            active?: outputs.apps.v1alpha1.AdvancedCronJobStatusActive[];
            /**
             * Information when was the last time the job was successfully scheduled.
             */
            lastScheduleTime?: string;
            type?: string;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface AdvancedCronJobStatusActive {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * BroadcastJobSpec defines the desired state of BroadcastJob
         */
        export interface BroadcastJobSpec {
            /**
             * CompletionPolicy indicates the completion policy of the job. Default is Always CompletionPolicyType.
             */
            completionPolicy?: outputs.apps.v1alpha1.BroadcastJobSpecCompletionPolicy;
            /**
             * FailurePolicy indicates the behavior of the job, when failed pod is found.
             */
            failurePolicy?: outputs.apps.v1alpha1.BroadcastJobSpecFailurePolicy;
            /**
             * Parallelism specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when the work left to do is less than max parallelism. Not setting this value means no limit.
             */
            parallelism?: number | string;
            /**
             * Paused will pause the job.
             */
            paused?: boolean;
            /**
             * Template describes the pod that will be created when executing a job.
             */
            template: {[key: string]: any};
        }

        /**
         * CompletionPolicy indicates the completion policy of the job. Default is Always CompletionPolicyType.
         */
        export interface BroadcastJobSpecCompletionPolicy {
            /**
             * ActiveDeadlineSeconds specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer. Only works for Always type.
             */
            activeDeadlineSeconds?: number;
            /**
             * ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature. Only works for Always type
             */
            ttlSecondsAfterFinished?: number;
            /**
             * Type indicates the type of the CompletionPolicy. Default is Always.
             */
            type?: string;
        }

        /**
         * FailurePolicy indicates the behavior of the job, when failed pod is found.
         */
        export interface BroadcastJobSpecFailurePolicy {
            /**
             * RestartLimit specifies the number of retries before marking the pod failed.
             */
            restartLimit?: number;
            /**
             * Type indicates the type of FailurePolicyType. Default is FailurePolicyTypeFailFast.
             */
            type?: string;
        }

        /**
         * BroadcastJobStatus defines the observed state of BroadcastJob
         */
        export interface BroadcastJobStatus {
            /**
             * The number of actively running pods.
             */
            active?: number;
            /**
             * Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
             */
            completionTime?: string;
            /**
             * The latest available observations of an object's current state.
             */
            conditions?: outputs.apps.v1alpha1.BroadcastJobStatusConditions[];
            /**
             * The desired number of pods, this is typically equal to the number of nodes satisfied to run pods.
             */
            desired?: number;
            /**
             * The number of pods which reached phase Failed.
             */
            failed?: number;
            /**
             * The phase of the job.
             */
            phase?: string;
            /**
             * Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
             */
            startTime?: string;
            /**
             * The number of pods which reached phase Succeeded.
             */
            succeeded?: number;
        }

        /**
         * JobCondition describes current state of a job.
         */
        export interface BroadcastJobStatusConditions {
            /**
             * Last time the condition was checked.
             */
            lastProbeTime?: string;
            /**
             * Last time the condition transit from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * Human readable message indicating details about last transition.
             */
            message?: string;
            /**
             * (brief) reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of job condition, Complete or Failed.
             */
            type: string;
        }

        /**
         * CloneSetSpec defines the desired state of CloneSet
         */
        export interface CloneSetSpec {
            /**
             * Lifecycle defines the lifecycle hooks for Pods pre-available(pre-normal), pre-delete, in-place update.
             */
            lifecycle?: outputs.apps.v1alpha1.CloneSetSpecLifecycle;
            /**
             * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
             */
            minReadySeconds?: number;
            /**
             * Replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template. If unspecified, defaults to 1.
             */
            replicas?: number;
            /**
             * RevisionHistoryLimit is the maximum number of revisions that will be maintained in the CloneSet's revision history. The revision history consists of all revisions not represented by a currently applied CloneSetSpec version. The default value is 10.
             */
            revisionHistoryLimit?: number;
            /**
             * ScaleStrategy indicates the ScaleStrategy that will be employed to create and delete Pods in the CloneSet.
             */
            scaleStrategy?: outputs.apps.v1alpha1.CloneSetSpecScaleStrategy;
            /**
             * Selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
             */
            selector: outputs.apps.v1alpha1.CloneSetSpecSelector;
            /**
             * Template describes the pods that will be created.
             */
            template: {[key: string]: any};
            /**
             * UpdateStrategy indicates the UpdateStrategy that will be employed to update Pods in the CloneSet when a revision is made to Template.
             */
            updateStrategy?: outputs.apps.v1alpha1.CloneSetSpecUpdateStrategy;
            /**
             * VolumeClaimTemplates is a list of claims that pods are allowed to reference. Note that PVC will be deleted when its pod has been deleted.
             */
            volumeClaimTemplates?: {[key: string]: any};
        }

        /**
         * Lifecycle defines the lifecycle hooks for Pods pre-available(pre-normal), pre-delete, in-place update.
         */
        export interface CloneSetSpecLifecycle {
            /**
             * InPlaceUpdate is the hook before Pod to update and after Pod has been updated.
             */
            inPlaceUpdate?: outputs.apps.v1alpha1.CloneSetSpecLifecycleInPlaceUpdate;
            /**
             * PreDelete is the hook before Pod to be deleted.
             */
            preDelete?: outputs.apps.v1alpha1.CloneSetSpecLifecyclePreDelete;
            /**
             * PreNormal is the hook after Pod to be created and ready to be Normal.
             */
            preNormal?: outputs.apps.v1alpha1.CloneSetSpecLifecyclePreNormal;
        }

        /**
         * InPlaceUpdate is the hook before Pod to update and after Pod has been updated.
         */
        export interface CloneSetSpecLifecycleInPlaceUpdate {
            finalizersHandler?: string[];
            labelsHandler?: {[key: string]: string};
            /**
             * MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate & PreDelete hook. Default to false.
             */
            markPodNotReady?: boolean;
        }

        /**
         * PreDelete is the hook before Pod to be deleted.
         */
        export interface CloneSetSpecLifecyclePreDelete {
            finalizersHandler?: string[];
            labelsHandler?: {[key: string]: string};
            /**
             * MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate & PreDelete hook. Default to false.
             */
            markPodNotReady?: boolean;
        }

        /**
         * PreNormal is the hook after Pod to be created and ready to be Normal.
         */
        export interface CloneSetSpecLifecyclePreNormal {
            finalizersHandler?: string[];
            labelsHandler?: {[key: string]: string};
            /**
             * MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate & PreDelete hook. Default to false.
             */
            markPodNotReady?: boolean;
        }

        /**
         * ScaleStrategy indicates the ScaleStrategy that will be employed to create and delete Pods in the CloneSet.
         */
        export interface CloneSetSpecScaleStrategy {
            /**
             * Indicate if cloneSet will reuse already existed pvc to rebuild a new pod
             */
            disablePVCReuse?: boolean;
            /**
             * The maximum number of pods that can be unavailable for scaled pods. This field can control the changes rate of replicas for CloneSet so as to minimize the impact for users' service. The scale will fail if the number of unavailable pods were greater than this MaxUnavailable at scaling up. MaxUnavailable works only when scaling up.
             */
            maxUnavailable?: number | string;
            /**
             * PodsToDelete is the names of Pod should be deleted. Note that this list will be truncated for non-existing pod names.
             */
            podsToDelete?: string[];
        }

        /**
         * Selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
         */
        export interface CloneSetSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.CloneSetSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface CloneSetSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * UpdateStrategy indicates the UpdateStrategy that will be employed to update Pods in the CloneSet when a revision is made to Template.
         */
        export interface CloneSetSpecUpdateStrategy {
            /**
             * InPlaceUpdateStrategy contains strategies for in-place update.
             */
            inPlaceUpdateStrategy?: outputs.apps.v1alpha1.CloneSetSpecUpdateStrategyInPlaceUpdateStrategy;
            /**
             * The maximum number of pods that can be scheduled above the desired replicas during update or specified delete. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. Defaults to 0.
             */
            maxSurge?: number | string;
            /**
             * The maximum number of pods that can be unavailable during update or scale. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up by default. When maxSurge > 0, absolute number is calculated from percentage by rounding down. Defaults to 20%.
             */
            maxUnavailable?: number | string;
            /**
             * Partition is the desired number of pods in old revisions. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up by default. It means when partition is set during pods updating, (replicas - partition value) number of pods will be updated. Default value is 0.
             */
            partition?: number | string;
            /**
             * Paused indicates that the CloneSet is paused. Default value is false
             */
            paused?: boolean;
            /**
             * Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.
             */
            priorityStrategy?: outputs.apps.v1alpha1.CloneSetSpecUpdateStrategyPriorityStrategy;
            /**
             * ScatterStrategy defines the scatter rules to make pods been scattered when update. This will avoid pods with the same key-value to be updated in one batch. - Note that pods will be scattered after priority sort. So, although priority strategy and scatter strategy can be applied together, we suggest to use either one of them. - If scatterStrategy is used, we suggest to just use one term. Otherwise, the update order can be hard to understand.
             */
            scatterStrategy?: outputs.apps.v1alpha1.CloneSetSpecUpdateStrategyScatterStrategy[];
            /**
             * Type indicates the type of the CloneSetUpdateStrategy. Default is ReCreate.
             */
            type?: string;
        }

        /**
         * InPlaceUpdateStrategy contains strategies for in-place update.
         */
        export interface CloneSetSpecUpdateStrategyInPlaceUpdateStrategy {
            /**
             * GracePeriodSeconds is the timespan between set Pod status to not-ready and update images in Pod spec when in-place update a Pod.
             */
            gracePeriodSeconds?: number;
        }

        /**
         * Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.
         */
        export interface CloneSetSpecUpdateStrategyPriorityStrategy {
            /**
             * Order priority terms, pods will be sorted by the value of orderedKey. For example: ``` orderPriority: - orderedKey: key1 - orderedKey: key2 ``` First, all pods which have key1 in labels will be sorted by the value of key1. Then, the left pods which have no key1 but have key2 in labels will be sorted by the value of key2 and put behind those pods have key1.
             */
            orderPriority?: outputs.apps.v1alpha1.CloneSetSpecUpdateStrategyPriorityStrategyOrderPriority[];
            /**
             * Weight priority terms, pods will be sorted by the sum of all terms weight.
             */
            weightPriority?: outputs.apps.v1alpha1.CloneSetSpecUpdateStrategyPriorityStrategyWeightPriority[];
        }

        /**
         * UpdatePriorityOrderTerm defines order priority.
         */
        export interface CloneSetSpecUpdateStrategyPriorityStrategyOrderPriority {
            /**
             * Calculate priority by value of this key. Values of this key, will be sorted by GetInt(val). GetInt method will find the last int in value, such as getting 5 in value '5', getting 10 in value 'sts-10'.
             */
            orderedKey: string;
        }

        /**
         * UpdatePriorityWeightTerm defines weight priority.
         */
        export interface CloneSetSpecUpdateStrategyPriorityStrategyWeightPriority {
            /**
             * MatchSelector is used to select by pod's labels.
             */
            matchSelector: outputs.apps.v1alpha1.CloneSetSpecUpdateStrategyPriorityStrategyWeightPriorityMatchSelector;
            /**
             * Weight associated with matching the corresponding matchExpressions, in the range 1-100.
             */
            weight: number;
        }

        /**
         * MatchSelector is used to select by pod's labels.
         */
        export interface CloneSetSpecUpdateStrategyPriorityStrategyWeightPriorityMatchSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.CloneSetSpecUpdateStrategyPriorityStrategyWeightPriorityMatchSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface CloneSetSpecUpdateStrategyPriorityStrategyWeightPriorityMatchSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        export interface CloneSetSpecUpdateStrategyScatterStrategy {
            key: string;
            value: string;
        }

        /**
         * CloneSetStatus defines the observed state of CloneSet
         */
        export interface CloneSetStatus {
            /**
             * AvailableReplicas is the number of Pods created by the CloneSet controller that have a Ready Condition for at least minReadySeconds.
             */
            availableReplicas: number;
            /**
             * CollisionCount is the count of hash collisions for the CloneSet. The CloneSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
             */
            collisionCount?: number;
            /**
             * Conditions represents the latest available observations of a CloneSet's current state.
             */
            conditions?: outputs.apps.v1alpha1.CloneSetStatusConditions[];
            /**
             * currentRevision, if not empty, indicates the current revision version of the CloneSet.
             */
            currentRevision?: string;
            /**
             * ExpectedUpdatedReplicas is the number of Pods that should be updated by CloneSet controller. This field is calculated via Replicas - Partition.
             */
            expectedUpdatedReplicas?: number;
            /**
             * LabelSelector is label selectors for query over pods that should match the replica count used by HPA.
             */
            labelSelector?: string;
            /**
             * ObservedGeneration is the most recent generation observed for this CloneSet. It corresponds to the CloneSet's generation, which is updated on mutation by the API Server.
             */
            observedGeneration?: number;
            /**
             * ReadyReplicas is the number of Pods created by the CloneSet controller that have a Ready Condition.
             */
            readyReplicas: number;
            /**
             * Replicas is the number of Pods created by the CloneSet controller.
             */
            replicas: number;
            /**
             * UpdateRevision, if not empty, indicates the latest revision of the CloneSet.
             */
            updateRevision?: string;
            /**
             * UpdatedAvailableReplicas is the number of Pods created by the CloneSet controller from the CloneSet version indicated by updateRevision and have a Ready Condition for at least minReadySeconds.
             */
            updatedAvailableReplicas?: number;
            /**
             * UpdatedReadyReplicas is the number of Pods created by the CloneSet controller from the CloneSet version indicated by updateRevision and have a Ready Condition.
             */
            updatedReadyReplicas: number;
            /**
             * UpdatedReplicas is the number of Pods created by the CloneSet controller from the CloneSet version indicated by updateRevision.
             */
            updatedReplicas: number;
        }

        /**
         * CloneSetCondition describes the state of a CloneSet at a certain point.
         */
        export interface CloneSetStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: string;
            /**
             * The reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of CloneSet condition.
             */
            type: string;
        }

        /**
         * ContainerRecreateRequestSpec defines the desired state of ContainerRecreateRequest
         */
        export interface ContainerRecreateRequestSpec {
            /**
             * ActiveDeadlineSeconds is the deadline duration of this ContainerRecreateRequest.
             */
            activeDeadlineSeconds?: number;
            /**
             * Containers contains the containers that need to recreate in the Pod.
             */
            containers: outputs.apps.v1alpha1.ContainerRecreateRequestSpecContainers[];
            /**
             * PodName is name of the Pod that owns the recreated containers.
             */
            podName: string;
            /**
             * Strategy defines strategies for containers recreation.
             */
            strategy?: outputs.apps.v1alpha1.ContainerRecreateRequestSpecStrategy;
            /**
             * TTLSecondsAfterFinished is the TTL duration after this ContainerRecreateRequest has completed.
             */
            ttlSecondsAfterFinished?: number;
        }

        /**
         * ContainerRecreateRequestContainer defines the container that need to recreate.
         */
        export interface ContainerRecreateRequestSpecContainers {
            /**
             * Name of the container that need to recreate. It must be existing in the real pod.Spec.Containers.
             */
            name: string;
            /**
             * Ports is synced from the real container in Pod spec during this ContainerRecreateRequest creating. Populated by the system. Read-only.
             */
            ports?: outputs.apps.v1alpha1.ContainerRecreateRequestSpecContainersPorts[];
            /**
             * PreStop is synced from the real container in Pod spec during this ContainerRecreateRequest creating. Populated by the system. Read-only.
             */
            preStop?: outputs.apps.v1alpha1.ContainerRecreateRequestSpecContainersPreStop;
            /**
             * StatusContext is synced from the real Pod status during this ContainerRecreateRequest creating. Populated by the system. Read-only.
             */
            statusContext?: outputs.apps.v1alpha1.ContainerRecreateRequestSpecContainersStatusContext;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface ContainerRecreateRequestSpecContainersPorts {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: number;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: string;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: number;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: string;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: string;
        }
        /**
         * containerRecreateRequestSpecContainersPortsProvideDefaults sets the appropriate defaults for ContainerRecreateRequestSpecContainersPorts
         */
        export function containerRecreateRequestSpecContainersPortsProvideDefaults(val: ContainerRecreateRequestSpecContainersPorts): ContainerRecreateRequestSpecContainersPorts {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * PreStop is synced from the real container in Pod spec during this ContainerRecreateRequest creating. Populated by the system. Read-only.
         */
        export interface ContainerRecreateRequestSpecContainersPreStop {
            /**
             * One and only one of the following should be specified. Exec specifies the action to take.
             */
            exec?: outputs.apps.v1alpha1.ContainerRecreateRequestSpecContainersPreStopExec;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.apps.v1alpha1.ContainerRecreateRequestSpecContainersPreStopHttpGet;
            /**
             * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
             */
            tcpSocket?: outputs.apps.v1alpha1.ContainerRecreateRequestSpecContainersPreStopTcpSocket;
        }

        /**
         * One and only one of the following should be specified. Exec specifies the action to take.
         */
        export interface ContainerRecreateRequestSpecContainersPreStopExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface ContainerRecreateRequestSpecContainersPreStopHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.apps.v1alpha1.ContainerRecreateRequestSpecContainersPreStopHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface ContainerRecreateRequestSpecContainersPreStopHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
         */
        export interface ContainerRecreateRequestSpecContainersPreStopTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * StatusContext is synced from the real Pod status during this ContainerRecreateRequest creating. Populated by the system. Read-only.
         */
        export interface ContainerRecreateRequestSpecContainersStatusContext {
            /**
             * Container's ID in the format 'docker://<container_id>'.
             */
            containerID: string;
            /**
             * The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
             */
            restartCount: number;
        }

        /**
         * Strategy defines strategies for containers recreation.
         */
        export interface ContainerRecreateRequestSpecStrategy {
            /**
             * FailurePolicy decides whether to continue if one container fails to recreate
             */
            failurePolicy?: string;
            /**
             * ForceRecreate indicates whether to force kill the container even if the previous container is starting.
             */
            forceRecreate?: boolean;
            /**
             * Minimum number of seconds for which a newly created container should be started and ready without any of its container crashing, for it to be considered Succeeded. Defaults to 0 (container will be considered Succeeded as soon as it is started and ready)
             */
            minStartedSeconds?: number;
            /**
             * OrderedRecreate indicates whether to recreate the next container only if the previous one has recreated completely.
             */
            orderedRecreate?: boolean;
            /**
             * TerminationGracePeriodSeconds is the optional duration in seconds to wait the container terminating gracefully. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, we will use pod.Spec.TerminationGracePeriodSeconds as default value.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * UnreadyGracePeriodSeconds is the optional duration in seconds to mark Pod as not ready over this duration before executing preStop hook and stopping the container.
             */
            unreadyGracePeriodSeconds?: number;
        }

        /**
         * ContainerRecreateRequestStatus defines the observed state of ContainerRecreateRequest
         */
        export interface ContainerRecreateRequestStatus {
            /**
             * Represents time when the ContainerRecreateRequest was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
             */
            completionTime?: string;
            /**
             * ContainerRecreateStates contains the recreation states of the containers.
             */
            containerRecreateStates?: outputs.apps.v1alpha1.ContainerRecreateRequestStatusContainerRecreateStates[];
            /**
             * A human readable message indicating details about this ContainerRecreateRequest.
             */
            message?: string;
            /**
             * Phase of this ContainerRecreateRequest, e.g. Pending, Recreating, Completed
             */
            phase: string;
        }

        /**
         * ContainerRecreateRequestContainerRecreateState contains the recreation state of the container.
         */
        export interface ContainerRecreateRequestStatusContainerRecreateStates {
            /**
             * Containers are killed by kruise daemon
             */
            isKilled?: boolean;
            /**
             * A human readable message indicating details about this state.
             */
            message?: string;
            /**
             * Name of the container.
             */
            name: string;
            /**
             * Phase indicates the recreation phase of the container.
             */
            phase: string;
        }

        /**
         * DaemonSetSpec defines the desired state of DaemonSet
         */
        export interface DaemonSetSpec {
            /**
             * BurstReplicas is a rate limiter for booting pods on a lot of pods. The default value is 250
             */
            burstReplicas?: number | string;
            /**
             * Lifecycle defines the lifecycle hooks for Pods pre-delete, in-place update. Currently, we only support pre-delete hook for Advanced DaemonSet.
             */
            lifecycle?: outputs.apps.v1alpha1.DaemonSetSpecLifecycle;
            /**
             * The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
             */
            minReadySeconds?: number;
            /**
             * The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
             */
            revisionHistoryLimit?: number;
            /**
             * A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
             */
            selector: outputs.apps.v1alpha1.DaemonSetSpecSelector;
            /**
             * An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
             */
            template: {[key: string]: any};
            /**
             * An update strategy to replace existing DaemonSet pods with new pods.
             */
            updateStrategy?: outputs.apps.v1alpha1.DaemonSetSpecUpdateStrategy;
        }

        /**
         * Lifecycle defines the lifecycle hooks for Pods pre-delete, in-place update. Currently, we only support pre-delete hook for Advanced DaemonSet.
         */
        export interface DaemonSetSpecLifecycle {
            /**
             * InPlaceUpdate is the hook before Pod to update and after Pod has been updated.
             */
            inPlaceUpdate?: outputs.apps.v1alpha1.DaemonSetSpecLifecycleInPlaceUpdate;
            /**
             * PreDelete is the hook before Pod to be deleted.
             */
            preDelete?: outputs.apps.v1alpha1.DaemonSetSpecLifecyclePreDelete;
            /**
             * PreNormal is the hook after Pod to be created and ready to be Normal.
             */
            preNormal?: outputs.apps.v1alpha1.DaemonSetSpecLifecyclePreNormal;
        }

        /**
         * InPlaceUpdate is the hook before Pod to update and after Pod has been updated.
         */
        export interface DaemonSetSpecLifecycleInPlaceUpdate {
            finalizersHandler?: string[];
            labelsHandler?: {[key: string]: string};
            /**
             * MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate & PreDelete hook. Default to false.
             */
            markPodNotReady?: boolean;
        }

        /**
         * PreDelete is the hook before Pod to be deleted.
         */
        export interface DaemonSetSpecLifecyclePreDelete {
            finalizersHandler?: string[];
            labelsHandler?: {[key: string]: string};
            /**
             * MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate & PreDelete hook. Default to false.
             */
            markPodNotReady?: boolean;
        }

        /**
         * PreNormal is the hook after Pod to be created and ready to be Normal.
         */
        export interface DaemonSetSpecLifecyclePreNormal {
            finalizersHandler?: string[];
            labelsHandler?: {[key: string]: string};
            /**
             * MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate & PreDelete hook. Default to false.
             */
            markPodNotReady?: boolean;
        }

        /**
         * A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
         */
        export interface DaemonSetSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.DaemonSetSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DaemonSetSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * An update strategy to replace existing DaemonSet pods with new pods.
         */
        export interface DaemonSetSpecUpdateStrategy {
            /**
             * Rolling update config params. Present only if type = "RollingUpdate".
             */
            rollingUpdate?: outputs.apps.v1alpha1.DaemonSetSpecUpdateStrategyRollingUpdate;
            /**
             * Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
             */
            type?: string;
        }

        /**
         * Rolling update config params. Present only if type = "RollingUpdate".
         */
        export interface DaemonSetSpecUpdateStrategyRollingUpdate {
            /**
             * The maximum number of nodes with an existing available DaemonSet pod that can have an updated DaemonSet pod during during an update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up to a minimum of 1. Default value is 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their a new pod created before the old pod is marked as deleted. The update starts by launching new pods on 30% of nodes. Once an updated pod is available (Ready for at least minReadySeconds) the old DaemonSet pod on that node is marked deleted. If the old pod becomes unavailable for any reason (Ready transitions to false, is evicted, or is drained) an updated pod is immediatedly created on that node without considering surge limits. Allowing surge implies the possibility that the resources consumed by the daemonset on any given node can double if the readiness check fails, and so resource intensive daemonsets should take into account that they may cause evictions during disruption. This is beta field and enabled/disabled by DaemonSetUpdateSurge feature gate.
             */
            maxSurge?: number | string;
            /**
             * The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0 if MaxSurge is 0 Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
             */
            maxUnavailable?: number | string;
            /**
             * The number of DaemonSet pods remained to be old version. Default value is 0. Maximum value is status.DesiredNumberScheduled, which means no pod will be updated.
             */
            partition?: number;
            /**
             * Indicates that the daemon set is paused and will not be processed by the daemon set controller.
             */
            paused?: boolean;
            /**
             * Type is to specify which kind of rollingUpdate.
             */
            rollingUpdateType?: string;
            /**
             * A label query over nodes that are managed by the daemon set RollingUpdate. Must match in order to be controlled. It must match the node's labels.
             */
            selector?: outputs.apps.v1alpha1.DaemonSetSpecUpdateStrategyRollingUpdateSelector;
        }

        /**
         * A label query over nodes that are managed by the daemon set RollingUpdate. Must match in order to be controlled. It must match the node's labels.
         */
        export interface DaemonSetSpecUpdateStrategyRollingUpdateSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.DaemonSetSpecUpdateStrategyRollingUpdateSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface DaemonSetSpecUpdateStrategyRollingUpdateSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * DaemonSetStatus defines the observed state of DaemonSet
         */
        export interface DaemonSetStatus {
            /**
             * Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
             */
            collisionCount?: number;
            /**
             * Represents the latest available observations of a DaemonSet's current state.
             */
            conditions?: outputs.apps.v1alpha1.DaemonSetStatusConditions[];
            /**
             * The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            currentNumberScheduled: number;
            /**
             * DaemonSetHash is the controller-revision-hash, which represents the latest version of the DaemonSet.
             */
            daemonSetHash: string;
            /**
             * The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            desiredNumberScheduled: number;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberAvailable?: number;
            /**
             * The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
             */
            numberMisscheduled: number;
            /**
             * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
             */
            numberReady: number;
            /**
             * The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
             */
            numberUnavailable?: number;
            /**
             * The most recent generation observed by the daemon set controller.
             */
            observedGeneration?: number;
            /**
             * The total number of nodes that are running updated daemon pod
             */
            updatedNumberScheduled: number;
        }

        /**
         * DaemonSetCondition describes the state of a DaemonSet at a certain point.
         */
        export interface DaemonSetStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: string;
            /**
             * The reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of DaemonSet condition.
             */
            type: string;
        }

        /**
         * ImageListPullJobSpec defines the desired state of ImageListPullJob
         */
        export interface ImageListPullJobSpec {
            /**
             * CompletionPolicy indicates the completion policy of the job. Default is Always CompletionPolicyType.
             */
            completionPolicy: outputs.apps.v1alpha1.ImageListPullJobSpecCompletionPolicy;
            /**
             * Image pull policy. One of Always, IfNotPresent. Defaults to IfNotPresent.
             */
            imagePullPolicy?: string;
            /**
             * Images is the image list to be pulled by the job
             */
            images: string[];
            /**
             * Parallelism is the requested parallelism, it can be set to any non-negative value. If it is unspecified, it defaults to 1. If it is specified as 0, then the Job is effectively paused until it is increased.
             */
            parallelism?: number | string;
            /**
             * PodSelector is a query over pods that should pull image on nodes of these pods. Mutually exclusive with Selector.
             */
            podSelector?: outputs.apps.v1alpha1.ImageListPullJobSpecPodSelector;
            /**
             * PullPolicy is an optional field to set parameters of the pulling task. If not specified, the system will use the default values.
             */
            pullPolicy?: outputs.apps.v1alpha1.ImageListPullJobSpecPullPolicy;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling the image. If specified, these secrets will be passed to individual puller implementations for them to use.  For example, in the case of docker, only DockerConfig type secrets are honored.
             */
            pullSecrets?: string[];
            /**
             * SandboxConfig support attach metadata in PullImage CRI interface during ImagePulljobs
             */
            sandboxConfig?: outputs.apps.v1alpha1.ImageListPullJobSpecSandboxConfig;
            /**
             * Selector is a query over nodes that should match the job. nil to match all nodes.
             */
            selector?: outputs.apps.v1alpha1.ImageListPullJobSpecSelector;
        }

        /**
         * CompletionPolicy indicates the completion policy of the job. Default is Always CompletionPolicyType.
         */
        export interface ImageListPullJobSpecCompletionPolicy {
            /**
             * ActiveDeadlineSeconds specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer. Only works for Always type.
             */
            activeDeadlineSeconds?: number;
            /**
             * ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature. Only works for Always type
             */
            ttlSecondsAfterFinished?: number;
            /**
             * Type indicates the type of the CompletionPolicy. Default is Always.
             */
            type?: string;
        }

        /**
         * PodSelector is a query over pods that should pull image on nodes of these pods. Mutually exclusive with Selector.
         */
        export interface ImageListPullJobSpecPodSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.ImageListPullJobSpecPodSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ImageListPullJobSpecPodSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * PullPolicy is an optional field to set parameters of the pulling task. If not specified, the system will use the default values.
         */
        export interface ImageListPullJobSpecPullPolicy {
            /**
             * Specifies the number of retries before marking the pulling task failed. Defaults to 3
             */
            backoffLimit?: number;
            /**
             * Specifies the timeout of the pulling task. Defaults to 600
             */
            timeoutSeconds?: number;
        }

        /**
         * SandboxConfig support attach metadata in PullImage CRI interface during ImagePulljobs
         */
        export interface ImageListPullJobSpecSandboxConfig {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        /**
         * Selector is a query over nodes that should match the job. nil to match all nodes.
         */
        export interface ImageListPullJobSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.ImageListPullJobSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
            /**
             * Names specify a set of nodes to execute the job.
             */
            names?: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ImageListPullJobSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * ImageListPullJobStatus defines the observed state of ImageListPullJob
         */
        export interface ImageListPullJobStatus {
            /**
             * The number of running ImagePullJobs which are acknowledged by the imagepulljob controller.
             */
            active?: number;
            /**
             * The number of ImagePullJobs which are finished
             */
            completed?: number;
            /**
             * Represents time when the all the image pull job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
             */
            completionTime?: string;
            /**
             * The desired number of ImagePullJobs, this is typically equal to the number of len(spec.Images).
             */
            desired: number;
            /**
             * The status of ImagePullJob which has the failed nodes(status.Failed>0) .
             */
            failedImageStatuses?: outputs.apps.v1alpha1.ImageListPullJobStatusFailedImageStatuses[];
            /**
             * Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
             */
            startTime?: string;
            /**
             * The number of image pull job which are finished and status.Succeeded==status.Desired.
             */
            succeeded?: number;
        }

        /**
         * FailedImageStatus the state of ImagePullJob which has the failed nodes(status.Failed>0)
         */
        export interface ImageListPullJobStatusFailedImageStatuses {
            /**
             * The name of ImagePullJob which has the failed nodes(status.Failed>0)
             */
            imagePullJob?: string;
            /**
             * The text prompt for job running status.
             */
            message?: string;
            /**
             * Name of the image
             */
            name?: string;
        }

        /**
         * ImagePullJobSpec defines the desired state of ImagePullJob
         */
        export interface ImagePullJobSpec {
            /**
             * CompletionPolicy indicates the completion policy of the job. Default is Always CompletionPolicyType.
             */
            completionPolicy: outputs.apps.v1alpha1.ImagePullJobSpecCompletionPolicy;
            /**
             * Image is the image to be pulled by the job
             */
            image: string;
            /**
             * Image pull policy. One of Always, IfNotPresent. Defaults to IfNotPresent.
             */
            imagePullPolicy?: string;
            /**
             * Parallelism is the requested parallelism, it can be set to any non-negative value. If it is unspecified, it defaults to 1. If it is specified as 0, then the Job is effectively paused until it is increased.
             */
            parallelism?: number | string;
            /**
             * PodSelector is a query over pods that should pull image on nodes of these pods. Mutually exclusive with Selector.
             */
            podSelector?: outputs.apps.v1alpha1.ImagePullJobSpecPodSelector;
            /**
             * PullPolicy is an optional field to set parameters of the pulling task. If not specified, the system will use the default values.
             */
            pullPolicy?: outputs.apps.v1alpha1.ImagePullJobSpecPullPolicy;
            /**
             * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling the image. If specified, these secrets will be passed to individual puller implementations for them to use.  For example, in the case of docker, only DockerConfig type secrets are honored.
             */
            pullSecrets?: string[];
            /**
             * SandboxConfig support attach metadata in PullImage CRI interface during ImagePulljobs
             */
            sandboxConfig?: outputs.apps.v1alpha1.ImagePullJobSpecSandboxConfig;
            /**
             * Selector is a query over nodes that should match the job. nil to match all nodes.
             */
            selector?: outputs.apps.v1alpha1.ImagePullJobSpecSelector;
        }

        /**
         * CompletionPolicy indicates the completion policy of the job. Default is Always CompletionPolicyType.
         */
        export interface ImagePullJobSpecCompletionPolicy {
            /**
             * ActiveDeadlineSeconds specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer. Only works for Always type.
             */
            activeDeadlineSeconds?: number;
            /**
             * ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature. Only works for Always type
             */
            ttlSecondsAfterFinished?: number;
            /**
             * Type indicates the type of the CompletionPolicy. Default is Always.
             */
            type?: string;
        }

        /**
         * PodSelector is a query over pods that should pull image on nodes of these pods. Mutually exclusive with Selector.
         */
        export interface ImagePullJobSpecPodSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.ImagePullJobSpecPodSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ImagePullJobSpecPodSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * PullPolicy is an optional field to set parameters of the pulling task. If not specified, the system will use the default values.
         */
        export interface ImagePullJobSpecPullPolicy {
            /**
             * Specifies the number of retries before marking the pulling task failed. Defaults to 3
             */
            backoffLimit?: number;
            /**
             * Specifies the timeout of the pulling task. Defaults to 600
             */
            timeoutSeconds?: number;
        }

        /**
         * SandboxConfig support attach metadata in PullImage CRI interface during ImagePulljobs
         */
        export interface ImagePullJobSpecSandboxConfig {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        /**
         * Selector is a query over nodes that should match the job. nil to match all nodes.
         */
        export interface ImagePullJobSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.ImagePullJobSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
            /**
             * Names specify a set of nodes to execute the job.
             */
            names?: string[];
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ImagePullJobSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * ImagePullJobStatus defines the observed state of ImagePullJob
         */
        export interface ImagePullJobStatus {
            /**
             * The number of actively running pulling tasks.
             */
            active?: number;
            /**
             * Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
             */
            completionTime?: string;
            /**
             * The desired number of pulling tasks, this is typically equal to the number of nodes satisfied.
             */
            desired: number;
            /**
             * The number of pulling tasks  which reached phase Failed.
             */
            failed?: number;
            /**
             * The nodes that failed to pull the image.
             */
            failedNodes?: string[];
            /**
             * The text prompt for job running status.
             */
            message?: string;
            /**
             * Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
             */
            startTime?: string;
            /**
             * The number of pulling tasks which reached phase Succeeded.
             */
            succeeded?: number;
        }

        /**
         * NodeImageSpec defines the desired state of NodeImage
         */
        export interface NodeImageSpec {
            /**
             * Specifies images to be pulled on this node It can not be more than 256 for each NodeImage
             */
            images?: {[key: string]: outputs.apps.v1alpha1.NodeImageSpecImages};
        }

        /**
         * ImageSpec defines the pulling spec of an image
         */
        export interface NodeImageSpecImages {
            /**
             * PullSecrets is an optional list of references to secrets in the same namespace to use for pulling the image. If specified, these secrets will be passed to individual puller implementations for them to use.  For example, in the case of docker, only DockerConfig type secrets are honored.
             */
            pullSecrets?: outputs.apps.v1alpha1.NodeImageSpecImagesPullSecrets[];
            /**
             * SandboxConfig support attach metadata in PullImage CRI interface during ImagePulljobs
             */
            sandboxConfig?: outputs.apps.v1alpha1.NodeImageSpecImagesSandboxConfig;
            /**
             * Tags is a list of versions of this image
             */
            tags: outputs.apps.v1alpha1.NodeImageSpecImagesTags[];
        }

        /**
         * ReferenceObject comprises a resource name, with a mandatory namespace, rendered as "<namespace>/<name>".
         */
        export interface NodeImageSpecImagesPullSecrets {
            name?: string;
            namespace?: string;
        }

        /**
         * SandboxConfig support attach metadata in PullImage CRI interface during ImagePulljobs
         */
        export interface NodeImageSpecImagesSandboxConfig {
            annotations?: {[key: string]: string};
            labels?: {[key: string]: string};
        }

        /**
         * ImageTagSpec defines the pulling spec of an image tag
         */
        export interface NodeImageSpecImagesTags {
            /**
             * Specifies the create time of this tag
             */
            createdAt?: string;
            /**
             * Image pull policy. One of Always, IfNotPresent. Defaults to IfNotPresent.
             */
            imagePullPolicy?: string;
            /**
             * List of objects depended by this object. If this image is managed by a controller, then an entry in this list will point to this controller.
             */
            ownerReferences?: outputs.apps.v1alpha1.NodeImageSpecImagesTagsOwnerReferences[];
            /**
             * PullPolicy is an optional field to set parameters of the pulling task. If not specified, the system will use the default values.
             */
            pullPolicy?: outputs.apps.v1alpha1.NodeImageSpecImagesTagsPullPolicy;
            /**
             * Specifies the image tag
             */
            tag: string;
            /**
             * An opaque value that represents the internal version of this tag that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. 
             *  Populated by the system. Read-only. Value must be treated as opaque by clients and .
             */
            version?: number;
        }

        /**
         * ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. 
         *  Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
         */
        export interface NodeImageSpecImagesTagsOwnerReferences {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
             */
            fieldPath?: string;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: string;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name?: string;
            /**
             * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
             */
            namespace?: string;
            /**
             * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: string;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
             */
            uid?: string;
        }

        /**
         * PullPolicy is an optional field to set parameters of the pulling task. If not specified, the system will use the default values.
         */
        export interface NodeImageSpecImagesTagsPullPolicy {
            /**
             * ActiveDeadlineSeconds specifies the duration in seconds relative to the startTime that the task may be active before the system tries to terminate it; value must be positive integer. if not specified, the system will never terminate it.
             */
            activeDeadlineSeconds?: number;
            /**
             * Specifies the number of retries before marking the pulling task failed. Defaults to 3
             */
            backoffLimit?: number;
            /**
             * Specifies the timeout of the pulling task. Defaults to 600
             */
            timeoutSeconds?: number;
            /**
             * TTLSecondsAfterFinished limits the lifetime of a pulling task that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the task finishes, it is eligible to be automatically deleted. If this field is unset, the task won't be automatically deleted. If this field is set to zero, the task becomes eligible to be deleted immediately after it finishes.
             */
            ttlSecondsAfterFinished?: number;
        }

        /**
         * NodeImageStatus defines the observed state of NodeImage
         */
        export interface NodeImageStatus {
            /**
             * The desired number of pulling tasks, this is typically equal to the number of images in spec.
             */
            desired: number;
            /**
             * The number of pulling tasks  which reached phase Failed.
             */
            failed?: number;
            /**
             * The first of all job has finished on this node. When a node is added to the cluster, we want to know the time when the node's image pulling is completed, and use it to trigger the operation of the upper system.
             */
            firstSyncStatus?: outputs.apps.v1alpha1.NodeImageStatusFirstSyncStatus;
            /**
             * all statuses of active image pulling tasks
             */
            imageStatuses?: {[key: string]: outputs.apps.v1alpha1.NodeImageStatusImageStatuses};
            /**
             * The number of pulling tasks which are not finished.
             */
            pulling?: number;
            /**
             * The number of pulling tasks which reached phase Succeeded.
             */
            succeeded?: number;
        }

        /**
         * The first of all job has finished on this node. When a node is added to the cluster, we want to know the time when the node's image pulling is completed, and use it to trigger the operation of the upper system.
         */
        export interface NodeImageStatusFirstSyncStatus {
            message?: string;
            /**
             * SyncStatusPhase defines the node status
             */
            status?: string;
            syncAt?: string;
        }

        /**
         * ImageStatus defines the pulling status of an image
         */
        export interface NodeImageStatusImageStatuses {
            /**
             * Represents statuses of pulling tasks on this node
             */
            tags: outputs.apps.v1alpha1.NodeImageStatusImageStatusesTags[];
        }

        /**
         * ImageTagStatus defines the pulling status of an image tag
         */
        export interface NodeImageStatusImageStatusesTags {
            /**
             * Represents time when the pulling task was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
             */
            completionTime?: string;
            /**
             * Represents the ID of this image.
             */
            imageID?: string;
            /**
             * Represents the summary information of this node
             */
            message?: string;
            /**
             * Represents the image pulling task phase.
             */
            phase: string;
            /**
             * Represents the pulling progress of this tag, which is between 0-100. There is no guarantee of monotonic consistency, and it may be a rollback due to retry during pulling.
             */
            progress?: number;
            /**
             * Represents time when the pulling task was acknowledged by the image puller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
             */
            startTime?: string;
            /**
             * Represents the image tag.
             */
            tag: string;
            /**
             * Represents the internal version of this tag that the daemon handled.
             */
            version?: number;
        }

        /**
         * NodePodProbeSpec defines the desired state of NodePodProbe
         */
        export interface NodePodProbeSpec {
            podProbes?: outputs.apps.v1alpha1.NodePodProbeSpecPodProbes[];
        }

        export interface NodePodProbeSpecPodProbes {
            /**
             * pod ip
             */
            IP: string;
            /**
             * pod name
             */
            name: string;
            /**
             * pod namespace
             */
            namespace: string;
            /**
             * Custom container probe, supports Exec, Tcp, and returns the result to Pod yaml
             */
            probes?: outputs.apps.v1alpha1.NodePodProbeSpecPodProbesProbes[];
            /**
             * pod uid
             */
            uid: string;
        }

        export interface NodePodProbeSpecPodProbesProbes {
            /**
             * container name
             */
            containerName: string;
            /**
             * Name is podProbeMarker.Name#probe.Name
             */
            name: string;
            /**
             * container probe spec
             */
            probe: outputs.apps.v1alpha1.NodePodProbeSpecPodProbesProbesProbe;
        }

        /**
         * container probe spec
         */
        export interface NodePodProbeSpecPodProbesProbesProbe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.apps.v1alpha1.NodePodProbeSpecPodProbesProbesProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.apps.v1alpha1.NodePodProbeSpecPodProbesProbesProbeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.apps.v1alpha1.NodePodProbeSpecPodProbesProbesProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.apps.v1alpha1.NodePodProbeSpecPodProbesProbesProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface NodePodProbeSpecPodProbesProbesProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface NodePodProbeSpecPodProbesProbesProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface NodePodProbeSpecPodProbesProbesProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.apps.v1alpha1.NodePodProbeSpecPodProbesProbesProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface NodePodProbeSpecPodProbesProbesProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface NodePodProbeSpecPodProbesProbesProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        export interface NodePodProbeStatus {
            /**
             * pod probe results
             */
            podProbeStatuses?: outputs.apps.v1alpha1.NodePodProbeStatusPodProbeStatuses[];
        }

        export interface NodePodProbeStatusPodProbeStatuses {
            /**
             * pod name
             */
            name: string;
            /**
             * pod namespace
             */
            namespace: string;
            /**
             * pod probe result
             */
            probeStates?: outputs.apps.v1alpha1.NodePodProbeStatusPodProbeStatusesProbeStates[];
            /**
             * pod uid
             */
            uid: string;
        }

        export interface NodePodProbeStatusPodProbeStatusesProbeStates {
            /**
             * Last time we probed the condition.
             */
            lastProbeTime?: string;
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * If Status=True, Message records the return result of Probe. If Status=False, Message records Probe's error message
             */
            message?: string;
            /**
             * Name is podProbeMarker.Name#probe.Name
             */
            name: string;
            /**
             * container probe exec state, True or False
             */
            state: string;
        }

        /**
         * PersistentPodStateSpec defines the desired state of PersistentPodState
         */
        export interface PersistentPodStateSpec {
            /**
             * Persist the annotations information of the pods that need to be saved
             */
            persistentPodAnnotations?: outputs.apps.v1alpha1.PersistentPodStateSpecPersistentPodAnnotations[];
            /**
             * PersistentPodStateRetentionPolicy describes the policy used for PodState. The default policy of 'WhenScaled' causes when scale down statefulSet, deleting it.
             */
            persistentPodStateRetentionPolicy?: string;
            /**
             * Pod rebuilt topology preferred for node labels, with xx weight for example  kubernetes.io/hostname, failure-domain.beta.kubernetes.io/zone
             */
            preferredPersistentTopology?: outputs.apps.v1alpha1.PersistentPodStateSpecPreferredPersistentTopology[];
            /**
             * Pod rebuilt topology required for node labels for example kubernetes.io/hostname, failure-domain.beta.kubernetes.io/zone
             */
            requiredPersistentTopology?: outputs.apps.v1alpha1.PersistentPodStateSpecRequiredPersistentTopology;
            /**
             * TargetReference contains enough information to let you identify an workload for PersistentPodState Selector and TargetReference are mutually exclusive, TargetReference is priority to take effect current only support StatefulSet
             */
            targetRef: outputs.apps.v1alpha1.PersistentPodStateSpecTargetRef;
        }

        export interface PersistentPodStateSpecPersistentPodAnnotations {
            key: string;
        }

        export interface PersistentPodStateSpecPreferredPersistentTopology {
            preference: outputs.apps.v1alpha1.PersistentPodStateSpecPreferredPersistentTopologyPreference;
            weight: number;
        }

        export interface PersistentPodStateSpecPreferredPersistentTopologyPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            nodeTopologyKeys: string[];
        }

        /**
         * Pod rebuilt topology required for node labels for example kubernetes.io/hostname, failure-domain.beta.kubernetes.io/zone
         */
        export interface PersistentPodStateSpecRequiredPersistentTopology {
            /**
             * A list of node selector requirements by node's labels.
             */
            nodeTopologyKeys: string[];
        }

        /**
         * TargetReference contains enough information to let you identify an workload for PersistentPodState Selector and TargetReference are mutually exclusive, TargetReference is priority to take effect current only support StatefulSet
         */
        export interface PersistentPodStateSpecTargetRef {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * Kind of the referent.
             */
            kind: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        export interface PersistentPodStateStatus {
            /**
             * observedGeneration is the most recent generation observed for this PersistentPodState. It corresponds to the PersistentPodState's generation, which is updated on mutation by the API Server.
             */
            observedGeneration: number;
            /**
             * When the pod is ready, record some status information of the pod, such as: labels, annotations, topologies, etc. map[string]PodState -> map[Pod.Name]PodState
             */
            podStates?: {[key: string]: outputs.apps.v1alpha1.PersistentPodStateStatusPodStates};
        }

        export interface PersistentPodStateStatusPodStates {
            /**
             * pod persistent annotations
             */
            annotations?: {[key: string]: string};
            /**
             * pod.spec.nodeName
             */
            nodeName?: string;
            /**
             * node topology labels key=value for example kubernetes.io/hostname=node-1
             */
            nodeTopologyLabels?: {[key: string]: string};
        }

        /**
         * PodProbeMarkerSpec defines the desired state of PodProbeMarker
         */
        export interface PodProbeMarkerSpec {
            /**
             * Custom container probe, current only support Exec(). Probe Result will record in Pod.Status.Conditions, and condition.type=probe.name. condition.status=True indicates probe success condition.status=False indicates probe fails
             */
            probes: outputs.apps.v1alpha1.PodProbeMarkerSpecProbes[];
            /**
             * Selector is a label query over pods that should exec custom probe It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
             */
            selector: outputs.apps.v1alpha1.PodProbeMarkerSpecSelector;
        }

        export interface PodProbeMarkerSpecProbes {
            /**
             * container name
             */
            containerName: string;
            /**
             * According to the execution result of ContainerProbe, perform specific actions, such as: patch Pod labels, annotations, ReadinessGate Condition It cannot be null at the same time as PodConditionType.
             */
            markerPolicy?: outputs.apps.v1alpha1.PodProbeMarkerSpecProbesMarkerPolicy[];
            /**
             * probe name, unique within the Pod(Even between different containers, they cannot be the same)
             */
            name: string;
            /**
             * If it is not empty, the Probe execution result will be recorded on the Pod condition. It cannot be null at the same time as MarkerPolicy. For example PodConditionType=game.kruise.io/healthy, pod.status.condition.type = game.kruise.io/healthy. When probe is Succeeded, pod.status.condition.status = True. Otherwise, when the probe fails to execute, pod.status.condition.status = False.
             */
            podConditionType?: string;
            /**
             * container probe spec
             */
            probe: outputs.apps.v1alpha1.PodProbeMarkerSpecProbesProbe;
        }

        export interface PodProbeMarkerSpecProbesMarkerPolicy {
            /**
             * Patch annotations pod.annotations
             */
            annotations?: {[key: string]: string};
            /**
             * Patch Labels pod.labels
             */
            labels?: {[key: string]: string};
            /**
             * probe status, True or False For example: State=Succeeded, annotations[controller.kubernetes.io/pod-deletion-cost] = '10'. State=Failed, annotations[controller.kubernetes.io/pod-deletion-cost] = '-10'. In addition, if State=Failed is not defined, Exec execution fails, and the annotations[controller.kubernetes.io/pod-deletion-cost] will be Deleted
             */
            state: string;
        }

        /**
         * container probe spec
         */
        export interface PodProbeMarkerSpecProbesProbe {
            /**
             * Exec specifies the action to take.
             */
            exec?: outputs.apps.v1alpha1.PodProbeMarkerSpecProbesProbeExec;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: number;
            /**
             * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: outputs.apps.v1alpha1.PodProbeMarkerSpecProbesProbeGrpc;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: outputs.apps.v1alpha1.PodProbeMarkerSpecProbesProbeHttpGet;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: number;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: number;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: number;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: outputs.apps.v1alpha1.PodProbeMarkerSpecProbesProbeTcpSocket;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: number;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: number;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface PodProbeMarkerSpecProbesProbeExec {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: string[];
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface PodProbeMarkerSpecProbesProbeGrpc {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: number;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: string;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface PodProbeMarkerSpecProbesProbeHttpGet {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: string;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: outputs.apps.v1alpha1.PodProbeMarkerSpecProbesProbeHttpGetHttpHeaders[];
            /**
             * Path to access on the HTTP server.
             */
            path?: string;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: string;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface PodProbeMarkerSpecProbesProbeHttpGetHttpHeaders {
            /**
             * The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.
             */
            name: string;
            /**
             * The header field value
             */
            value: string;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface PodProbeMarkerSpecProbesProbeTcpSocket {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: string;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: number | string;
        }

        /**
         * Selector is a label query over pods that should exec custom probe It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
         */
        export interface PodProbeMarkerSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.PodProbeMarkerSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PodProbeMarkerSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        export interface PodProbeMarkerStatus {
            /**
             * matched Pods
             */
            matchedPods?: number;
            /**
             * observedGeneration is the most recent generation observed for this PodProbeMarker. It corresponds to the PodProbeMarker's generation, which is updated on mutation by the API Server.
             */
            observedGeneration: number;
        }

        /**
         * ResourceDistributionSpec defines the desired state of ResourceDistribution.
         */
        export interface ResourceDistributionSpec {
            /**
             * Resource must be the complete yaml that users want to distribute.
             */
            resource: {[key: string]: any};
            /**
             * Targets defines the namespaces that users want to distribute to.
             */
            targets: outputs.apps.v1alpha1.ResourceDistributionSpecTargets;
        }

        /**
         * Targets defines the namespaces that users want to distribute to.
         */
        export interface ResourceDistributionSpecTargets {
            /**
             * If AllNamespaces is true, Resource will be distributed to the all namespaces (except some forbidden namespaces, such as "kube-system" and "kube-public").
             */
            allNamespaces?: boolean;
            /**
             * If ExcludedNamespaces is not empty, Resource will never be distributed to the listed namespaces. ExcludedNamespaces has the highest priority.
             */
            excludedNamespaces?: outputs.apps.v1alpha1.ResourceDistributionSpecTargetsExcludedNamespaces;
            /**
             * If IncludedNamespaces is not empty, Resource will be distributed to the listed namespaces.
             */
            includedNamespaces?: outputs.apps.v1alpha1.ResourceDistributionSpecTargetsIncludedNamespaces;
            /**
             * If NamespaceLabelSelector is not empty, Resource will be distributed to the matched namespaces.
             */
            namespaceLabelSelector?: outputs.apps.v1alpha1.ResourceDistributionSpecTargetsNamespaceLabelSelector;
        }

        /**
         * If ExcludedNamespaces is not empty, Resource will never be distributed to the listed namespaces. ExcludedNamespaces has the highest priority.
         */
        export interface ResourceDistributionSpecTargetsExcludedNamespaces {
            list?: outputs.apps.v1alpha1.ResourceDistributionSpecTargetsExcludedNamespacesList[];
        }

        /**
         * ResourceDistributionNamespace contains a namespace name
         */
        export interface ResourceDistributionSpecTargetsExcludedNamespacesList {
            /**
             * Namespace name
             */
            name?: string;
        }

        /**
         * If IncludedNamespaces is not empty, Resource will be distributed to the listed namespaces.
         */
        export interface ResourceDistributionSpecTargetsIncludedNamespaces {
            list?: outputs.apps.v1alpha1.ResourceDistributionSpecTargetsIncludedNamespacesList[];
        }

        /**
         * ResourceDistributionNamespace contains a namespace name
         */
        export interface ResourceDistributionSpecTargetsIncludedNamespacesList {
            /**
             * Namespace name
             */
            name?: string;
        }

        /**
         * If NamespaceLabelSelector is not empty, Resource will be distributed to the matched namespaces.
         */
        export interface ResourceDistributionSpecTargetsNamespaceLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.ResourceDistributionSpecTargetsNamespaceLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ResourceDistributionSpecTargetsNamespaceLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * ResourceDistributionStatus defines the observed state of ResourceDistribution. ResourceDistributionStatus is recorded by kruise, users' modification is invalid and meaningless.
         */
        export interface ResourceDistributionStatus {
            /**
             * Conditions describe the condition when Resource creating, updating and deleting.
             */
            conditions?: outputs.apps.v1alpha1.ResourceDistributionStatusConditions[];
            /**
             * Desired represents the number of total target namespaces.
             */
            desired?: number;
            /**
             * Failed represents the number of failed distributions.
             */
            failed?: number;
            /**
             * ObservedGeneration represents the .metadata.generation that the condition was set based upon.
             */
            observedGeneration?: number;
            /**
             * Succeeded represents the number of successful distributions.
             */
            succeeded?: number;
        }

        /**
         * ResourceDistributionCondition allows a row to be marked with additional information.
         */
        export interface ResourceDistributionStatusConditions {
            /**
             * FailedNamespaces describe all failed namespaces when Status is False
             */
            failedNamespace?: string[];
            /**
             * LastTransitionTime is the last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * Reason describe human readable message indicating details about last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of ResourceDistributionCondition.
             */
            type: string;
        }

        /**
         * SidecarSetSpec defines the desired state of SidecarSet
         */
        export interface SidecarSetSpec {
            /**
             * Containers is the list of sidecar containers to be injected into the selected pod
             */
            containers?: {[key: string]: any}[];
            /**
             * List of the names of secrets required by pulling sidecar container images
             */
            imagePullSecrets?: outputs.apps.v1alpha1.SidecarSetSpecImagePullSecrets[];
            /**
             * InitContainers is the list of init containers to be injected into the selected pod We will inject those containers by their name in ascending order We only inject init containers when a new pod is created, it does not apply to any existing pod
             */
            initContainers?: {[key: string]: any}[];
            /**
             * InjectionStrategy describe the strategy when sidecarset is injected into pods
             */
            injectionStrategy?: outputs.apps.v1alpha1.SidecarSetSpecInjectionStrategy;
            /**
             * Namespace sidecarSet will only match the pods in the namespace otherwise, match pods in all namespaces(in cluster)
             */
            namespace?: string;
            /**
             * NamespaceSelector select which namespaces to inject sidecar containers. Default to the empty LabelSelector, which matches everything.
             */
            namespaceSelector?: outputs.apps.v1alpha1.SidecarSetSpecNamespaceSelector;
            /**
             * SidecarSet support to inject & in-place update metadata in pod.
             */
            patchPodMetadata?: outputs.apps.v1alpha1.SidecarSetSpecPatchPodMetadata[];
            /**
             * RevisionHistoryLimit indicates the maximum quantity of stored revisions about the SidecarSet. default value is 10
             */
            revisionHistoryLimit?: number;
            /**
             * selector is a label query over pods that should be injected
             */
            selector?: outputs.apps.v1alpha1.SidecarSetSpecSelector;
            /**
             * The sidecarset updateStrategy to use to replace existing pods with new ones.
             */
            updateStrategy?: outputs.apps.v1alpha1.SidecarSetSpecUpdateStrategy;
            /**
             * List of volumes that can be mounted by sidecar containers
             */
            volumes?: {[key: string]: any};
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface SidecarSetSpecImagePullSecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * InjectionStrategy describe the strategy when sidecarset is injected into pods
         */
        export interface SidecarSetSpecInjectionStrategy {
            /**
             * Paused indicates that SidecarSet will suspend injection into Pods If Paused is true, the sidecarSet will not be injected to newly created Pods, but the injected sidecar container remains updating and running. default is false
             */
            paused?: boolean;
            /**
             * Revision can help users rolling update SidecarSet safely. If users set this filed, SidecarSet will try to inject specific revision according to different policies.
             */
            revision?: outputs.apps.v1alpha1.SidecarSetSpecInjectionStrategyRevision;
        }

        /**
         * Revision can help users rolling update SidecarSet safely. If users set this filed, SidecarSet will try to inject specific revision according to different policies.
         */
        export interface SidecarSetSpecInjectionStrategyRevision {
            /**
             * CustomVersion corresponds to label 'apps.kruise.io/sidecarset-custom-version' of (History) SidecarSet. SidecarSet will select the specific ControllerRevision via this CustomVersion, and then restore the history SidecarSet to inject specific version of the sidecar to pods.
             */
            customVersion?: string;
            /**
             * Policy describes the behavior of revision injection. Defaults to Always.
             */
            policy?: string;
            /**
             * RevisionName corresponds to a specific ControllerRevision name of SidecarSet that you want to inject to Pods.
             */
            revisionName?: string;
        }

        /**
         * NamespaceSelector select which namespaces to inject sidecar containers. Default to the empty LabelSelector, which matches everything.
         */
        export interface SidecarSetSpecNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.SidecarSetSpecNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface SidecarSetSpecNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        export interface SidecarSetSpecPatchPodMetadata {
            /**
             * annotations
             */
            annotations?: {[key: string]: string};
            /**
             * labels map[string]string `json:"labels,omitempty"` patch pod metadata policy, Default is "Retain"
             */
            patchPolicy?: string;
        }

        /**
         * selector is a label query over pods that should be injected
         */
        export interface SidecarSetSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.SidecarSetSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface SidecarSetSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * The sidecarset updateStrategy to use to replace existing pods with new ones.
         */
        export interface SidecarSetSpecUpdateStrategy {
            /**
             * The maximum number of SidecarSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of SidecarSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1.
             */
            maxUnavailable?: number | string;
            /**
             * Partition is the desired number of pods in old revisions. It means when partition is set during pods updating, (replicas - partition) number of pods will be updated. Default value is 0.
             */
            partition?: number | string;
            /**
             * Paused indicates that the SidecarSet is paused to update the injected pods, but it don't affect the webhook inject sidecar container into the newly created pods. default is false
             */
            paused?: boolean;
            /**
             * Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.
             */
            priorityStrategy?: outputs.apps.v1alpha1.SidecarSetSpecUpdateStrategyPriorityStrategy;
            /**
             * ScatterStrategy defines the scatter rules to make pods been scattered when update. This will avoid pods with the same key-value to be updated in one batch. - Note that pods will be scattered after priority sort. So, although priority strategy and scatter strategy can be applied together, we suggest to use either one of them. - If scatterStrategy is used, we suggest to just use one term. Otherwise, the update order can be hard to understand.
             */
            scatterStrategy?: outputs.apps.v1alpha1.SidecarSetSpecUpdateStrategyScatterStrategy[];
            /**
             * If selector is not nil, this upgrade will only update the selected pods.
             */
            selector?: outputs.apps.v1alpha1.SidecarSetSpecUpdateStrategySelector;
            /**
             * Type is NotUpdate, the SidecarSet don't update the injected pods, it will only inject sidecar container into the newly created pods. Type is RollingUpdate, the SidecarSet will update the injected pods to the latest version on RollingUpdate Strategy. default is RollingUpdate
             */
            type?: string;
        }

        /**
         * Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.
         */
        export interface SidecarSetSpecUpdateStrategyPriorityStrategy {
            /**
             * Order priority terms, pods will be sorted by the value of orderedKey. For example: ``` orderPriority: - orderedKey: key1 - orderedKey: key2 ``` First, all pods which have key1 in labels will be sorted by the value of key1. Then, the left pods which have no key1 but have key2 in labels will be sorted by the value of key2 and put behind those pods have key1.
             */
            orderPriority?: outputs.apps.v1alpha1.SidecarSetSpecUpdateStrategyPriorityStrategyOrderPriority[];
            /**
             * Weight priority terms, pods will be sorted by the sum of all terms weight.
             */
            weightPriority?: outputs.apps.v1alpha1.SidecarSetSpecUpdateStrategyPriorityStrategyWeightPriority[];
        }

        /**
         * UpdatePriorityOrderTerm defines order priority.
         */
        export interface SidecarSetSpecUpdateStrategyPriorityStrategyOrderPriority {
            /**
             * Calculate priority by value of this key. Values of this key, will be sorted by GetInt(val). GetInt method will find the last int in value, such as getting 5 in value '5', getting 10 in value 'sts-10'.
             */
            orderedKey: string;
        }

        /**
         * UpdatePriorityWeightTerm defines weight priority.
         */
        export interface SidecarSetSpecUpdateStrategyPriorityStrategyWeightPriority {
            /**
             * MatchSelector is used to select by pod's labels.
             */
            matchSelector: outputs.apps.v1alpha1.SidecarSetSpecUpdateStrategyPriorityStrategyWeightPriorityMatchSelector;
            /**
             * Weight associated with matching the corresponding matchExpressions, in the range 1-100.
             */
            weight: number;
        }

        /**
         * MatchSelector is used to select by pod's labels.
         */
        export interface SidecarSetSpecUpdateStrategyPriorityStrategyWeightPriorityMatchSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.SidecarSetSpecUpdateStrategyPriorityStrategyWeightPriorityMatchSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface SidecarSetSpecUpdateStrategyPriorityStrategyWeightPriorityMatchSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        export interface SidecarSetSpecUpdateStrategyScatterStrategy {
            key: string;
            value: string;
        }

        /**
         * If selector is not nil, this upgrade will only update the selected pods.
         */
        export interface SidecarSetSpecUpdateStrategySelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.SidecarSetSpecUpdateStrategySelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface SidecarSetSpecUpdateStrategySelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * SidecarSetStatus defines the observed state of SidecarSet
         */
        export interface SidecarSetStatus {
            /**
             * CollisionCount is the count of hash collisions for the SidecarSet. The SidecarSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
             */
            collisionCount?: number;
            /**
             * LatestRevision, if not empty, indicates the latest controllerRevision name of the SidecarSet.
             */
            latestRevision?: string;
            /**
             * matchedPods is the number of Pods whose labels are matched with this SidecarSet's selector and are created after sidecarset creates
             */
            matchedPods: number;
            /**
             * observedGeneration is the most recent generation observed for this SidecarSet. It corresponds to the SidecarSet's generation, which is updated on mutation by the API Server.
             */
            observedGeneration?: number;
            /**
             * readyPods is the number of matched Pods that have a ready condition
             */
            readyPods: number;
            /**
             * updatedPods is the number of matched Pods that are injected with the latest SidecarSet's containers
             */
            updatedPods: number;
            /**
             * updatedReadyPods is the number of matched pods that updated and ready
             */
            updatedReadyPods?: number;
        }

        /**
         * StatefulSetSpec defines the desired state of StatefulSet
         */
        export interface StatefulSetSpec {
            /**
             * podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
             */
            podManagementPolicy?: string;
            /**
             * replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1. TODO: Consider a rename of this field.
             */
            replicas?: number;
            /**
             * revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
             */
            revisionHistoryLimit?: number;
            /**
             * selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
             */
            selector: outputs.apps.v1alpha1.StatefulSetSpecSelector;
            /**
             * serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
             */
            serviceName?: string;
            /**
             * template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
             */
            template: {[key: string]: any};
            /**
             * updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
             */
            updateStrategy?: outputs.apps.v1alpha1.StatefulSetSpecUpdateStrategy;
            /**
             * volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name. TODO: Define the behavior if a claim already exists with the same name.
             */
            volumeClaimTemplates?: {[key: string]: any};
        }

        /**
         * selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
         */
        export interface StatefulSetSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.StatefulSetSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface StatefulSetSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
         */
        export interface StatefulSetSpecUpdateStrategy {
            /**
             * RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
             */
            rollingUpdate?: outputs.apps.v1alpha1.StatefulSetSpecUpdateStrategyRollingUpdate;
            /**
             * Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
             */
            type?: string;
        }

        /**
         * RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdate {
            /**
             * InPlaceUpdateStrategy contains strategies for in-place update.
             */
            inPlaceUpdateStrategy?: outputs.apps.v1alpha1.StatefulSetSpecUpdateStrategyRollingUpdateInPlaceUpdateStrategy;
            /**
             * The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. Also, maxUnavailable can just be allowed to work with Parallel podManagementPolicy. Defaults to 1.
             */
            maxUnavailable?: number | string;
            /**
             * MinReadySeconds indicates how long will the pod be considered ready after it's updated. MinReadySeconds works with both OrderedReady and Parallel podManagementPolicy. It affects the pod scale up speed when the podManagementPolicy is set to be OrderedReady. Combined with MaxUnavailable, it affects the pod update speed regardless of podManagementPolicy. Default value is 0, max is 300.
             */
            minReadySeconds?: number;
            /**
             * Partition indicates the ordinal at which the StatefulSet should be partitioned by default. But if unorderedUpdate has been set: - Partition indicates the number of pods with non-updated revisions when rolling update. - It means controller will update $(replicas - partition) number of pod. Default value is 0.
             */
            partition?: number;
            /**
             * Paused indicates that the StatefulSet is paused. Default value is false
             */
            paused?: boolean;
            /**
             * PodUpdatePolicy indicates how pods should be updated Default value is "ReCreate"
             */
            podUpdatePolicy?: string;
            /**
             * UnorderedUpdate contains strategies for non-ordered update. If it is not nil, pods will be updated with non-ordered sequence. Noted that UnorderedUpdate can only be allowed to work with Parallel podManagementPolicy
             */
            unorderedUpdate?: outputs.apps.v1alpha1.StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdate;
        }

        /**
         * InPlaceUpdateStrategy contains strategies for in-place update.
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdateInPlaceUpdateStrategy {
            /**
             * GracePeriodSeconds is the timespan between set Pod status to not-ready and update images in Pod spec when in-place update a Pod.
             */
            gracePeriodSeconds?: number;
        }

        /**
         * UnorderedUpdate contains strategies for non-ordered update. If it is not nil, pods will be updated with non-ordered sequence. Noted that UnorderedUpdate can only be allowed to work with Parallel podManagementPolicy
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdate {
            /**
             * Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.
             */
            priorityStrategy?: outputs.apps.v1alpha1.StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategy;
        }

        /**
         * Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategy {
            /**
             * Order priority terms, pods will be sorted by the value of orderedKey. For example: ``` orderPriority: - orderedKey: key1 - orderedKey: key2 ``` First, all pods which have key1 in labels will be sorted by the value of key1. Then, the left pods which have no key1 but have key2 in labels will be sorted by the value of key2 and put behind those pods have key1.
             */
            orderPriority?: outputs.apps.v1alpha1.StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyOrderPriority[];
            /**
             * Weight priority terms, pods will be sorted by the sum of all terms weight.
             */
            weightPriority?: outputs.apps.v1alpha1.StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriority[];
        }

        /**
         * UpdatePriorityOrderTerm defines order priority.
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyOrderPriority {
            /**
             * Calculate priority by value of this key. Values of this key, will be sorted by GetInt(val). GetInt method will find the last int in value, such as getting 5 in value '5', getting 10 in value 'sts-10'.
             */
            orderedKey: string;
        }

        /**
         * UpdatePriorityWeightTerm defines weight priority.
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriority {
            /**
             * MatchSelector is used to select by pod's labels.
             */
            matchSelector: outputs.apps.v1alpha1.StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelector;
            /**
             * Weight associated with matching the corresponding matchExpressions, in the range 1-100.
             */
            weight: number;
        }

        /**
         * MatchSelector is used to select by pod's labels.
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * StatefulSetStatus defines the observed state of StatefulSet
         */
        export interface StatefulSetStatus {
            /**
             * AvailableReplicas is the number of Pods created by the StatefulSet controller that have been ready for minReadySeconds.
             */
            availableReplicas: number;
            /**
             * collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
             */
            collisionCount?: number;
            /**
             * Represents the latest available observations of a statefulset's current state.
             */
            conditions?: outputs.apps.v1alpha1.StatefulSetStatusConditions[];
            /**
             * currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
             */
            currentReplicas: number;
            /**
             * currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
             */
            currentRevision?: string;
            /**
             * LabelSelector is label selectors for query over pods that should match the replica count used by HPA.
             */
            labelSelector?: string;
            /**
             * observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
             */
            observedGeneration?: number;
            /**
             * readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
             */
            readyReplicas: number;
            /**
             * replicas is the number of Pods created by the StatefulSet controller.
             */
            replicas: number;
            /**
             * updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
             */
            updateRevision?: string;
            /**
             * updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
             */
            updatedReplicas: number;
        }

        /**
         * StatefulSetCondition describes the state of a statefulset at a certain point.
         */
        export interface StatefulSetStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: string;
            /**
             * The reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of statefulset condition.
             */
            type: string;
        }

        /**
         * UnitedDeploymentSpec defines the desired state of UnitedDeployment.
         */
        export interface UnitedDeploymentSpec {
            /**
             * Replicas is the total desired replicas of all the subsets. If unspecified, defaults to 1.
             */
            replicas?: number;
            /**
             * Indicates the number of histories to be conserved. If unspecified, defaults to 10.
             */
            revisionHistoryLimit?: number;
            /**
             * Selector is a label query over pods that should match the replica count. It must match the pod template's labels.
             */
            selector: outputs.apps.v1alpha1.UnitedDeploymentSpecSelector;
            /**
             * Template describes the subset that will be created.
             */
            template?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplate;
            /**
             * Topology describes the pods distribution detail between each of subsets.
             */
            topology?: outputs.apps.v1alpha1.UnitedDeploymentSpecTopology;
            /**
             * UpdateStrategy indicates the strategy the UnitedDeployment use to preform the update, when template is changed.
             */
            updateStrategy?: outputs.apps.v1alpha1.UnitedDeploymentSpecUpdateStrategy;
        }

        /**
         * Selector is a label query over pods that should match the replica count. It must match the pod template's labels.
         */
        export interface UnitedDeploymentSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.UnitedDeploymentSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface UnitedDeploymentSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Template describes the subset that will be created.
         */
        export interface UnitedDeploymentSpecTemplate {
            /**
             * AdvancedStatefulSet template
             */
            advancedStatefulSetTemplate?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplate;
            /**
             * CloneSet template
             */
            cloneSetTemplate?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplate;
            /**
             * Deployment template
             */
            deploymentTemplate?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateDeploymentTemplate;
            /**
             * StatefulSet template
             */
            statefulSetTemplate?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateStatefulSetTemplate;
        }

        /**
         * AdvancedStatefulSet template
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplate {
            metadata?: {[key: string]: any};
            /**
             * StatefulSetSpec defines the desired state of StatefulSet
             */
            spec: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpec;
        }

        /**
         * StatefulSetSpec defines the desired state of StatefulSet
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpec {
            /**
             * Lifecycle defines the lifecycle hooks for Pods pre-delete, in-place update.
             */
            lifecycle?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecLifecycle;
            /**
             * PersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is alpha.
             */
            persistentVolumeClaimRetentionPolicy?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecPersistentVolumeClaimRetentionPolicy;
            /**
             * podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
             */
            podManagementPolicy?: string;
            /**
             * replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1. TODO: Consider a rename of this field.
             */
            replicas?: number;
            /**
             * reserveOrdinals controls the ordinal numbers that should be reserved, and the replicas will always be the expectation number of running Pods. For a sts with replicas=3 and its Pods in [0, 1, 2]: - If you want to migrate Pod-1 and reserve this ordinal, just set spec.reserveOrdinal to [1]. Then controller will delete Pod-1 and create Pod-3 (existing Pods will be [0, 2, 3]) - If you just want to delete Pod-1, you should set spec.reserveOrdinal to [1] and spec.replicas to 2. Then controller will delete Pod-1 (existing Pods will be [0, 2])
             */
            reserveOrdinals?: number[];
            /**
             * revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
             */
            revisionHistoryLimit?: number;
            /**
             * scaleStrategy indicates the StatefulSetScaleStrategy that will be employed to scale Pods in the StatefulSet.
             */
            scaleStrategy?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecScaleStrategy;
            /**
             * selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
             */
            selector: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecSelector;
            /**
             * serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
             */
            serviceName?: string;
            /**
             * template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
             */
            template: {[key: string]: any};
            /**
             * updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
             */
            updateStrategy?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategy;
            /**
             * volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name. TODO: Define the behavior if a claim already exists with the same name.
             */
            volumeClaimTemplates?: {[key: string]: any};
        }

        /**
         * Lifecycle defines the lifecycle hooks for Pods pre-delete, in-place update.
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecLifecycle {
            /**
             * InPlaceUpdate is the hook before Pod to update and after Pod has been updated.
             */
            inPlaceUpdate?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecLifecycleInPlaceUpdate;
            /**
             * PreDelete is the hook before Pod to be deleted.
             */
            preDelete?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecLifecyclePreDelete;
            /**
             * PreNormal is the hook after Pod to be created and ready to be Normal.
             */
            preNormal?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecLifecyclePreNormal;
        }

        /**
         * InPlaceUpdate is the hook before Pod to update and after Pod has been updated.
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecLifecycleInPlaceUpdate {
            finalizersHandler?: string[];
            labelsHandler?: {[key: string]: string};
            /**
             * MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate & PreDelete hook. Default to false.
             */
            markPodNotReady?: boolean;
        }

        /**
         * PreDelete is the hook before Pod to be deleted.
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecLifecyclePreDelete {
            finalizersHandler?: string[];
            labelsHandler?: {[key: string]: string};
            /**
             * MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate & PreDelete hook. Default to false.
             */
            markPodNotReady?: boolean;
        }

        /**
         * PreNormal is the hook after Pod to be created and ready to be Normal.
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecLifecyclePreNormal {
            finalizersHandler?: string[];
            labelsHandler?: {[key: string]: string};
            /**
             * MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate & PreDelete hook. Default to false.
             */
            markPodNotReady?: boolean;
        }

        /**
         * PersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is alpha.
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecPersistentVolumeClaimRetentionPolicy {
            /**
             * WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.
             */
            whenDeleted?: string;
            /**
             * WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.
             */
            whenScaled?: string;
        }

        /**
         * scaleStrategy indicates the StatefulSetScaleStrategy that will be employed to scale Pods in the StatefulSet.
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecScaleStrategy {
            /**
             * The maximum number of pods that can be unavailable during scaling. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. It can just be allowed to work with Parallel podManagementPolicy.
             */
            maxUnavailable?: number | string;
        }

        /**
         * selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategy {
            /**
             * RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
             */
            rollingUpdate?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdate;
            /**
             * Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
             */
            type?: string;
        }

        /**
         * RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdate {
            /**
             * InPlaceUpdateStrategy contains strategies for in-place update.
             */
            inPlaceUpdateStrategy?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdateInPlaceUpdateStrategy;
            /**
             * The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. Also, maxUnavailable can just be allowed to work with Parallel podManagementPolicy. Defaults to 1.
             */
            maxUnavailable?: number | string;
            /**
             * MinReadySeconds indicates how long will the pod be considered ready after it's updated. MinReadySeconds works with both OrderedReady and Parallel podManagementPolicy. It affects the pod scale up speed when the podManagementPolicy is set to be OrderedReady. Combined with MaxUnavailable, it affects the pod update speed regardless of podManagementPolicy. Default value is 0, max is 300.
             */
            minReadySeconds?: number;
            /**
             * Partition indicates the ordinal at which the StatefulSet should be partitioned by default. But if unorderedUpdate has been set: - Partition indicates the number of pods with non-updated revisions when rolling update. - It means controller will update $(replicas - partition) number of pod. Default value is 0.
             */
            partition?: number;
            /**
             * Paused indicates that the StatefulSet is paused. Default value is false
             */
            paused?: boolean;
            /**
             * PodUpdatePolicy indicates how pods should be updated Default value is "ReCreate"
             */
            podUpdatePolicy?: string;
            /**
             * UnorderedUpdate contains strategies for non-ordered update. If it is not nil, pods will be updated with non-ordered sequence. Noted that UnorderedUpdate can only be allowed to work with Parallel podManagementPolicy
             */
            unorderedUpdate?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdateUnorderedUpdate;
        }

        /**
         * InPlaceUpdateStrategy contains strategies for in-place update.
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdateInPlaceUpdateStrategy {
            /**
             * GracePeriodSeconds is the timespan between set Pod status to not-ready and update images in Pod spec when in-place update a Pod.
             */
            gracePeriodSeconds?: number;
        }

        /**
         * UnorderedUpdate contains strategies for non-ordered update. If it is not nil, pods will be updated with non-ordered sequence. Noted that UnorderedUpdate can only be allowed to work with Parallel podManagementPolicy
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdateUnorderedUpdate {
            /**
             * Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.
             */
            priorityStrategy?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategy;
        }

        /**
         * Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategy {
            /**
             * Order priority terms, pods will be sorted by the value of orderedKey. For example: ``` orderPriority: - orderedKey: key1 - orderedKey: key2 ``` First, all pods which have key1 in labels will be sorted by the value of key1. Then, the left pods which have no key1 but have key2 in labels will be sorted by the value of key2 and put behind those pods have key1.
             */
            orderPriority?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyOrderPriority[];
            /**
             * Weight priority terms, pods will be sorted by the sum of all terms weight.
             */
            weightPriority?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriority[];
        }

        /**
         * UpdatePriorityOrderTerm defines order priority.
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyOrderPriority {
            /**
             * Calculate priority by value of this key. Values of this key, will be sorted by GetInt(val). GetInt method will find the last int in value, such as getting 5 in value '5', getting 10 in value 'sts-10'.
             */
            orderedKey: string;
        }

        /**
         * UpdatePriorityWeightTerm defines weight priority.
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriority {
            /**
             * MatchSelector is used to select by pod's labels.
             */
            matchSelector: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelector;
            /**
             * Weight associated with matching the corresponding matchExpressions, in the range 1-100.
             */
            weight: number;
        }

        /**
         * MatchSelector is used to select by pod's labels.
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface UnitedDeploymentSpecTemplateAdvancedStatefulSetTemplateSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * CloneSet template
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplate {
            metadata?: {[key: string]: any};
            /**
             * CloneSetSpec defines the desired state of CloneSet
             */
            spec: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpec;
        }

        /**
         * CloneSetSpec defines the desired state of CloneSet
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpec {
            /**
             * Lifecycle defines the lifecycle hooks for Pods pre-available(pre-normal), pre-delete, in-place update.
             */
            lifecycle?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpecLifecycle;
            /**
             * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
             */
            minReadySeconds?: number;
            /**
             * Replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template. If unspecified, defaults to 1.
             */
            replicas?: number;
            /**
             * RevisionHistoryLimit is the maximum number of revisions that will be maintained in the CloneSet's revision history. The revision history consists of all revisions not represented by a currently applied CloneSetSpec version. The default value is 10.
             */
            revisionHistoryLimit?: number;
            /**
             * ScaleStrategy indicates the ScaleStrategy that will be employed to create and delete Pods in the CloneSet.
             */
            scaleStrategy?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpecScaleStrategy;
            /**
             * Selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
             */
            selector: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpecSelector;
            /**
             * Template describes the pods that will be created.
             */
            template: {[key: string]: any};
            /**
             * UpdateStrategy indicates the UpdateStrategy that will be employed to update Pods in the CloneSet when a revision is made to Template.
             */
            updateStrategy?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategy;
            /**
             * VolumeClaimTemplates is a list of claims that pods are allowed to reference. Note that PVC will be deleted when its pod has been deleted.
             */
            volumeClaimTemplates?: {[key: string]: any};
        }

        /**
         * Lifecycle defines the lifecycle hooks for Pods pre-available(pre-normal), pre-delete, in-place update.
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpecLifecycle {
            /**
             * InPlaceUpdate is the hook before Pod to update and after Pod has been updated.
             */
            inPlaceUpdate?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpecLifecycleInPlaceUpdate;
            /**
             * PreDelete is the hook before Pod to be deleted.
             */
            preDelete?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpecLifecyclePreDelete;
            /**
             * PreNormal is the hook after Pod to be created and ready to be Normal.
             */
            preNormal?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpecLifecyclePreNormal;
        }

        /**
         * InPlaceUpdate is the hook before Pod to update and after Pod has been updated.
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpecLifecycleInPlaceUpdate {
            finalizersHandler?: string[];
            labelsHandler?: {[key: string]: string};
            /**
             * MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate & PreDelete hook. Default to false.
             */
            markPodNotReady?: boolean;
        }

        /**
         * PreDelete is the hook before Pod to be deleted.
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpecLifecyclePreDelete {
            finalizersHandler?: string[];
            labelsHandler?: {[key: string]: string};
            /**
             * MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate & PreDelete hook. Default to false.
             */
            markPodNotReady?: boolean;
        }

        /**
         * PreNormal is the hook after Pod to be created and ready to be Normal.
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpecLifecyclePreNormal {
            finalizersHandler?: string[];
            labelsHandler?: {[key: string]: string};
            /**
             * MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate & PreDelete hook. Default to false.
             */
            markPodNotReady?: boolean;
        }

        /**
         * ScaleStrategy indicates the ScaleStrategy that will be employed to create and delete Pods in the CloneSet.
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpecScaleStrategy {
            /**
             * Indicate if cloneSet will reuse already existed pvc to rebuild a new pod
             */
            disablePVCReuse?: boolean;
            /**
             * The maximum number of pods that can be unavailable for scaled pods. This field can control the changes rate of replicas for CloneSet so as to minimize the impact for users' service. The scale will fail if the number of unavailable pods were greater than this MaxUnavailable at scaling up. MaxUnavailable works only when scaling up.
             */
            maxUnavailable?: number | string;
            /**
             * PodsToDelete is the names of Pod should be deleted. Note that this list will be truncated for non-existing pod names.
             */
            podsToDelete?: string[];
        }

        /**
         * Selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * UpdateStrategy indicates the UpdateStrategy that will be employed to update Pods in the CloneSet when a revision is made to Template.
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategy {
            /**
             * InPlaceUpdateStrategy contains strategies for in-place update.
             */
            inPlaceUpdateStrategy?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategyInPlaceUpdateStrategy;
            /**
             * The maximum number of pods that can be scheduled above the desired replicas during update or specified delete. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. Defaults to 0.
             */
            maxSurge?: number | string;
            /**
             * The maximum number of pods that can be unavailable during update or scale. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up by default. When maxSurge > 0, absolute number is calculated from percentage by rounding down. Defaults to 20%.
             */
            maxUnavailable?: number | string;
            /**
             * Partition is the desired number of pods in old revisions. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up by default. It means when partition is set during pods updating, (replicas - partition value) number of pods will be updated. Default value is 0.
             */
            partition?: number | string;
            /**
             * Paused indicates that the CloneSet is paused. Default value is false
             */
            paused?: boolean;
            /**
             * Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.
             */
            priorityStrategy?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategyPriorityStrategy;
            /**
             * ScatterStrategy defines the scatter rules to make pods been scattered when update. This will avoid pods with the same key-value to be updated in one batch. - Note that pods will be scattered after priority sort. So, although priority strategy and scatter strategy can be applied together, we suggest to use either one of them. - If scatterStrategy is used, we suggest to just use one term. Otherwise, the update order can be hard to understand.
             */
            scatterStrategy?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategyScatterStrategy[];
            /**
             * Type indicates the type of the CloneSetUpdateStrategy. Default is ReCreate.
             */
            type?: string;
        }

        /**
         * InPlaceUpdateStrategy contains strategies for in-place update.
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategyInPlaceUpdateStrategy {
            /**
             * GracePeriodSeconds is the timespan between set Pod status to not-ready and update images in Pod spec when in-place update a Pod.
             */
            gracePeriodSeconds?: number;
        }

        /**
         * Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategyPriorityStrategy {
            /**
             * Order priority terms, pods will be sorted by the value of orderedKey. For example: ``` orderPriority: - orderedKey: key1 - orderedKey: key2 ``` First, all pods which have key1 in labels will be sorted by the value of key1. Then, the left pods which have no key1 but have key2 in labels will be sorted by the value of key2 and put behind those pods have key1.
             */
            orderPriority?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategyPriorityStrategyOrderPriority[];
            /**
             * Weight priority terms, pods will be sorted by the sum of all terms weight.
             */
            weightPriority?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategyPriorityStrategyWeightPriority[];
        }

        /**
         * UpdatePriorityOrderTerm defines order priority.
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategyPriorityStrategyOrderPriority {
            /**
             * Calculate priority by value of this key. Values of this key, will be sorted by GetInt(val). GetInt method will find the last int in value, such as getting 5 in value '5', getting 10 in value 'sts-10'.
             */
            orderedKey: string;
        }

        /**
         * UpdatePriorityWeightTerm defines weight priority.
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategyPriorityStrategyWeightPriority {
            /**
             * MatchSelector is used to select by pod's labels.
             */
            matchSelector: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategyPriorityStrategyWeightPriorityMatchSelector;
            /**
             * Weight associated with matching the corresponding matchExpressions, in the range 1-100.
             */
            weight: number;
        }

        /**
         * MatchSelector is used to select by pod's labels.
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategyPriorityStrategyWeightPriorityMatchSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1alpha1.UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategyPriorityStrategyWeightPriorityMatchSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategyPriorityStrategyWeightPriorityMatchSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        export interface UnitedDeploymentSpecTemplateCloneSetTemplateSpecUpdateStrategyScatterStrategy {
            key: string;
            value: string;
        }

        /**
         * Deployment template
         */
        export interface UnitedDeploymentSpecTemplateDeploymentTemplate {
            metadata?: {[key: string]: any};
            spec: {[key: string]: any};
        }

        /**
         * StatefulSet template
         */
        export interface UnitedDeploymentSpecTemplateStatefulSetTemplate {
            metadata?: {[key: string]: any};
            spec: {[key: string]: any};
        }

        /**
         * Topology describes the pods distribution detail between each of subsets.
         */
        export interface UnitedDeploymentSpecTopology {
            /**
             * Contains the details of each subset. Each element in this array represents one subset which will be provisioned and managed by UnitedDeployment.
             */
            subsets?: outputs.apps.v1alpha1.UnitedDeploymentSpecTopologySubsets[];
        }

        /**
         * Subset defines the detail of a subset.
         */
        export interface UnitedDeploymentSpecTopologySubsets {
            /**
             * Indicates the upper bounded replicas of the subset. MaxReplicas must be more than or equal to MinReplicas. MaxReplicas == nil means no limitation. Please ensure that at least one subset has empty MaxReplicas(no limitation) to avoid stuck scaling. Defaults to nil.
             */
            maxReplicas?: number | string;
            /**
             * Indicates the lower bounded replicas of the subset. MinReplicas must be more than or equal to 0 if it is set. Controller will prioritize satisfy minReplicas for each subset according to the order of Topology.Subsets. Defaults to 0.
             */
            minReplicas?: number | string;
            /**
             * Indicates subset name as a DNS_LABEL, which will be used to generate subset workload name prefix in the format '<deployment-name>-<subset-name>-'. Name should be unique between all of the subsets under one UnitedDeployment.
             */
            name: string;
            /**
             * Indicates the node selector to form the subset. Depending on the node selector, pods provisioned could be distributed across multiple groups of nodes. A subset's nodeSelectorTerm is not allowed to be updated.
             */
            nodeSelectorTerm?: outputs.apps.v1alpha1.UnitedDeploymentSpecTopologySubsetsNodeSelectorTerm;
            /**
             * Patch indicates patching to the templateSpec. Patch takes precedence over other fields If the Patch also modifies the Replicas, NodeSelectorTerm or Tolerations, use value in the Patch
             */
            patch?: {[key: string]: any};
            /**
             * Indicates the number of the pod to be created under this subset. Replicas could also be percentage like '10%', which means 10% of UnitedDeployment replicas of pods will be distributed under this subset. If nil, the number of replicas in this subset is determined by controller. Controller will try to keep all the subsets with nil replicas have average pods. Replicas and MinReplicas/MaxReplicas are mutually exclusive in a UnitedDeployment.
             */
            replicas?: number | string;
            /**
             * Indicates the tolerations the pods under this subset have. A subset's tolerations is not allowed to be updated.
             */
            tolerations?: outputs.apps.v1alpha1.UnitedDeploymentSpecTopologySubsetsTolerations[];
        }

        /**
         * Indicates the node selector to form the subset. Depending on the node selector, pods provisioned could be distributed across multiple groups of nodes. A subset's nodeSelectorTerm is not allowed to be updated.
         */
        export interface UnitedDeploymentSpecTopologySubsetsNodeSelectorTerm {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.apps.v1alpha1.UnitedDeploymentSpecTopologySubsetsNodeSelectorTermMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.apps.v1alpha1.UnitedDeploymentSpecTopologySubsetsNodeSelectorTermMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface UnitedDeploymentSpecTopologySubsetsNodeSelectorTermMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface UnitedDeploymentSpecTopologySubsetsNodeSelectorTermMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface UnitedDeploymentSpecTopologySubsetsTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * UpdateStrategy indicates the strategy the UnitedDeployment use to preform the update, when template is changed.
         */
        export interface UnitedDeploymentSpecUpdateStrategy {
            /**
             * Includes all of the parameters a Manual update strategy needs.
             */
            manualUpdate?: outputs.apps.v1alpha1.UnitedDeploymentSpecUpdateStrategyManualUpdate;
            /**
             * Type of UnitedDeployment update strategy. Default is Manual.
             */
            type?: string;
        }

        /**
         * Includes all of the parameters a Manual update strategy needs.
         */
        export interface UnitedDeploymentSpecUpdateStrategyManualUpdate {
            /**
             * Indicates number of subset partition.
             */
            partitions?: {[key: string]: number};
        }

        /**
         * UnitedDeploymentStatus defines the observed state of UnitedDeployment.
         */
        export interface UnitedDeploymentStatus {
            /**
             * Count of hash collisions for the UnitedDeployment. The UnitedDeployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
             */
            collisionCount?: number;
            /**
             * Represents the latest available observations of a UnitedDeployment's current state.
             */
            conditions?: outputs.apps.v1alpha1.UnitedDeploymentStatusConditions[];
            /**
             * CurrentRevision, if not empty, indicates the current version of the UnitedDeployment.
             */
            currentRevision: string;
            /**
             * LabelSelector is label selectors for query over pods that should match the replica count used by HPA.
             */
            labelSelector?: string;
            /**
             * ObservedGeneration is the most recent generation observed for this UnitedDeployment. It corresponds to the UnitedDeployment's generation, which is updated on mutation by the API Server.
             */
            observedGeneration?: number;
            /**
             * The number of ready replicas.
             */
            readyReplicas?: number;
            /**
             * Replicas is the most recently observed number of replicas.
             */
            replicas: number;
            /**
             * Records the topology detail information of the replicas of each subset.
             */
            subsetReplicas?: {[key: string]: number};
            /**
             * Records the information of update progress.
             */
            updateStatus?: outputs.apps.v1alpha1.UnitedDeploymentStatusUpdateStatus;
            /**
             * The number of ready current revision replicas for this UnitedDeployment.
             */
            updatedReadyReplicas?: number;
            /**
             * The number of pods in current version.
             */
            updatedReplicas: number;
        }

        /**
         * UnitedDeploymentCondition describes current state of a UnitedDeployment.
         */
        export interface UnitedDeploymentStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: string;
            /**
             * The reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status?: string;
            /**
             * Type of in place set condition.
             */
            type?: string;
        }

        /**
         * Records the information of update progress.
         */
        export interface UnitedDeploymentStatusUpdateStatus {
            /**
             * Records the current partition.
             */
            currentPartitions?: {[key: string]: number};
            /**
             * Records the latest revision.
             */
            updatedRevision?: string;
        }

        /**
         * WorkloadSpreadSpec defines the desired state of WorkloadSpread.
         */
        export interface WorkloadSpreadSpec {
            /**
             * ScheduleStrategy indicates the strategy the WorkloadSpread used to preform the schedule between each of subsets.
             */
            scheduleStrategy?: outputs.apps.v1alpha1.WorkloadSpreadSpecScheduleStrategy;
            /**
             * Subsets describes the pods distribution details between each of subsets.
             */
            subsets: outputs.apps.v1alpha1.WorkloadSpreadSpecSubsets[];
            /**
             * TargetReference is the target workload that WorkloadSpread want to control.
             */
            targetRef: outputs.apps.v1alpha1.WorkloadSpreadSpecTargetRef;
        }

        /**
         * ScheduleStrategy indicates the strategy the WorkloadSpread used to preform the schedule between each of subsets.
         */
        export interface WorkloadSpreadSpecScheduleStrategy {
            /**
             * Adaptive is used to communicate parameters when Type is AdaptiveWorkloadSpreadScheduleStrategyType.
             */
            adaptive?: outputs.apps.v1alpha1.WorkloadSpreadSpecScheduleStrategyAdaptive;
            /**
             * Type indicates the type of the WorkloadSpreadScheduleStrategy. Default is Fixed
             */
            type?: string;
        }

        /**
         * Adaptive is used to communicate parameters when Type is AdaptiveWorkloadSpreadScheduleStrategyType.
         */
        export interface WorkloadSpreadSpecScheduleStrategyAdaptive {
            /**
             * DisableSimulationSchedule indicates whether to disable the feature of simulation schedule. Default is false. Webhook can take a simple general predicates to check whether Pod can be scheduled into this subset, but it just considers the Node resource and cannot replace scheduler to do richer predicates practically.
             */
            disableSimulationSchedule?: boolean;
            /**
             * RescheduleCriticalSeconds indicates how long controller will reschedule a schedule failed Pod to the subset that has redundant capacity after the subset where the Pod lives. If a Pod was scheduled failed and still in a unschedulabe status over RescheduleCriticalSeconds duration, the controller will reschedule it to a suitable subset.
             */
            rescheduleCriticalSeconds?: number;
        }

        /**
         * WorkloadSpreadSubset defines the details of a subset.
         */
        export interface WorkloadSpreadSpecSubsets {
            /**
             * MaxReplicas indicates the desired max replicas of this subset.
             */
            maxReplicas?: number | string;
            /**
             * Name should be unique between all of the subsets under one WorkloadSpread.
             */
            name: string;
            /**
             * Patch indicates patching podTemplate to the Pod.
             */
            patch?: {[key: string]: any};
            /**
             * Indicates the node preferred selector to form the subset.
             */
            preferredNodeSelectorTerms?: outputs.apps.v1alpha1.WorkloadSpreadSpecSubsetsPreferredNodeSelectorTerms[];
            /**
             * Indicates the node required selector to form the subset.
             */
            requiredNodeSelectorTerm?: outputs.apps.v1alpha1.WorkloadSpreadSpecSubsetsRequiredNodeSelectorTerm;
            /**
             * Indicates the tolerations the pods under this subset have.
             */
            tolerations?: outputs.apps.v1alpha1.WorkloadSpreadSpecSubsetsTolerations[];
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface WorkloadSpreadSpecSubsetsPreferredNodeSelectorTerms {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.apps.v1alpha1.WorkloadSpreadSpecSubsetsPreferredNodeSelectorTermsPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface WorkloadSpreadSpecSubsetsPreferredNodeSelectorTermsPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.apps.v1alpha1.WorkloadSpreadSpecSubsetsPreferredNodeSelectorTermsPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.apps.v1alpha1.WorkloadSpreadSpecSubsetsPreferredNodeSelectorTermsPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface WorkloadSpreadSpecSubsetsPreferredNodeSelectorTermsPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface WorkloadSpreadSpecSubsetsPreferredNodeSelectorTermsPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Indicates the node required selector to form the subset.
         */
        export interface WorkloadSpreadSpecSubsetsRequiredNodeSelectorTerm {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.apps.v1alpha1.WorkloadSpreadSpecSubsetsRequiredNodeSelectorTermMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.apps.v1alpha1.WorkloadSpreadSpecSubsetsRequiredNodeSelectorTermMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface WorkloadSpreadSpecSubsetsRequiredNodeSelectorTermMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface WorkloadSpreadSpecSubsetsRequiredNodeSelectorTermMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface WorkloadSpreadSpecSubsetsTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * TargetReference is the target workload that WorkloadSpread want to control.
         */
        export interface WorkloadSpreadSpecTargetRef {
            /**
             * API version of the referent.
             */
            apiVersion: string;
            /**
             * Kind of the referent.
             */
            kind: string;
            /**
             * Name of the referent.
             */
            name: string;
        }

        /**
         * WorkloadSpreadStatus defines the observed state of WorkloadSpread.
         */
        export interface WorkloadSpreadStatus {
            /**
             * ObservedGeneration is the most recent generation observed for this WorkloadSpread. It corresponds to the WorkloadSpread's generation, which is updated on mutation by the API Server.
             */
            observedGeneration?: number;
            /**
             * Contains the status of each subset. Each element in this array represents one subset
             */
            subsetStatuses?: outputs.apps.v1alpha1.WorkloadSpreadStatusSubsetStatuses[];
            /**
             * VersionedSubsetStatuses is to solve rolling-update problems, where the creation of new-version pod may be earlier than deletion of old-version pod. We have to calculate the pod subset distribution for each version.
             */
            versionedSubsetStatuses?: {[key: string]: outputs.apps.v1alpha1.WorkloadSpreadStatusVersionedSubsetStatuses[]};
        }

        /**
         * WorkloadSpreadSubsetStatus defines the observed state of subset
         */
        export interface WorkloadSpreadStatusSubsetStatuses {
            /**
             * Conditions is an array of current observed subset conditions.
             */
            conditions?: outputs.apps.v1alpha1.WorkloadSpreadStatusSubsetStatusesConditions[];
            /**
             * CreatingPods contains information about pods whose creation was processed by the webhook handler but not yet been observed by the WorkloadSpread controller. A pod will be in this map from the time when the webhook handler processed the creation request to the time when the pod is seen by controller. The key in the map is the name of the pod and the value is the time when the webhook handler process the creation request. If the real creation didn't happen and a pod is still in this map, it will be removed from the list automatically by WorkloadSpread controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod creations.
             */
            creatingPods?: {[key: string]: string};
            /**
             * DeletingPods is similar with CreatingPods and it contains information about pod deletion.
             */
            deletingPods?: {[key: string]: string};
            /**
             * MissingReplicas is the number of active replicas belong to this subset not be found. MissingReplicas > 0 indicates the subset is still missing MissingReplicas pods to create MissingReplicas = 0 indicates the subset already has enough pods, there is no need to create MissingReplicas = -1 indicates the subset's MaxReplicas not set, then there is no limit for pods number
             */
            missingReplicas: number;
            /**
             * Name should be unique between all of the subsets under one WorkloadSpread.
             */
            name: string;
            /**
             * Replicas is the most recently observed number of active replicas for subset.
             */
            replicas: number;
        }

        export interface WorkloadSpreadStatusSubsetStatusesConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: string;
            /**
             * The reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of in place set condition.
             */
            type: string;
        }

        /**
         * WorkloadSpreadSubsetStatus defines the observed state of subset
         */
        export interface WorkloadSpreadStatusVersionedSubsetStatuses {
            /**
             * Conditions is an array of current observed subset conditions.
             */
            conditions?: outputs.apps.v1alpha1.WorkloadSpreadStatusVersionedSubsetStatusesConditions[];
            /**
             * CreatingPods contains information about pods whose creation was processed by the webhook handler but not yet been observed by the WorkloadSpread controller. A pod will be in this map from the time when the webhook handler processed the creation request to the time when the pod is seen by controller. The key in the map is the name of the pod and the value is the time when the webhook handler process the creation request. If the real creation didn't happen and a pod is still in this map, it will be removed from the list automatically by WorkloadSpread controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod creations.
             */
            creatingPods?: {[key: string]: string};
            /**
             * DeletingPods is similar with CreatingPods and it contains information about pod deletion.
             */
            deletingPods?: {[key: string]: string};
            /**
             * MissingReplicas is the number of active replicas belong to this subset not be found. MissingReplicas > 0 indicates the subset is still missing MissingReplicas pods to create MissingReplicas = 0 indicates the subset already has enough pods, there is no need to create MissingReplicas = -1 indicates the subset's MaxReplicas not set, then there is no limit for pods number
             */
            missingReplicas: number;
            /**
             * Name should be unique between all of the subsets under one WorkloadSpread.
             */
            name: string;
            /**
             * Replicas is the most recently observed number of active replicas for subset.
             */
            replicas: number;
        }

        export interface WorkloadSpreadStatusVersionedSubsetStatusesConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: string;
            /**
             * The reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of in place set condition.
             */
            type: string;
        }

    }

    export namespace v1beta1 {
        /**
         * StatefulSetSpec defines the desired state of StatefulSet
         */
        export interface StatefulSetSpec {
            /**
             * Lifecycle defines the lifecycle hooks for Pods pre-delete, in-place update.
             */
            lifecycle?: outputs.apps.v1beta1.StatefulSetSpecLifecycle;
            /**
             * PersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is alpha.
             */
            persistentVolumeClaimRetentionPolicy?: outputs.apps.v1beta1.StatefulSetSpecPersistentVolumeClaimRetentionPolicy;
            /**
             * podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
             */
            podManagementPolicy?: string;
            /**
             * replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1. TODO: Consider a rename of this field.
             */
            replicas?: number;
            /**
             * reserveOrdinals controls the ordinal numbers that should be reserved, and the replicas will always be the expectation number of running Pods. For a sts with replicas=3 and its Pods in [0, 1, 2]: - If you want to migrate Pod-1 and reserve this ordinal, just set spec.reserveOrdinal to [1]. Then controller will delete Pod-1 and create Pod-3 (existing Pods will be [0, 2, 3]) - If you just want to delete Pod-1, you should set spec.reserveOrdinal to [1] and spec.replicas to 2. Then controller will delete Pod-1 (existing Pods will be [0, 2])
             */
            reserveOrdinals?: number[];
            /**
             * revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
             */
            revisionHistoryLimit?: number;
            /**
             * scaleStrategy indicates the StatefulSetScaleStrategy that will be employed to scale Pods in the StatefulSet.
             */
            scaleStrategy?: outputs.apps.v1beta1.StatefulSetSpecScaleStrategy;
            /**
             * selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
             */
            selector: outputs.apps.v1beta1.StatefulSetSpecSelector;
            /**
             * serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
             */
            serviceName?: string;
            /**
             * template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
             */
            template: {[key: string]: any};
            /**
             * updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
             */
            updateStrategy?: outputs.apps.v1beta1.StatefulSetSpecUpdateStrategy;
            /**
             * volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name. TODO: Define the behavior if a claim already exists with the same name.
             */
            volumeClaimTemplates?: {[key: string]: any};
        }

        /**
         * Lifecycle defines the lifecycle hooks for Pods pre-delete, in-place update.
         */
        export interface StatefulSetSpecLifecycle {
            /**
             * InPlaceUpdate is the hook before Pod to update and after Pod has been updated.
             */
            inPlaceUpdate?: outputs.apps.v1beta1.StatefulSetSpecLifecycleInPlaceUpdate;
            /**
             * PreDelete is the hook before Pod to be deleted.
             */
            preDelete?: outputs.apps.v1beta1.StatefulSetSpecLifecyclePreDelete;
            /**
             * PreNormal is the hook after Pod to be created and ready to be Normal.
             */
            preNormal?: outputs.apps.v1beta1.StatefulSetSpecLifecyclePreNormal;
        }

        /**
         * InPlaceUpdate is the hook before Pod to update and after Pod has been updated.
         */
        export interface StatefulSetSpecLifecycleInPlaceUpdate {
            finalizersHandler?: string[];
            labelsHandler?: {[key: string]: string};
            /**
             * MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate & PreDelete hook. Default to false.
             */
            markPodNotReady?: boolean;
        }

        /**
         * PreDelete is the hook before Pod to be deleted.
         */
        export interface StatefulSetSpecLifecyclePreDelete {
            finalizersHandler?: string[];
            labelsHandler?: {[key: string]: string};
            /**
             * MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate & PreDelete hook. Default to false.
             */
            markPodNotReady?: boolean;
        }

        /**
         * PreNormal is the hook after Pod to be created and ready to be Normal.
         */
        export interface StatefulSetSpecLifecyclePreNormal {
            finalizersHandler?: string[];
            labelsHandler?: {[key: string]: string};
            /**
             * MarkPodNotReady = true means: - Pod will be set to 'NotReady' at preparingDelete/preparingUpdate state. - Pod will be restored to 'Ready' at Updated state if it was set to 'NotReady' at preparingUpdate state. Currently, MarkPodNotReady only takes effect on InPlaceUpdate & PreDelete hook. Default to false.
             */
            markPodNotReady?: boolean;
        }

        /**
         * PersistentVolumeClaimRetentionPolicy describes the policy used for PVCs created from the StatefulSet VolumeClaimTemplates. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is alpha.
         */
        export interface StatefulSetSpecPersistentVolumeClaimRetentionPolicy {
            /**
             * WhenDeleted specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is deleted. The default policy of `Retain` causes PVCs to not be affected by StatefulSet deletion. The `Delete` policy causes those PVCs to be deleted.
             */
            whenDeleted?: string;
            /**
             * WhenScaled specifies what happens to PVCs created from StatefulSet VolumeClaimTemplates when the StatefulSet is scaled down. The default policy of `Retain` causes PVCs to not be affected by a scaledown. The `Delete` policy causes the associated PVCs for any excess pods above the replica count to be deleted.
             */
            whenScaled?: string;
        }

        /**
         * scaleStrategy indicates the StatefulSetScaleStrategy that will be employed to scale Pods in the StatefulSet.
         */
        export interface StatefulSetSpecScaleStrategy {
            /**
             * The maximum number of pods that can be unavailable during scaling. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. It can just be allowed to work with Parallel podManagementPolicy.
             */
            maxUnavailable?: number | string;
        }

        /**
         * selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
         */
        export interface StatefulSetSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1beta1.StatefulSetSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface StatefulSetSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
         */
        export interface StatefulSetSpecUpdateStrategy {
            /**
             * RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
             */
            rollingUpdate?: outputs.apps.v1beta1.StatefulSetSpecUpdateStrategyRollingUpdate;
            /**
             * Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
             */
            type?: string;
        }

        /**
         * RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdate {
            /**
             * InPlaceUpdateStrategy contains strategies for in-place update.
             */
            inPlaceUpdateStrategy?: outputs.apps.v1beta1.StatefulSetSpecUpdateStrategyRollingUpdateInPlaceUpdateStrategy;
            /**
             * The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. Also, maxUnavailable can just be allowed to work with Parallel podManagementPolicy. Defaults to 1.
             */
            maxUnavailable?: number | string;
            /**
             * MinReadySeconds indicates how long will the pod be considered ready after it's updated. MinReadySeconds works with both OrderedReady and Parallel podManagementPolicy. It affects the pod scale up speed when the podManagementPolicy is set to be OrderedReady. Combined with MaxUnavailable, it affects the pod update speed regardless of podManagementPolicy. Default value is 0, max is 300.
             */
            minReadySeconds?: number;
            /**
             * Partition indicates the ordinal at which the StatefulSet should be partitioned by default. But if unorderedUpdate has been set: - Partition indicates the number of pods with non-updated revisions when rolling update. - It means controller will update $(replicas - partition) number of pod. Default value is 0.
             */
            partition?: number;
            /**
             * Paused indicates that the StatefulSet is paused. Default value is false
             */
            paused?: boolean;
            /**
             * PodUpdatePolicy indicates how pods should be updated Default value is "ReCreate"
             */
            podUpdatePolicy?: string;
            /**
             * UnorderedUpdate contains strategies for non-ordered update. If it is not nil, pods will be updated with non-ordered sequence. Noted that UnorderedUpdate can only be allowed to work with Parallel podManagementPolicy
             */
            unorderedUpdate?: outputs.apps.v1beta1.StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdate;
        }

        /**
         * InPlaceUpdateStrategy contains strategies for in-place update.
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdateInPlaceUpdateStrategy {
            /**
             * GracePeriodSeconds is the timespan between set Pod status to not-ready and update images in Pod spec when in-place update a Pod.
             */
            gracePeriodSeconds?: number;
        }

        /**
         * UnorderedUpdate contains strategies for non-ordered update. If it is not nil, pods will be updated with non-ordered sequence. Noted that UnorderedUpdate can only be allowed to work with Parallel podManagementPolicy
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdate {
            /**
             * Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.
             */
            priorityStrategy?: outputs.apps.v1beta1.StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategy;
        }

        /**
         * Priorities are the rules for calculating the priority of updating pods. Each pod to be updated, will pass through these terms and get a sum of weights.
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategy {
            /**
             * Order priority terms, pods will be sorted by the value of orderedKey. For example: ``` orderPriority: - orderedKey: key1 - orderedKey: key2 ``` First, all pods which have key1 in labels will be sorted by the value of key1. Then, the left pods which have no key1 but have key2 in labels will be sorted by the value of key2 and put behind those pods have key1.
             */
            orderPriority?: outputs.apps.v1beta1.StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyOrderPriority[];
            /**
             * Weight priority terms, pods will be sorted by the sum of all terms weight.
             */
            weightPriority?: outputs.apps.v1beta1.StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriority[];
        }

        /**
         * UpdatePriorityOrderTerm defines order priority.
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyOrderPriority {
            /**
             * Calculate priority by value of this key. Values of this key, will be sorted by GetInt(val). GetInt method will find the last int in value, such as getting 5 in value '5', getting 10 in value 'sts-10'.
             */
            orderedKey: string;
        }

        /**
         * UpdatePriorityWeightTerm defines weight priority.
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriority {
            /**
             * MatchSelector is used to select by pod's labels.
             */
            matchSelector: outputs.apps.v1beta1.StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelector;
            /**
             * Weight associated with matching the corresponding matchExpressions, in the range 1-100.
             */
            weight: number;
        }

        /**
         * MatchSelector is used to select by pod's labels.
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.apps.v1beta1.StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface StatefulSetSpecUpdateStrategyRollingUpdateUnorderedUpdatePriorityStrategyWeightPriorityMatchSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * StatefulSetStatus defines the observed state of StatefulSet
         */
        export interface StatefulSetStatus {
            /**
             * AvailableReplicas is the number of Pods created by the StatefulSet controller that have been ready for minReadySeconds.
             */
            availableReplicas: number;
            /**
             * collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
             */
            collisionCount?: number;
            /**
             * Represents the latest available observations of a statefulset's current state.
             */
            conditions?: outputs.apps.v1beta1.StatefulSetStatusConditions[];
            /**
             * currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
             */
            currentReplicas: number;
            /**
             * currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
             */
            currentRevision?: string;
            /**
             * LabelSelector is label selectors for query over pods that should match the replica count used by HPA.
             */
            labelSelector?: string;
            /**
             * observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
             */
            observedGeneration?: number;
            /**
             * readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
             */
            readyReplicas: number;
            /**
             * replicas is the number of Pods created by the StatefulSet controller.
             */
            replicas: number;
            /**
             * updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
             */
            updateRevision?: string;
            /**
             * updatedAvailableReplicas is the number of updated Pods created by the StatefulSet controller that have a Ready condition for atleast minReadySeconds.
             */
            updatedAvailableReplicas?: number;
            /**
             * updatedReadyReplicas is the number of updated Pods created by the StatefulSet controller that have a Ready Condition.
             */
            updatedReadyReplicas?: number;
            /**
             * updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
             */
            updatedReplicas: number;
        }

        /**
         * StatefulSetCondition describes the state of a statefulset at a certain point.
         */
        export interface StatefulSetStatusConditions {
            /**
             * Last time the condition transitioned from one status to another.
             */
            lastTransitionTime?: string;
            /**
             * A human readable message indicating details about the transition.
             */
            message?: string;
            /**
             * The reason for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of True, False, Unknown.
             */
            status: string;
            /**
             * Type of statefulset condition.
             */
            type: string;
        }

    }
}

export namespace policy {
    export namespace v1alpha1 {
        /**
         * PodUnavailableBudgetSpec defines the desired state of PodUnavailableBudget
         */
        export interface PodUnavailableBudgetSpec {
            /**
             * Delete pod, evict pod or update pod specification is allowed if at most "maxUnavailable" pods selected by "selector" or "targetRef"  are unavailable after the above operation for pod. MaxUnavailable and MinAvailable are mutually exclusive, MaxUnavailable is priority to take effect
             */
            maxUnavailable?: number | string;
            /**
             * Delete pod, evict pod or update pod specification is allowed if at least "minAvailable" pods selected by "selector" or "targetRef" will still be available after the above operation for pod.
             */
            minAvailable?: number | string;
            /**
             * Selector label query over pods managed by the budget
             */
            selector?: outputs.policy.v1alpha1.PodUnavailableBudgetSpecSelector;
            /**
             * TargetReference contains enough information to let you identify an workload for PodUnavailableBudget Selector and TargetReference are mutually exclusive, TargetReference is priority to take effect
             */
            targetRef?: outputs.policy.v1alpha1.PodUnavailableBudgetSpecTargetRef;
        }

        /**
         * Selector label query over pods managed by the budget
         */
        export interface PodUnavailableBudgetSpecSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.policy.v1alpha1.PodUnavailableBudgetSpecSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PodUnavailableBudgetSpecSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * TargetReference contains enough information to let you identify an workload for PodUnavailableBudget Selector and TargetReference are mutually exclusive, TargetReference is priority to take effect
         */
        export interface PodUnavailableBudgetSpecTargetRef {
            /**
             * API version of the referent.
             */
            apiVersion?: string;
            /**
             * Kind of the referent.
             */
            kind?: string;
            /**
             * Name of the referent.
             */
            name?: string;
        }

        /**
         * PodUnavailableBudgetStatus defines the observed state of PodUnavailableBudget
         */
        export interface PodUnavailableBudgetStatus {
            /**
             * CurrentAvailable current number of available pods
             */
            currentAvailable: number;
            /**
             * DesiredAvailable minimum desired number of available pods
             */
            desiredAvailable: number;
            /**
             * DisruptedPods contains information about pods whose eviction or deletion was processed by the API handler but has not yet been observed by the PodUnavailableBudget.
             */
            disruptedPods?: {[key: string]: string};
            /**
             * Most recent generation observed when updating this PUB status. UnavailableAllowed and other status information is valid only if observedGeneration equals to PUB's object generation.
             */
            observedGeneration?: number;
            /**
             * TotalReplicas total number of pods counted by this unavailable budget
             */
            totalReplicas: number;
            /**
             * UnavailableAllowed number of pod unavailable that are currently allowed
             */
            unavailableAllowed: number;
            /**
             * UnavailablePods contains information about pods whose specification changed(inplace-update pod), once pod is available(consistent and ready) again, it will be removed from the list.
             */
            unavailablePods?: {[key: string]: string};
        }

    }
}
