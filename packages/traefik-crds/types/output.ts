// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace traefik {
    export namespace v1alpha1 {
        /**
         * IngressRouteSpec defines the desired state of IngressRoute.
         */
        export interface IngressRouteSpec {
            /**
             * EntryPoints defines the list of entry point names to bind to.
             * Entry points have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/
             * Default: all.
             */
            entryPoints?: string[];
            /**
             * Routes defines the list of routes.
             */
            routes: outputs.traefik.v1alpha1.IngressRouteSpecRoutes[];
            /**
             * TLS defines the TLS configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls
             */
            tls?: outputs.traefik.v1alpha1.IngressRouteSpecTls;
        }

        /**
         * Route holds the HTTP route configuration.
         */
        export interface IngressRouteSpecRoutes {
            /**
             * Kind defines the kind of the route.
             * Rule is the only supported kind.
             */
            kind: string;
            /**
             * Match defines the router's rule.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rule
             */
            match: string;
            /**
             * Middlewares defines the list of references to Middleware resources.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-middleware
             */
            middlewares?: outputs.traefik.v1alpha1.IngressRouteSpecRoutesMiddlewares[];
            /**
             * Priority defines the router's priority.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#priority
             */
            priority?: number;
            /**
             * Services defines the list of Service.
             * It can contain any combination of TraefikService and/or reference to a Kubernetes Service.
             */
            services?: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServices[];
            /**
             * Syntax defines the router's rule syntax.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rulesyntax
             */
            syntax?: string;
        }

        /**
         * MiddlewareRef is a reference to a Middleware resource.
         */
        export interface IngressRouteSpecRoutesMiddlewares {
            /**
             * Name defines the name of the referenced Middleware resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Middleware resource.
             */
            namespace?: string;
        }

        /**
         * Service defines an upstream HTTP service to proxy traffic to.
         */
        export interface IngressRouteSpecRoutesServices {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader?: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port?: number | string;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesResponseForwarding;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: string;
            /**
             * Sticky defines the sticky sessions configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
             */
            sticky?: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesSticky;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy?: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: number;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface IngressRouteSpecRoutesServicesResponseForwarding {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval?: string;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
         */
        export interface IngressRouteSpecRoutesServicesSticky {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface IngressRouteSpecRoutesServicesStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: number;
            /**
             * Name defines the Cookie name.
             */
            name?: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: boolean;
        }

        /**
         * TLS defines the TLS configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls
         */
        export interface IngressRouteSpecTls {
            /**
             * CertResolver defines the name of the certificate resolver to use.
             * Cert resolvers have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/https/acme/#certificate-resolvers
             */
            certResolver?: string;
            /**
             * Domains defines the list of domains that will be used to issue certificates.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#domains
             */
            domains?: outputs.traefik.v1alpha1.IngressRouteSpecTlsDomains[];
            /**
             * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
             * If not defined, the `default` TLSOption is used.
             * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options
             */
            options?: outputs.traefik.v1alpha1.IngressRouteSpecTlsOptions;
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName?: string;
            /**
             * Store defines the reference to the TLSStore, that will be used to store certificates.
             * Please note that only `default` TLSStore can be used.
             */
            store?: outputs.traefik.v1alpha1.IngressRouteSpecTlsStore;
        }

        /**
         * Domain holds a domain name with SANs.
         */
        export interface IngressRouteSpecTlsDomains {
            /**
             * Main defines the main domain name.
             */
            main?: string;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans?: string[];
        }

        /**
         * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
         * If not defined, the `default` TLSOption is used.
         * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options
         */
        export interface IngressRouteSpecTlsOptions {
            /**
             * Name defines the name of the referenced TLSOption.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsoption
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced TLSOption.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsoption
             */
            namespace?: string;
        }

        /**
         * Store defines the reference to the TLSStore, that will be used to store certificates.
         * Please note that only `default` TLSStore can be used.
         */
        export interface IngressRouteSpecTlsStore {
            /**
             * Name defines the name of the referenced TLSStore.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsstore
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced TLSStore.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsstore
             */
            namespace?: string;
        }

        /**
         * IngressRouteTCPSpec defines the desired state of IngressRouteTCP.
         */
        export interface IngressRouteTCPSpec {
            /**
             * EntryPoints defines the list of entry point names to bind to.
             * Entry points have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/
             * Default: all.
             */
            entryPoints?: string[];
            /**
             * Routes defines the list of routes.
             */
            routes: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutes[];
            /**
             * TLS defines the TLS configuration on a layer 4 / TCP Route.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls_1
             */
            tls?: outputs.traefik.v1alpha1.IngressRouteTCPSpecTls;
        }

        /**
         * RouteTCP holds the TCP route configuration.
         */
        export interface IngressRouteTCPSpecRoutes {
            /**
             * Match defines the router's rule.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rule_1
             */
            match: string;
            /**
             * Middlewares defines the list of references to MiddlewareTCP resources.
             */
            middlewares?: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesMiddlewares[];
            /**
             * Priority defines the router's priority.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#priority_1
             */
            priority?: number;
            /**
             * Services defines the list of TCP services.
             */
            services?: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesServices[];
            /**
             * Syntax defines the router's rule syntax.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rulesyntax_1
             */
            syntax?: string;
        }

        /**
         * ObjectReference is a generic reference to a Traefik resource.
         */
        export interface IngressRouteTCPSpecRoutesMiddlewares {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace?: string;
        }

        /**
         * ServiceTCP defines an upstream TCP service to proxy traffic to.
         */
        export interface IngressRouteTCPSpecRoutesServices {
            /**
             * Name defines the name of the referenced Kubernetes Service.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service.
             */
            namespace?: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            /**
             * ProxyProtocol defines the PROXY protocol configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#proxy-protocol
             */
            proxyProtocol?: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesServicesProxyProtocol;
            /**
             * ServersTransport defines the name of ServersTransportTCP resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: string;
            /**
             * TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates
             * it has closed the writing capability of its connection, to close the reading capability as well,
             * hence fully terminating the connection.
             * It is a duration in milliseconds, defaulting to 100.
             * A negative value means an infinite deadline (i.e. the reading capability is never closed).
             * Deprecated: TerminationDelay is not supported APIVersion traefik.io/v1, please use ServersTransport to configure the TerminationDelay instead.
             */
            terminationDelay?: number;
            /**
             * TLS determines whether to use TLS when dialing with the backend.
             */
            tls?: boolean;
            /**
             * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
             */
            weight?: number;
        }

        /**
         * ProxyProtocol defines the PROXY protocol configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#proxy-protocol
         */
        export interface IngressRouteTCPSpecRoutesServicesProxyProtocol {
            /**
             * Version defines the PROXY Protocol version to use.
             */
            version?: number;
        }

        /**
         * TLS defines the TLS configuration on a layer 4 / TCP Route.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls_1
         */
        export interface IngressRouteTCPSpecTls {
            /**
             * CertResolver defines the name of the certificate resolver to use.
             * Cert resolvers have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/https/acme/#certificate-resolvers
             */
            certResolver?: string;
            /**
             * Domains defines the list of domains that will be used to issue certificates.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#domains
             */
            domains?: outputs.traefik.v1alpha1.IngressRouteTCPSpecTlsDomains[];
            /**
             * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
             * If not defined, the `default` TLSOption is used.
             * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options
             */
            options?: outputs.traefik.v1alpha1.IngressRouteTCPSpecTlsOptions;
            /**
             * Passthrough defines whether a TLS router will terminate the TLS connection.
             */
            passthrough?: boolean;
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName?: string;
            /**
             * Store defines the reference to the TLSStore, that will be used to store certificates.
             * Please note that only `default` TLSStore can be used.
             */
            store?: outputs.traefik.v1alpha1.IngressRouteTCPSpecTlsStore;
        }

        /**
         * Domain holds a domain name with SANs.
         */
        export interface IngressRouteTCPSpecTlsDomains {
            /**
             * Main defines the main domain name.
             */
            main?: string;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans?: string[];
        }

        /**
         * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
         * If not defined, the `default` TLSOption is used.
         * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options
         */
        export interface IngressRouteTCPSpecTlsOptions {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace?: string;
        }

        /**
         * Store defines the reference to the TLSStore, that will be used to store certificates.
         * Please note that only `default` TLSStore can be used.
         */
        export interface IngressRouteTCPSpecTlsStore {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace?: string;
        }

        /**
         * IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.
         */
        export interface IngressRouteUDPSpec {
            /**
             * EntryPoints defines the list of entry point names to bind to.
             * Entry points have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/
             * Default: all.
             */
            entryPoints?: string[];
            /**
             * Routes defines the list of routes.
             */
            routes: outputs.traefik.v1alpha1.IngressRouteUDPSpecRoutes[];
        }

        /**
         * RouteUDP holds the UDP route configuration.
         */
        export interface IngressRouteUDPSpecRoutes {
            /**
             * Services defines the list of UDP services.
             */
            services?: outputs.traefik.v1alpha1.IngressRouteUDPSpecRoutesServices[];
        }

        /**
         * ServiceUDP defines an upstream UDP service to proxy traffic to.
         */
        export interface IngressRouteUDPSpecRoutesServices {
            /**
             * Name defines the name of the referenced Kubernetes Service.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service.
             */
            namespace?: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            /**
             * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
             */
            weight?: number;
        }

        /**
         * MiddlewareSpec defines the desired state of a Middleware.
         */
        export interface MiddlewareSpec {
            /**
             * AddPrefix holds the add prefix middleware configuration.
             * This middleware updates the path of a request before forwarding it.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/addprefix/
             */
            addPrefix?: outputs.traefik.v1alpha1.MiddlewareSpecAddPrefix;
            /**
             * BasicAuth holds the basic auth middleware configuration.
             * This middleware restricts access to your services to known users.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/
             */
            basicAuth?: outputs.traefik.v1alpha1.MiddlewareSpecBasicAuth;
            /**
             * Buffering holds the buffering middleware configuration.
             * This middleware retries or limits the size of requests that can be forwarded to backends.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#maxrequestbodybytes
             */
            buffering?: outputs.traefik.v1alpha1.MiddlewareSpecBuffering;
            /**
             * Chain holds the configuration of the chain middleware.
             * This middleware enables to define reusable combinations of other pieces of middleware.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/chain/
             */
            chain?: outputs.traefik.v1alpha1.MiddlewareSpecChain;
            /**
             * CircuitBreaker holds the circuit breaker configuration.
             */
            circuitBreaker?: outputs.traefik.v1alpha1.MiddlewareSpecCircuitBreaker;
            /**
             * Compress holds the compress middleware configuration.
             * This middleware compresses responses before sending them to the client, using gzip compression.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/compress/
             */
            compress?: outputs.traefik.v1alpha1.MiddlewareSpecCompress;
            /**
             * ContentType holds the content-type middleware configuration.
             * This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
             */
            contentType?: outputs.traefik.v1alpha1.MiddlewareSpecContentType;
            /**
             * DigestAuth holds the digest auth middleware configuration.
             * This middleware restricts access to your services to known users.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/digestauth/
             */
            digestAuth?: outputs.traefik.v1alpha1.MiddlewareSpecDigestAuth;
            /**
             * ErrorPage holds the custom error middleware configuration.
             * This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/
             */
            errors?: outputs.traefik.v1alpha1.MiddlewareSpecErrors;
            /**
             * ForwardAuth holds the forward auth middleware configuration.
             * This middleware delegates the request authentication to a Service.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/
             */
            forwardAuth?: outputs.traefik.v1alpha1.MiddlewareSpecForwardAuth;
            /**
             * GrpcWeb holds the gRPC web middleware configuration.
             * This middleware converts a gRPC web request to an HTTP/2 gRPC request.
             */
            grpcWeb?: outputs.traefik.v1alpha1.MiddlewareSpecGrpcWeb;
            /**
             * Headers holds the headers middleware configuration.
             * This middleware manages the requests and responses headers.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/headers/#customrequestheaders
             */
            headers?: outputs.traefik.v1alpha1.MiddlewareSpecHeaders;
            /**
             * InFlightReq holds the in-flight request middleware configuration.
             * This middleware limits the number of requests being processed and served concurrently.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/
             */
            inFlightReq?: outputs.traefik.v1alpha1.MiddlewareSpecInFlightReq;
            /**
             * IPAllowList holds the IP allowlist middleware configuration.
             * This middleware limits allowed requests based on the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/
             */
            ipAllowList?: outputs.traefik.v1alpha1.MiddlewareSpecIpAllowList;
            /**
             * Deprecated: please use IPAllowList instead.
             */
            ipWhiteList?: outputs.traefik.v1alpha1.MiddlewareSpecIpWhiteList;
            /**
             * PassTLSClientCert holds the pass TLS client cert middleware configuration.
             * This middleware adds the selected data from the passed client TLS certificate to a header.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/passtlsclientcert/
             */
            passTLSClientCert?: outputs.traefik.v1alpha1.MiddlewareSpecPassTlsclientCert;
            /**
             * Plugin defines the middleware plugin configuration.
             * More info: https://doc.traefik.io/traefik/plugins/
             */
            plugin?: {[key: string]: {[key: string]: any}};
            /**
             * RateLimit holds the rate limit configuration.
             * This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ratelimit/
             */
            rateLimit?: outputs.traefik.v1alpha1.MiddlewareSpecRateLimit;
            /**
             * RedirectRegex holds the redirect regex middleware configuration.
             * This middleware redirects a request using regex matching and replacement.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectregex/#regex
             */
            redirectRegex?: outputs.traefik.v1alpha1.MiddlewareSpecRedirectRegex;
            /**
             * RedirectScheme holds the redirect scheme middleware configuration.
             * This middleware redirects requests from a scheme/port to another.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectscheme/
             */
            redirectScheme?: outputs.traefik.v1alpha1.MiddlewareSpecRedirectScheme;
            /**
             * ReplacePath holds the replace path middleware configuration.
             * This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepath/
             */
            replacePath?: outputs.traefik.v1alpha1.MiddlewareSpecReplacePath;
            /**
             * ReplacePathRegex holds the replace path regex middleware configuration.
             * This middleware replaces the path of a URL using regex matching and replacement.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepathregex/
             */
            replacePathRegex?: outputs.traefik.v1alpha1.MiddlewareSpecReplacePathRegex;
            /**
             * Retry holds the retry middleware configuration.
             * This middleware reissues requests a given number of times to a backend server if that server does not reply.
             * As soon as the server answers, the middleware stops retrying, regardless of the response status.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/retry/
             */
            retry?: outputs.traefik.v1alpha1.MiddlewareSpecRetry;
            /**
             * StripPrefix holds the strip prefix middleware configuration.
             * This middleware removes the specified prefixes from the URL path.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefix/
             */
            stripPrefix?: outputs.traefik.v1alpha1.MiddlewareSpecStripPrefix;
            /**
             * StripPrefixRegex holds the strip prefix regex middleware configuration.
             * This middleware removes the matching prefixes from the URL path.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefixregex/
             */
            stripPrefixRegex?: outputs.traefik.v1alpha1.MiddlewareSpecStripPrefixRegex;
        }

        /**
         * AddPrefix holds the add prefix middleware configuration.
         * This middleware updates the path of a request before forwarding it.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/addprefix/
         */
        export interface MiddlewareSpecAddPrefix {
            /**
             * Prefix is the string to add before the current path in the requested URL.
             * It should include a leading slash (/).
             */
            prefix?: string;
        }

        /**
         * BasicAuth holds the basic auth middleware configuration.
         * This middleware restricts access to your services to known users.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/
         */
        export interface MiddlewareSpecBasicAuth {
            /**
             * HeaderField defines a header field to store the authenticated user.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/#headerfield
             */
            headerField?: string;
            /**
             * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.
             * Default: traefik.
             */
            realm?: string;
            /**
             * RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service.
             * Default: false.
             */
            removeHeader?: boolean;
            /**
             * Secret is the name of the referenced Kubernetes Secret containing user credentials.
             */
            secret?: string;
        }

        /**
         * Buffering holds the buffering middleware configuration.
         * This middleware retries or limits the size of requests that can be forwarded to backends.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#maxrequestbodybytes
         */
        export interface MiddlewareSpecBuffering {
            /**
             * MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes).
             * If the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response.
             * Default: 0 (no maximum).
             */
            maxRequestBodyBytes?: number;
            /**
             * MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes).
             * If the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead.
             * Default: 0 (no maximum).
             */
            maxResponseBodyBytes?: number;
            /**
             * MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory.
             * Default: 1048576 (1Mi).
             */
            memRequestBodyBytes?: number;
            /**
             * MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory.
             * Default: 1048576 (1Mi).
             */
            memResponseBodyBytes?: number;
            /**
             * RetryExpression defines the retry conditions.
             * It is a logical combination of functions with operators AND (&&) and OR (||).
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#retryexpression
             */
            retryExpression?: string;
        }

        /**
         * Chain holds the configuration of the chain middleware.
         * This middleware enables to define reusable combinations of other pieces of middleware.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/chain/
         */
        export interface MiddlewareSpecChain {
            /**
             * Middlewares is the list of MiddlewareRef which composes the chain.
             */
            middlewares?: outputs.traefik.v1alpha1.MiddlewareSpecChainMiddlewares[];
        }

        /**
         * MiddlewareRef is a reference to a Middleware resource.
         */
        export interface MiddlewareSpecChainMiddlewares {
            /**
             * Name defines the name of the referenced Middleware resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Middleware resource.
             */
            namespace?: string;
        }

        /**
         * CircuitBreaker holds the circuit breaker configuration.
         */
        export interface MiddlewareSpecCircuitBreaker {
            /**
             * CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).
             */
            checkPeriod?: number | string;
            /**
             * Expression is the condition that triggers the tripped state.
             */
            expression?: string;
            /**
             * FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).
             */
            fallbackDuration?: number | string;
            /**
             * RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).
             */
            recoveryDuration?: number | string;
            /**
             * ResponseCode is the status code that the circuit breaker will return while it is in the open state.
             */
            responseCode?: number;
        }

        /**
         * Compress holds the compress middleware configuration.
         * This middleware compresses responses before sending them to the client, using gzip compression.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/compress/
         */
        export interface MiddlewareSpecCompress {
            /**
             * DefaultEncoding specifies the default encoding if the `Accept-Encoding` header is not in the request or contains a wildcard (`*`).
             */
            defaultEncoding?: string;
            /**
             * ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.
             * `application/grpc` is always excluded.
             */
            excludedContentTypes?: string[];
            /**
             * IncludedContentTypes defines the list of content types to compare the Content-Type header of the responses before compressing.
             */
            includedContentTypes?: string[];
            /**
             * MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed.
             * Default: 1024.
             */
            minResponseBodyBytes?: number;
        }

        /**
         * ContentType holds the content-type middleware configuration.
         * This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
         */
        export interface MiddlewareSpecContentType {
            /**
             * AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend,
             * be automatically set to a value derived from the contents of the response.
             * Deprecated: AutoDetect option is deprecated, Content-Type middleware is only meant to be used to enable the content-type detection, please remove any usage of this option.
             */
            autoDetect?: boolean;
        }

        /**
         * DigestAuth holds the digest auth middleware configuration.
         * This middleware restricts access to your services to known users.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/digestauth/
         */
        export interface MiddlewareSpecDigestAuth {
            /**
             * HeaderField defines a header field to store the authenticated user.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/#headerfield
             */
            headerField?: string;
            /**
             * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.
             * Default: traefik.
             */
            realm?: string;
            /**
             * RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.
             */
            removeHeader?: boolean;
            /**
             * Secret is the name of the referenced Kubernetes Secret containing user credentials.
             */
            secret?: string;
        }

        /**
         * ErrorPage holds the custom error middleware configuration.
         * This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/
         */
        export interface MiddlewareSpecErrors {
            /**
             * Query defines the URL for the error page (hosted by service).
             * The {status} variable can be used in order to insert the status code in the URL.
             */
            query?: string;
            /**
             * Service defines the reference to a Kubernetes Service that will serve the error page.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/#service
             */
            service?: outputs.traefik.v1alpha1.MiddlewareSpecErrorsService;
            /**
             * Status defines which status or range of statuses should result in an error page.
             * It can be either a status code as a number (500),
             * as multiple comma-separated numbers (500,502),
             * as ranges by separating two codes with a dash (500-599),
             * or a combination of the two (404,418,500-599).
             */
            status?: string[];
        }

        /**
         * Service defines the reference to a Kubernetes Service that will serve the error page.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/#service
         */
        export interface MiddlewareSpecErrorsService {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader?: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port?: number | string;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceResponseForwarding;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: string;
            /**
             * Sticky defines the sticky sessions configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
             */
            sticky?: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceSticky;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy?: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: number;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface MiddlewareSpecErrorsServiceResponseForwarding {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval?: string;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
         */
        export interface MiddlewareSpecErrorsServiceSticky {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface MiddlewareSpecErrorsServiceStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: number;
            /**
             * Name defines the Cookie name.
             */
            name?: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: boolean;
        }

        /**
         * ForwardAuth holds the forward auth middleware configuration.
         * This middleware delegates the request authentication to a Service.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/
         */
        export interface MiddlewareSpecForwardAuth {
            /**
             * AddAuthCookiesToResponse defines the list of cookies to copy from the authentication server response to the response.
             */
            addAuthCookiesToResponse?: string[];
            /**
             * Address defines the authentication server address.
             */
            address?: string;
            /**
             * AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server.
             * If not set or empty then all request headers are passed.
             */
            authRequestHeaders?: string[];
            /**
             * AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.
             */
            authResponseHeaders?: string[];
            /**
             * AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/#authresponseheadersregex
             */
            authResponseHeadersRegex?: string;
            /**
             * TLS defines the configuration used to secure the connection to the authentication server.
             */
            tls?: outputs.traefik.v1alpha1.MiddlewareSpecForwardAuthTls;
            /**
             * TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.
             */
            trustForwardHeader?: boolean;
        }

        /**
         * TLS defines the configuration used to secure the connection to the authentication server.
         */
        export interface MiddlewareSpecForwardAuthTls {
            /**
             * Deprecated: TLS client authentication is a server side option (see https://github.com/golang/go/blob/740a490f71d026bb7d2d13cb8fa2d6d6e0572b70/src/crypto/tls/common.go#L634).
             */
            caOptional?: boolean;
            /**
             * CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate.
             * The CA certificate is extracted from key `tls.ca` or `ca.crt`.
             */
            caSecret?: string;
            /**
             * CertSecret is the name of the referenced Kubernetes Secret containing the client certificate.
             * The client certificate is extracted from the keys `tls.crt` and `tls.key`.
             */
            certSecret?: string;
            /**
             * InsecureSkipVerify defines whether the server certificates should be validated.
             */
            insecureSkipVerify?: boolean;
        }

        /**
         * GrpcWeb holds the gRPC web middleware configuration.
         * This middleware converts a gRPC web request to an HTTP/2 gRPC request.
         */
        export interface MiddlewareSpecGrpcWeb {
            /**
             * AllowOrigins is a list of allowable origins.
             * Can also be a wildcard origin "*".
             */
            allowOrigins?: string[];
        }

        /**
         * Headers holds the headers middleware configuration.
         * This middleware manages the requests and responses headers.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/headers/#customrequestheaders
         */
        export interface MiddlewareSpecHeaders {
            /**
             * AccessControlAllowCredentials defines whether the request can include user credentials.
             */
            accessControlAllowCredentials?: boolean;
            /**
             * AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.
             */
            accessControlAllowHeaders?: string[];
            /**
             * AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.
             */
            accessControlAllowMethods?: string[];
            /**
             * AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin "*".
             */
            accessControlAllowOriginList?: string[];
            /**
             * AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).
             */
            accessControlAllowOriginListRegex?: string[];
            /**
             * AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.
             */
            accessControlExposeHeaders?: string[];
            /**
             * AccessControlMaxAge defines the time that a preflight request may be cached.
             */
            accessControlMaxAge?: number;
            /**
             * AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.
             */
            addVaryHeader?: boolean;
            /**
             * AllowedHosts defines the fully qualified list of allowed domain names.
             */
            allowedHosts?: string[];
            /**
             * BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.
             */
            browserXssFilter?: boolean;
            /**
             * ContentSecurityPolicy defines the Content-Security-Policy header value.
             */
            contentSecurityPolicy?: string;
            /**
             * ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.
             */
            contentTypeNosniff?: boolean;
            /**
             * CustomBrowserXSSValue defines the X-XSS-Protection header value.
             * This overrides the BrowserXssFilter option.
             */
            customBrowserXSSValue?: string;
            /**
             * CustomFrameOptionsValue defines the X-Frame-Options header value.
             * This overrides the FrameDeny option.
             */
            customFrameOptionsValue?: string;
            /**
             * CustomRequestHeaders defines the header names and values to apply to the request.
             */
            customRequestHeaders?: {[key: string]: string};
            /**
             * CustomResponseHeaders defines the header names and values to apply to the response.
             */
            customResponseHeaders?: {[key: string]: string};
            /**
             * Deprecated: FeaturePolicy option is deprecated, please use PermissionsPolicy instead.
             */
            featurePolicy?: string;
            /**
             * ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.
             */
            forceSTSHeader?: boolean;
            /**
             * FrameDeny defines whether to add the X-Frame-Options header with the DENY value.
             */
            frameDeny?: boolean;
            /**
             * HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.
             */
            hostsProxyHeaders?: string[];
            /**
             * IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing.
             * Usually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain.
             * If you would like your development environment to mimic production with complete Host blocking, SSL redirects,
             * and STS headers, leave this as false.
             */
            isDevelopment?: boolean;
            /**
             * PermissionsPolicy defines the Permissions-Policy header value.
             * This allows sites to control browser features.
             */
            permissionsPolicy?: string;
            /**
             * PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.
             */
            publicKey?: string;
            /**
             * ReferrerPolicy defines the Referrer-Policy header value.
             * This allows sites to control whether browsers forward the Referer header to other sites.
             */
            referrerPolicy?: string;
            /**
             * Deprecated: SSLForceHost option is deprecated, please use RedirectRegex instead.
             */
            sslForceHost?: boolean;
            /**
             * Deprecated: SSLHost option is deprecated, please use RedirectRegex instead.
             */
            sslHost?: string;
            /**
             * SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request.
             * It can be useful when using other proxies (example: "X-Forwarded-Proto": "https").
             */
            sslProxyHeaders?: {[key: string]: string};
            /**
             * Deprecated: SSLRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.
             */
            sslRedirect?: boolean;
            /**
             * Deprecated: SSLTemporaryRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.
             */
            sslTemporaryRedirect?: boolean;
            /**
             * STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.
             */
            stsIncludeSubdomains?: boolean;
            /**
             * STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.
             */
            stsPreload?: boolean;
            /**
             * STSSeconds defines the max-age of the Strict-Transport-Security header.
             * If set to 0, the header is not set.
             */
            stsSeconds?: number;
        }

        /**
         * InFlightReq holds the in-flight request middleware configuration.
         * This middleware limits the number of requests being processed and served concurrently.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/
         */
        export interface MiddlewareSpecInFlightReq {
            /**
             * Amount defines the maximum amount of allowed simultaneous in-flight request.
             * The middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).
             */
            amount?: number;
            /**
             * SourceCriterion defines what criterion is used to group requests as originating from a common source.
             * If several strategies are defined at the same time, an error will be raised.
             * If none are set, the default is to use the requestHost.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/#sourcecriterion
             */
            sourceCriterion?: outputs.traefik.v1alpha1.MiddlewareSpecInFlightReqSourceCriterion;
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source.
         * If several strategies are defined at the same time, an error will be raised.
         * If none are set, the default is to use the requestHost.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/#sourcecriterion
         */
        export interface MiddlewareSpecInFlightReqSourceCriterion {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
             */
            ipStrategy?: outputs.traefik.v1alpha1.MiddlewareSpecInFlightReqSourceCriterionIpStrategy;
            /**
             * RequestHeaderName defines the name of the header used to group incoming requests.
             */
            requestHeaderName?: string;
            /**
             * RequestHost defines whether to consider the request Host as the source.
             */
            requestHost?: boolean;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecInFlightReqSourceCriterionIpStrategy {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: string[];
        }

        /**
         * IPAllowList holds the IP allowlist middleware configuration.
         * This middleware limits allowed requests based on the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/
         */
        export interface MiddlewareSpecIpAllowList {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
             */
            ipStrategy?: outputs.traefik.v1alpha1.MiddlewareSpecIpAllowListIpStrategy;
            /**
             * RejectStatusCode defines the HTTP status code used for refused requests.
             * If not set, the default is 403 (Forbidden).
             */
            rejectStatusCode?: number;
            /**
             * SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange?: string[];
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecIpAllowListIpStrategy {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: string[];
        }

        /**
         * Deprecated: please use IPAllowList instead.
         */
        export interface MiddlewareSpecIpWhiteList {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
             */
            ipStrategy?: outputs.traefik.v1alpha1.MiddlewareSpecIpWhiteListIpStrategy;
            /**
             * SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation). Required.
             */
            sourceRange?: string[];
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecIpWhiteListIpStrategy {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: string[];
        }

        /**
         * PassTLSClientCert holds the pass TLS client cert middleware configuration.
         * This middleware adds the selected data from the passed client TLS certificate to a header.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/passtlsclientcert/
         */
        export interface MiddlewareSpecPassTlsclientCert {
            /**
             * Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
             */
            info?: outputs.traefik.v1alpha1.MiddlewareSpecPassTlsclientCertInfo;
            /**
             * PEM sets the X-Forwarded-Tls-Client-Cert header with the certificate.
             */
            pem?: boolean;
        }

        /**
         * Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTlsclientCertInfo {
            /**
             * Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
             */
            issuer?: outputs.traefik.v1alpha1.MiddlewareSpecPassTlsclientCertInfoIssuer;
            /**
             * NotAfter defines whether to add the Not After information from the Validity part.
             */
            notAfter?: boolean;
            /**
             * NotBefore defines whether to add the Not Before information from the Validity part.
             */
            notBefore?: boolean;
            /**
             * Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.
             */
            sans?: boolean;
            /**
             * SerialNumber defines whether to add the client serialNumber information.
             */
            serialNumber?: boolean;
            /**
             * Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
             */
            subject?: outputs.traefik.v1alpha1.MiddlewareSpecPassTlsclientCertInfoSubject;
        }

        /**
         * Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTlsclientCertInfoIssuer {
            /**
             * CommonName defines whether to add the organizationalUnit information into the issuer.
             */
            commonName?: boolean;
            /**
             * Country defines whether to add the country information into the issuer.
             */
            country?: boolean;
            /**
             * DomainComponent defines whether to add the domainComponent information into the issuer.
             */
            domainComponent?: boolean;
            /**
             * Locality defines whether to add the locality information into the issuer.
             */
            locality?: boolean;
            /**
             * Organization defines whether to add the organization information into the issuer.
             */
            organization?: boolean;
            /**
             * Province defines whether to add the province information into the issuer.
             */
            province?: boolean;
            /**
             * SerialNumber defines whether to add the serialNumber information into the issuer.
             */
            serialNumber?: boolean;
        }

        /**
         * Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTlsclientCertInfoSubject {
            /**
             * CommonName defines whether to add the organizationalUnit information into the subject.
             */
            commonName?: boolean;
            /**
             * Country defines whether to add the country information into the subject.
             */
            country?: boolean;
            /**
             * DomainComponent defines whether to add the domainComponent information into the subject.
             */
            domainComponent?: boolean;
            /**
             * Locality defines whether to add the locality information into the subject.
             */
            locality?: boolean;
            /**
             * Organization defines whether to add the organization information into the subject.
             */
            organization?: boolean;
            /**
             * OrganizationalUnit defines whether to add the organizationalUnit information into the subject.
             */
            organizationalUnit?: boolean;
            /**
             * Province defines whether to add the province information into the subject.
             */
            province?: boolean;
            /**
             * SerialNumber defines whether to add the serialNumber information into the subject.
             */
            serialNumber?: boolean;
        }

        /**
         * RateLimit holds the rate limit configuration.
         * This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ratelimit/
         */
        export interface MiddlewareSpecRateLimit {
            /**
             * Average is the maximum rate, by default in requests/s, allowed for the given source.
             * It defaults to 0, which means no rate limiting.
             * The rate is actually defined by dividing Average by Period. So for a rate below 1req/s,
             * one needs to define a Period larger than a second.
             */
            average?: number;
            /**
             * Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time.
             * It defaults to 1.
             */
            burst?: number;
            /**
             * Period, in combination with Average, defines the actual maximum rate, such as:
             * r = Average / Period. It defaults to a second.
             */
            period?: number | string;
            /**
             * SourceCriterion defines what criterion is used to group requests as originating from a common source.
             * If several strategies are defined at the same time, an error will be raised.
             * If none are set, the default is to use the request's remote address field (as an ipStrategy).
             */
            sourceCriterion?: outputs.traefik.v1alpha1.MiddlewareSpecRateLimitSourceCriterion;
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source.
         * If several strategies are defined at the same time, an error will be raised.
         * If none are set, the default is to use the request's remote address field (as an ipStrategy).
         */
        export interface MiddlewareSpecRateLimitSourceCriterion {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
             */
            ipStrategy?: outputs.traefik.v1alpha1.MiddlewareSpecRateLimitSourceCriterionIpStrategy;
            /**
             * RequestHeaderName defines the name of the header used to group incoming requests.
             */
            requestHeaderName?: string;
            /**
             * RequestHost defines whether to consider the request Host as the source.
             */
            requestHost?: boolean;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecRateLimitSourceCriterionIpStrategy {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: string[];
        }

        /**
         * RedirectRegex holds the redirect regex middleware configuration.
         * This middleware redirects a request using regex matching and replacement.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectregex/#regex
         */
        export interface MiddlewareSpecRedirectRegex {
            /**
             * Permanent defines whether the redirection is permanent (301).
             */
            permanent?: boolean;
            /**
             * Regex defines the regex used to match and capture elements from the request URL.
             */
            regex?: string;
            /**
             * Replacement defines how to modify the URL to have the new target URL.
             */
            replacement?: string;
        }

        /**
         * RedirectScheme holds the redirect scheme middleware configuration.
         * This middleware redirects requests from a scheme/port to another.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectscheme/
         */
        export interface MiddlewareSpecRedirectScheme {
            /**
             * Permanent defines whether the redirection is permanent (301).
             */
            permanent?: boolean;
            /**
             * Port defines the port of the new URL.
             */
            port?: string;
            /**
             * Scheme defines the scheme of the new URL.
             */
            scheme?: string;
        }

        /**
         * ReplacePath holds the replace path middleware configuration.
         * This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepath/
         */
        export interface MiddlewareSpecReplacePath {
            /**
             * Path defines the path to use as replacement in the request URL.
             */
            path?: string;
        }

        /**
         * ReplacePathRegex holds the replace path regex middleware configuration.
         * This middleware replaces the path of a URL using regex matching and replacement.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepathregex/
         */
        export interface MiddlewareSpecReplacePathRegex {
            /**
             * Regex defines the regular expression used to match and capture the path from the request URL.
             */
            regex?: string;
            /**
             * Replacement defines the replacement path format, which can include captured variables.
             */
            replacement?: string;
        }

        /**
         * Retry holds the retry middleware configuration.
         * This middleware reissues requests a given number of times to a backend server if that server does not reply.
         * As soon as the server answers, the middleware stops retrying, regardless of the response status.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/retry/
         */
        export interface MiddlewareSpecRetry {
            /**
             * Attempts defines how many times the request should be retried.
             */
            attempts?: number;
            /**
             * InitialInterval defines the first wait time in the exponential backoff series.
             * The maximum interval is calculated as twice the initialInterval.
             * If unspecified, requests will be retried immediately.
             * The value of initialInterval should be provided in seconds or as a valid duration format,
             * see https://pkg.go.dev/time#ParseDuration.
             */
            initialInterval?: number | string;
        }

        /**
         * StripPrefix holds the strip prefix middleware configuration.
         * This middleware removes the specified prefixes from the URL path.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefix/
         */
        export interface MiddlewareSpecStripPrefix {
            /**
             * Deprecated: ForceSlash option is deprecated, please remove any usage of this option.
             * ForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary.
             * Default: true.
             */
            forceSlash?: boolean;
            /**
             * Prefixes defines the prefixes to strip from the request URL.
             */
            prefixes?: string[];
        }

        /**
         * StripPrefixRegex holds the strip prefix regex middleware configuration.
         * This middleware removes the matching prefixes from the URL path.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefixregex/
         */
        export interface MiddlewareSpecStripPrefixRegex {
            /**
             * Regex defines the regular expression to match the path prefix from the request URL.
             */
            regex?: string[];
        }

        /**
         * MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.
         */
        export interface MiddlewareTCPSpec {
            /**
             * InFlightConn defines the InFlightConn middleware configuration.
             */
            inFlightConn?: outputs.traefik.v1alpha1.MiddlewareTCPSpecInFlightConn;
            /**
             * IPAllowList defines the IPAllowList middleware configuration.
             * This middleware accepts/refuses connections based on the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipallowlist/
             */
            ipAllowList?: outputs.traefik.v1alpha1.MiddlewareTCPSpecIpAllowList;
            /**
             * IPWhiteList defines the IPWhiteList middleware configuration.
             * This middleware accepts/refuses connections based on the client IP.
             * Deprecated: please use IPAllowList instead.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipwhitelist/
             */
            ipWhiteList?: outputs.traefik.v1alpha1.MiddlewareTCPSpecIpWhiteList;
        }

        /**
         * InFlightConn defines the InFlightConn middleware configuration.
         */
        export interface MiddlewareTCPSpecInFlightConn {
            /**
             * Amount defines the maximum amount of allowed simultaneous connections.
             * The middleware closes the connection if there are already amount connections opened.
             */
            amount?: number;
        }

        /**
         * IPAllowList defines the IPAllowList middleware configuration.
         * This middleware accepts/refuses connections based on the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipallowlist/
         */
        export interface MiddlewareTCPSpecIpAllowList {
            /**
             * SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange?: string[];
        }

        /**
         * IPWhiteList defines the IPWhiteList middleware configuration.
         * This middleware accepts/refuses connections based on the client IP.
         * Deprecated: please use IPAllowList instead.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipwhitelist/
         */
        export interface MiddlewareTCPSpecIpWhiteList {
            /**
             * SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange?: string[];
        }

        /**
         * ServersTransportSpec defines the desired state of a ServersTransport.
         */
        export interface ServersTransportSpec {
            /**
             * CertificatesSecrets defines a list of secret storing client certificates for mTLS.
             */
            certificatesSecrets?: string[];
            /**
             * DisableHTTP2 disables HTTP/2 for connections with backend servers.
             */
            disableHTTP2?: boolean;
            /**
             * ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.
             */
            forwardingTimeouts?: outputs.traefik.v1alpha1.ServersTransportSpecForwardingTimeouts;
            /**
             * InsecureSkipVerify disables SSL certificate verification.
             */
            insecureSkipVerify?: boolean;
            /**
             * MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.
             */
            maxIdleConnsPerHost?: number;
            /**
             * PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.
             */
            peerCertURI?: string;
            /**
             * RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.
             */
            rootCAsSecrets?: string[];
            /**
             * ServerName defines the server name used to contact the server.
             */
            serverName?: string;
            /**
             * Spiffe defines the SPIFFE configuration.
             */
            spiffe?: outputs.traefik.v1alpha1.ServersTransportSpecSpiffe;
        }

        /**
         * ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.
         */
        export interface ServersTransportSpecForwardingTimeouts {
            /**
             * DialTimeout is the amount of time to wait until a connection to a backend server can be established.
             */
            dialTimeout?: number | string;
            /**
             * IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.
             */
            idleConnTimeout?: number | string;
            /**
             * PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.
             */
            pingTimeout?: number | string;
            /**
             * ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.
             */
            readIdleTimeout?: number | string;
            /**
             * ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).
             */
            responseHeaderTimeout?: number | string;
        }

        /**
         * Spiffe defines the SPIFFE configuration.
         */
        export interface ServersTransportSpecSpiffe {
            /**
             * IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).
             */
            ids?: string[];
            /**
             * TrustDomain defines the allowed SPIFFE trust domain.
             */
            trustDomain?: string;
        }

        /**
         * ServersTransportTCPSpec defines the desired state of a ServersTransportTCP.
         */
        export interface ServersTransportTCPSpec {
            /**
             * DialKeepAlive is the interval between keep-alive probes for an active network connection. If zero, keep-alive probes are sent with a default value (currently 15 seconds), if supported by the protocol and operating system. Network protocols or operating systems that do not support keep-alives ignore this field. If negative, keep-alive probes are disabled.
             */
            dialKeepAlive?: number | string;
            /**
             * DialTimeout is the amount of time to wait until a connection to a backend server can be established.
             */
            dialTimeout?: number | string;
            /**
             * TerminationDelay defines the delay to wait before fully terminating the connection, after one connected peer has closed its writing capability.
             */
            terminationDelay?: number | string;
            /**
             * TLS defines the TLS configuration
             */
            tls?: outputs.traefik.v1alpha1.ServersTransportTCPSpecTls;
        }

        /**
         * TLS defines the TLS configuration
         */
        export interface ServersTransportTCPSpecTls {
            /**
             * CertificatesSecrets defines a list of secret storing client certificates for mTLS.
             */
            certificatesSecrets?: string[];
            /**
             * InsecureSkipVerify disables TLS certificate verification.
             */
            insecureSkipVerify?: boolean;
            /**
             * MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.
             * PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.
             */
            peerCertURI?: string;
            /**
             * RootCAsSecrets defines a list of CA secret used to validate self-signed certificates.
             */
            rootCAsSecrets?: string[];
            /**
             * ServerName defines the server name used to contact the server.
             */
            serverName?: string;
            /**
             * Spiffe defines the SPIFFE configuration.
             */
            spiffe?: outputs.traefik.v1alpha1.ServersTransportTCPSpecTlsSpiffe;
        }

        /**
         * Spiffe defines the SPIFFE configuration.
         */
        export interface ServersTransportTCPSpecTlsSpiffe {
            /**
             * IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).
             */
            ids?: string[];
            /**
             * TrustDomain defines the allowed SPIFFE trust domain.
             */
            trustDomain?: string;
        }

        /**
         * TLSOptionSpec defines the desired state of a TLSOption.
         */
        export interface TLSOptionSpec {
            /**
             * ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference.
             * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#alpn-protocols
             */
            alpnProtocols?: string[];
            /**
             * CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2.
             * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#cipher-suites
             */
            cipherSuites?: string[];
            /**
             * ClientAuth defines the server's policy for TLS Client Authentication.
             */
            clientAuth?: outputs.traefik.v1alpha1.TLSOptionSpecClientAuth;
            /**
             * CurvePreferences defines the preferred elliptic curves in a specific order.
             * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#curve-preferences
             */
            curvePreferences?: string[];
            /**
             * MaxVersion defines the maximum TLS version that Traefik will accept.
             * Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
             * Default: None.
             */
            maxVersion?: string;
            /**
             * MinVersion defines the minimum TLS version that Traefik will accept.
             * Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
             * Default: VersionTLS10.
             */
            minVersion?: string;
            /**
             * PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's.
             * It is enabled automatically when minVersion or maxVersion is set.
             * Deprecated: https://github.com/golang/go/issues/45430
             */
            preferServerCipherSuites?: boolean;
            /**
             * SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.
             */
            sniStrict?: boolean;
        }

        /**
         * ClientAuth defines the server's policy for TLS Client Authentication.
         */
        export interface TLSOptionSpecClientAuth {
            /**
             * ClientAuthType defines the client authentication type to apply.
             */
            clientAuthType?: string;
            /**
             * SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.
             */
            secretNames?: string[];
        }

        /**
         * TLSStoreSpec defines the desired state of a TLSStore.
         */
        export interface TLSStoreSpec {
            /**
             * Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.
             */
            certificates?: outputs.traefik.v1alpha1.TLSStoreSpecCertificates[];
            /**
             * DefaultCertificate defines the default certificate configuration.
             */
            defaultCertificate?: outputs.traefik.v1alpha1.TLSStoreSpecDefaultCertificate;
            /**
             * DefaultGeneratedCert defines the default generated certificate configuration.
             */
            defaultGeneratedCert?: outputs.traefik.v1alpha1.TLSStoreSpecDefaultGeneratedCert;
        }

        /**
         * Certificate holds a secret name for the TLSStore resource.
         */
        export interface TLSStoreSpecCertificates {
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: string;
        }

        /**
         * DefaultCertificate defines the default certificate configuration.
         */
        export interface TLSStoreSpecDefaultCertificate {
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: string;
        }

        /**
         * DefaultGeneratedCert defines the default generated certificate configuration.
         */
        export interface TLSStoreSpecDefaultGeneratedCert {
            /**
             * Domain is the domain definition for the DefaultCertificate.
             */
            domain?: outputs.traefik.v1alpha1.TLSStoreSpecDefaultGeneratedCertDomain;
            /**
             * Resolver is the name of the resolver that will be used to issue the DefaultCertificate.
             */
            resolver?: string;
        }

        /**
         * Domain is the domain definition for the DefaultCertificate.
         */
        export interface TLSStoreSpecDefaultGeneratedCertDomain {
            /**
             * Main defines the main domain name.
             */
            main?: string;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans?: string[];
        }

        /**
         * TraefikServiceSpec defines the desired state of a TraefikService.
         */
        export interface TraefikServiceSpec {
            /**
             * Mirroring defines the Mirroring service configuration.
             */
            mirroring?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroring;
            /**
             * Weighted defines the Weighted Round Robin configuration.
             */
            weighted?: outputs.traefik.v1alpha1.TraefikServiceSpecWeighted;
        }

        /**
         * Mirroring defines the Mirroring service configuration.
         */
        export interface TraefikServiceSpecMirroring {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: string;
            /**
             * MaxBodySize defines the maximum size allowed for the body of the request.
             * If the body is larger, the request is not mirrored.
             * Default value is -1, which means unlimited size.
             */
            maxBodySize?: number;
            /**
             * Mirrors defines the list of mirrors where Traefik will duplicate the traffic.
             */
            mirrors?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrors[];
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader?: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port?: number | string;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringResponseForwarding;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: string;
            /**
             * Sticky defines the sticky sessions configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
             */
            sticky?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringSticky;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy?: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: number;
        }

        /**
         * MirrorService holds the mirror configuration.
         */
        export interface TraefikServiceSpecMirroringMirrors {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader?: boolean;
            /**
             * Percent defines the part of the traffic to mirror.
             * Supported values: 0 to 100.
             */
            percent?: number;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port?: number | string;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsResponseForwarding;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: string;
            /**
             * Sticky defines the sticky sessions configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
             */
            sticky?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsSticky;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy?: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: number;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecMirroringMirrorsResponseForwarding {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval?: string;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecMirroringMirrorsSticky {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecMirroringMirrorsStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: number;
            /**
             * Name defines the Cookie name.
             */
            name?: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: boolean;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecMirroringResponseForwarding {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval?: string;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecMirroringSticky {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecMirroringStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: number;
            /**
             * Name defines the Cookie name.
             */
            name?: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: boolean;
        }

        /**
         * Weighted defines the Weighted Round Robin configuration.
         */
        export interface TraefikServiceSpecWeighted {
            /**
             * Services defines the list of Kubernetes Service and/or TraefikService to load-balance, with weight.
             */
            services?: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServices[];
            /**
             * Sticky defines whether sticky sessions are enabled.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#stickiness-and-load-balancing
             */
            sticky?: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedSticky;
        }

        /**
         * Service defines an upstream HTTP service to proxy traffic to.
         */
        export interface TraefikServiceSpecWeightedServices {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader?: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port?: number | string;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesResponseForwarding;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: string;
            /**
             * Sticky defines the sticky sessions configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
             */
            sticky?: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesSticky;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy?: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: number;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecWeightedServicesResponseForwarding {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval?: string;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecWeightedServicesSticky {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecWeightedServicesStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: number;
            /**
             * Name defines the Cookie name.
             */
            name?: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: boolean;
        }

        /**
         * Sticky defines whether sticky sessions are enabled.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#stickiness-and-load-balancing
         */
        export interface TraefikServiceSpecWeightedSticky {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecWeightedStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: number;
            /**
             * Name defines the Cookie name.
             */
            name?: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: boolean;
        }

    }
}
