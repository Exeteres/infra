// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import {ObjectMeta} from "../meta/v1";

export namespace traefik {
    export namespace v1alpha1 {
        /**
         * IngressRouteSpec defines the desired state of IngressRoute.
         */
        export interface IngressRouteSpecArgs {
            /**
             * EntryPoints defines the list of entry point names to bind to.
             * Entry points have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/
             * Default: all.
             */
            entryPoints?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Routes defines the list of routes.
             */
            routes: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesArgs>[]>;
            /**
             * TLS defines the TLS configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls
             */
            tls?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecTlsArgs>;
        }

        /**
         * Route holds the HTTP route configuration.
         */
        export interface IngressRouteSpecRoutesArgs {
            /**
             * Kind defines the kind of the route.
             * Rule is the only supported kind.
             */
            kind: pulumi.Input<string>;
            /**
             * Match defines the router's rule.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rule
             */
            match: pulumi.Input<string>;
            /**
             * Middlewares defines the list of references to Middleware resources.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-middleware
             */
            middlewares?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesMiddlewaresArgs>[]>;
            /**
             * Priority defines the router's priority.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#priority
             */
            priority?: pulumi.Input<number>;
            /**
             * Services defines the list of Service.
             * It can contain any combination of TraefikService and/or reference to a Kubernetes Service.
             */
            services?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesArgs>[]>;
            /**
             * Syntax defines the router's rule syntax.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rulesyntax
             */
            syntax?: pulumi.Input<string>;
        }

        /**
         * MiddlewareRef is a reference to a Middleware resource.
         */
        export interface IngressRouteSpecRoutesMiddlewaresArgs {
            /**
             * Name defines the name of the referenced Middleware resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Middleware resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Service defines an upstream HTTP service to proxy traffic to.
         */
        export interface IngressRouteSpecRoutesServicesArgs {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: pulumi.Input<string>;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: pulumi.Input<boolean>;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port?: pulumi.Input<number | string>;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesResponseForwardingArgs>;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: pulumi.Input<string>;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * Sticky defines the sticky sessions configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesStickyArgs>;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy?: pulumi.Input<string>;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface IngressRouteSpecRoutesServicesResponseForwardingArgs {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval?: pulumi.Input<string>;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
         */
        export interface IngressRouteSpecRoutesServicesStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface IngressRouteSpecRoutesServicesStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: pulumi.Input<number>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }

        /**
         * TLS defines the TLS configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls
         */
        export interface IngressRouteSpecTlsArgs {
            /**
             * CertResolver defines the name of the certificate resolver to use.
             * Cert resolvers have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/https/acme/#certificate-resolvers
             */
            certResolver?: pulumi.Input<string>;
            /**
             * Domains defines the list of domains that will be used to issue certificates.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#domains
             */
            domains?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecTlsDomainsArgs>[]>;
            /**
             * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
             * If not defined, the `default` TLSOption is used.
             * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options
             */
            options?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecTlsOptionsArgs>;
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName?: pulumi.Input<string>;
            /**
             * Store defines the reference to the TLSStore, that will be used to store certificates.
             * Please note that only `default` TLSStore can be used.
             */
            store?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteSpecTlsStoreArgs>;
        }

        /**
         * Domain holds a domain name with SANs.
         */
        export interface IngressRouteSpecTlsDomainsArgs {
            /**
             * Main defines the main domain name.
             */
            main?: pulumi.Input<string>;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
         * If not defined, the `default` TLSOption is used.
         * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options
         */
        export interface IngressRouteSpecTlsOptionsArgs {
            /**
             * Name defines the name of the referenced TLSOption.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsoption
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced TLSOption.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsoption
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Store defines the reference to the TLSStore, that will be used to store certificates.
         * Please note that only `default` TLSStore can be used.
         */
        export interface IngressRouteSpecTlsStoreArgs {
            /**
             * Name defines the name of the referenced TLSStore.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsstore
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced TLSStore.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsstore
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * IngressRouteTCPSpec defines the desired state of IngressRouteTCP.
         */
        export interface IngressRouteTCPSpecArgs {
            /**
             * EntryPoints defines the list of entry point names to bind to.
             * Entry points have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/
             * Default: all.
             */
            entryPoints?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Routes defines the list of routes.
             */
            routes: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesArgs>[]>;
            /**
             * TLS defines the TLS configuration on a layer 4 / TCP Route.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls_1
             */
            tls?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecTlsArgs>;
        }

        /**
         * RouteTCP holds the TCP route configuration.
         */
        export interface IngressRouteTCPSpecRoutesArgs {
            /**
             * Match defines the router's rule.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rule_1
             */
            match: pulumi.Input<string>;
            /**
             * Middlewares defines the list of references to MiddlewareTCP resources.
             */
            middlewares?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesMiddlewaresArgs>[]>;
            /**
             * Priority defines the router's priority.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#priority_1
             */
            priority?: pulumi.Input<number>;
            /**
             * Services defines the list of TCP services.
             */
            services?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesServicesArgs>[]>;
            /**
             * Syntax defines the router's rule syntax.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rulesyntax_1
             */
            syntax?: pulumi.Input<string>;
        }

        /**
         * ObjectReference is a generic reference to a Traefik resource.
         */
        export interface IngressRouteTCPSpecRoutesMiddlewaresArgs {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * ServiceTCP defines an upstream TCP service to proxy traffic to.
         */
        export interface IngressRouteTCPSpecRoutesServicesArgs {
            /**
             * Name defines the name of the referenced Kubernetes Service.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service.
             */
            namespace?: pulumi.Input<string>;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: pulumi.Input<number | string>;
            /**
             * ProxyProtocol defines the PROXY protocol configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#proxy-protocol
             */
            proxyProtocol?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesServicesProxyProtocolArgs>;
            /**
             * ServersTransport defines the name of ServersTransportTCP resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates
             * it has closed the writing capability of its connection, to close the reading capability as well,
             * hence fully terminating the connection.
             * It is a duration in milliseconds, defaulting to 100.
             * A negative value means an infinite deadline (i.e. the reading capability is never closed).
             * Deprecated: TerminationDelay is not supported APIVersion traefik.io/v1, please use ServersTransport to configure the TerminationDelay instead.
             */
            terminationDelay?: pulumi.Input<number>;
            /**
             * TLS determines whether to use TLS when dialing with the backend.
             */
            tls?: pulumi.Input<boolean>;
            /**
             * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * ProxyProtocol defines the PROXY protocol configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#proxy-protocol
         */
        export interface IngressRouteTCPSpecRoutesServicesProxyProtocolArgs {
            /**
             * Version defines the PROXY Protocol version to use.
             */
            version?: pulumi.Input<number>;
        }

        /**
         * TLS defines the TLS configuration on a layer 4 / TCP Route.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls_1
         */
        export interface IngressRouteTCPSpecTlsArgs {
            /**
             * CertResolver defines the name of the certificate resolver to use.
             * Cert resolvers have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/https/acme/#certificate-resolvers
             */
            certResolver?: pulumi.Input<string>;
            /**
             * Domains defines the list of domains that will be used to issue certificates.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#domains
             */
            domains?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecTlsDomainsArgs>[]>;
            /**
             * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
             * If not defined, the `default` TLSOption is used.
             * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options
             */
            options?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecTlsOptionsArgs>;
            /**
             * Passthrough defines whether a TLS router will terminate the TLS connection.
             */
            passthrough?: pulumi.Input<boolean>;
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName?: pulumi.Input<string>;
            /**
             * Store defines the reference to the TLSStore, that will be used to store certificates.
             * Please note that only `default` TLSStore can be used.
             */
            store?: pulumi.Input<inputs.traefik.v1alpha1.IngressRouteTCPSpecTlsStoreArgs>;
        }

        /**
         * Domain holds a domain name with SANs.
         */
        export interface IngressRouteTCPSpecTlsDomainsArgs {
            /**
             * Main defines the main domain name.
             */
            main?: pulumi.Input<string>;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
         * If not defined, the `default` TLSOption is used.
         * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options
         */
        export interface IngressRouteTCPSpecTlsOptionsArgs {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * Store defines the reference to the TLSStore, that will be used to store certificates.
         * Please note that only `default` TLSStore can be used.
         */
        export interface IngressRouteTCPSpecTlsStoreArgs {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.
         */
        export interface IngressRouteUDPSpecArgs {
            /**
             * EntryPoints defines the list of entry point names to bind to.
             * Entry points have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/
             * Default: all.
             */
            entryPoints?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Routes defines the list of routes.
             */
            routes: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteUDPSpecRoutesArgs>[]>;
        }

        /**
         * RouteUDP holds the UDP route configuration.
         */
        export interface IngressRouteUDPSpecRoutesArgs {
            /**
             * Services defines the list of UDP services.
             */
            services?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.IngressRouteUDPSpecRoutesServicesArgs>[]>;
        }

        /**
         * ServiceUDP defines an upstream UDP service to proxy traffic to.
         */
        export interface IngressRouteUDPSpecRoutesServicesArgs {
            /**
             * Name defines the name of the referenced Kubernetes Service.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service.
             */
            namespace?: pulumi.Input<string>;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: pulumi.Input<number | string>;
            /**
             * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * MiddlewareSpec defines the desired state of a Middleware.
         */
        export interface MiddlewareSpecArgs {
            /**
             * AddPrefix holds the add prefix middleware configuration.
             * This middleware updates the path of a request before forwarding it.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/addprefix/
             */
            addPrefix?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecAddPrefixArgs>;
            /**
             * BasicAuth holds the basic auth middleware configuration.
             * This middleware restricts access to your services to known users.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/
             */
            basicAuth?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecBasicAuthArgs>;
            /**
             * Buffering holds the buffering middleware configuration.
             * This middleware retries or limits the size of requests that can be forwarded to backends.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#maxrequestbodybytes
             */
            buffering?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecBufferingArgs>;
            /**
             * Chain holds the configuration of the chain middleware.
             * This middleware enables to define reusable combinations of other pieces of middleware.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/chain/
             */
            chain?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecChainArgs>;
            /**
             * CircuitBreaker holds the circuit breaker configuration.
             */
            circuitBreaker?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecCircuitBreakerArgs>;
            /**
             * Compress holds the compress middleware configuration.
             * This middleware compresses responses before sending them to the client, using gzip compression.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/compress/
             */
            compress?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecCompressArgs>;
            /**
             * ContentType holds the content-type middleware configuration.
             * This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
             */
            contentType?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecContentTypeArgs>;
            /**
             * DigestAuth holds the digest auth middleware configuration.
             * This middleware restricts access to your services to known users.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/digestauth/
             */
            digestAuth?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecDigestAuthArgs>;
            /**
             * ErrorPage holds the custom error middleware configuration.
             * This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/
             */
            errors?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsArgs>;
            /**
             * ForwardAuth holds the forward auth middleware configuration.
             * This middleware delegates the request authentication to a Service.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/
             */
            forwardAuth?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecForwardAuthArgs>;
            /**
             * GrpcWeb holds the gRPC web middleware configuration.
             * This middleware converts a gRPC web request to an HTTP/2 gRPC request.
             */
            grpcWeb?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecGrpcWebArgs>;
            /**
             * Headers holds the headers middleware configuration.
             * This middleware manages the requests and responses headers.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/headers/#customrequestheaders
             */
            headers?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecHeadersArgs>;
            /**
             * InFlightReq holds the in-flight request middleware configuration.
             * This middleware limits the number of requests being processed and served concurrently.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/
             */
            inFlightReq?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecInFlightReqArgs>;
            /**
             * IPAllowList holds the IP allowlist middleware configuration.
             * This middleware limits allowed requests based on the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/
             */
            ipAllowList?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecIpAllowListArgs>;
            /**
             * Deprecated: please use IPAllowList instead.
             */
            ipWhiteList?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecIpWhiteListArgs>;
            /**
             * PassTLSClientCert holds the pass TLS client cert middleware configuration.
             * This middleware adds the selected data from the passed client TLS certificate to a header.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/passtlsclientcert/
             */
            passTLSClientCert?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecPassTlsclientCertArgs>;
            /**
             * Plugin defines the middleware plugin configuration.
             * More info: https://doc.traefik.io/traefik/plugins/
             */
            plugin?: pulumi.Input<{[key: string]: pulumi.Input<{[key: string]: any}>}>;
            /**
             * RateLimit holds the rate limit configuration.
             * This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ratelimit/
             */
            rateLimit?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRateLimitArgs>;
            /**
             * RedirectRegex holds the redirect regex middleware configuration.
             * This middleware redirects a request using regex matching and replacement.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectregex/#regex
             */
            redirectRegex?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRedirectRegexArgs>;
            /**
             * RedirectScheme holds the redirect scheme middleware configuration.
             * This middleware redirects requests from a scheme/port to another.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectscheme/
             */
            redirectScheme?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRedirectSchemeArgs>;
            /**
             * ReplacePath holds the replace path middleware configuration.
             * This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepath/
             */
            replacePath?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecReplacePathArgs>;
            /**
             * ReplacePathRegex holds the replace path regex middleware configuration.
             * This middleware replaces the path of a URL using regex matching and replacement.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepathregex/
             */
            replacePathRegex?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecReplacePathRegexArgs>;
            /**
             * Retry holds the retry middleware configuration.
             * This middleware reissues requests a given number of times to a backend server if that server does not reply.
             * As soon as the server answers, the middleware stops retrying, regardless of the response status.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/retry/
             */
            retry?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRetryArgs>;
            /**
             * StripPrefix holds the strip prefix middleware configuration.
             * This middleware removes the specified prefixes from the URL path.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefix/
             */
            stripPrefix?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecStripPrefixArgs>;
            /**
             * StripPrefixRegex holds the strip prefix regex middleware configuration.
             * This middleware removes the matching prefixes from the URL path.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefixregex/
             */
            stripPrefixRegex?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecStripPrefixRegexArgs>;
        }

        /**
         * AddPrefix holds the add prefix middleware configuration.
         * This middleware updates the path of a request before forwarding it.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/addprefix/
         */
        export interface MiddlewareSpecAddPrefixArgs {
            /**
             * Prefix is the string to add before the current path in the requested URL.
             * It should include a leading slash (/).
             */
            prefix?: pulumi.Input<string>;
        }

        /**
         * BasicAuth holds the basic auth middleware configuration.
         * This middleware restricts access to your services to known users.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/
         */
        export interface MiddlewareSpecBasicAuthArgs {
            /**
             * HeaderField defines a header field to store the authenticated user.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/#headerfield
             */
            headerField?: pulumi.Input<string>;
            /**
             * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.
             * Default: traefik.
             */
            realm?: pulumi.Input<string>;
            /**
             * RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service.
             * Default: false.
             */
            removeHeader?: pulumi.Input<boolean>;
            /**
             * Secret is the name of the referenced Kubernetes Secret containing user credentials.
             */
            secret?: pulumi.Input<string>;
        }

        /**
         * Buffering holds the buffering middleware configuration.
         * This middleware retries or limits the size of requests that can be forwarded to backends.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#maxrequestbodybytes
         */
        export interface MiddlewareSpecBufferingArgs {
            /**
             * MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes).
             * If the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response.
             * Default: 0 (no maximum).
             */
            maxRequestBodyBytes?: pulumi.Input<number>;
            /**
             * MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes).
             * If the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead.
             * Default: 0 (no maximum).
             */
            maxResponseBodyBytes?: pulumi.Input<number>;
            /**
             * MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory.
             * Default: 1048576 (1Mi).
             */
            memRequestBodyBytes?: pulumi.Input<number>;
            /**
             * MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory.
             * Default: 1048576 (1Mi).
             */
            memResponseBodyBytes?: pulumi.Input<number>;
            /**
             * RetryExpression defines the retry conditions.
             * It is a logical combination of functions with operators AND (&&) and OR (||).
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#retryexpression
             */
            retryExpression?: pulumi.Input<string>;
        }

        /**
         * Chain holds the configuration of the chain middleware.
         * This middleware enables to define reusable combinations of other pieces of middleware.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/chain/
         */
        export interface MiddlewareSpecChainArgs {
            /**
             * Middlewares is the list of MiddlewareRef which composes the chain.
             */
            middlewares?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecChainMiddlewaresArgs>[]>;
        }

        /**
         * MiddlewareRef is a reference to a Middleware resource.
         */
        export interface MiddlewareSpecChainMiddlewaresArgs {
            /**
             * Name defines the name of the referenced Middleware resource.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Middleware resource.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * CircuitBreaker holds the circuit breaker configuration.
         */
        export interface MiddlewareSpecCircuitBreakerArgs {
            /**
             * CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).
             */
            checkPeriod?: pulumi.Input<number | string>;
            /**
             * Expression is the condition that triggers the tripped state.
             */
            expression?: pulumi.Input<string>;
            /**
             * FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).
             */
            fallbackDuration?: pulumi.Input<number | string>;
            /**
             * RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).
             */
            recoveryDuration?: pulumi.Input<number | string>;
            /**
             * ResponseCode is the status code that the circuit breaker will return while it is in the open state.
             */
            responseCode?: pulumi.Input<number>;
        }

        /**
         * Compress holds the compress middleware configuration.
         * This middleware compresses responses before sending them to the client, using gzip compression.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/compress/
         */
        export interface MiddlewareSpecCompressArgs {
            /**
             * ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.
             * `application/grpc` is always excluded.
             */
            excludedContentTypes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IncludedContentTypes defines the list of content types to compare the Content-Type header of the responses before compressing.
             */
            includedContentTypes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed.
             * Default: 1024.
             */
            minResponseBodyBytes?: pulumi.Input<number>;
        }

        /**
         * ContentType holds the content-type middleware configuration.
         * This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
         */
        export interface MiddlewareSpecContentTypeArgs {
            /**
             * AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend,
             * be automatically set to a value derived from the contents of the response.
             * Deprecated: AutoDetect option is deprecated, Content-Type middleware is only meant to be used to enable the content-type detection, please remove any usage of this option.
             */
            autoDetect?: pulumi.Input<boolean>;
        }

        /**
         * DigestAuth holds the digest auth middleware configuration.
         * This middleware restricts access to your services to known users.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/digestauth/
         */
        export interface MiddlewareSpecDigestAuthArgs {
            /**
             * HeaderField defines a header field to store the authenticated user.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/#headerfield
             */
            headerField?: pulumi.Input<string>;
            /**
             * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.
             * Default: traefik.
             */
            realm?: pulumi.Input<string>;
            /**
             * RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.
             */
            removeHeader?: pulumi.Input<boolean>;
            /**
             * Secret is the name of the referenced Kubernetes Secret containing user credentials.
             */
            secret?: pulumi.Input<string>;
        }

        /**
         * ErrorPage holds the custom error middleware configuration.
         * This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/
         */
        export interface MiddlewareSpecErrorsArgs {
            /**
             * Query defines the URL for the error page (hosted by service).
             * The {status} variable can be used in order to insert the status code in the URL.
             */
            query?: pulumi.Input<string>;
            /**
             * Service defines the reference to a Kubernetes Service that will serve the error page.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/#service
             */
            service?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceArgs>;
            /**
             * Status defines which status or range of statuses should result in an error page.
             * It can be either a status code as a number (500),
             * as multiple comma-separated numbers (500,502),
             * as ranges by separating two codes with a dash (500-599),
             * or a combination of the two (404,418,500-599).
             */
            status?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Service defines the reference to a Kubernetes Service that will serve the error page.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/#service
         */
        export interface MiddlewareSpecErrorsServiceArgs {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: pulumi.Input<string>;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: pulumi.Input<boolean>;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port?: pulumi.Input<number | string>;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceResponseForwardingArgs>;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: pulumi.Input<string>;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * Sticky defines the sticky sessions configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceStickyArgs>;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy?: pulumi.Input<string>;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface MiddlewareSpecErrorsServiceResponseForwardingArgs {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval?: pulumi.Input<string>;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
         */
        export interface MiddlewareSpecErrorsServiceStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface MiddlewareSpecErrorsServiceStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: pulumi.Input<number>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }

        /**
         * ForwardAuth holds the forward auth middleware configuration.
         * This middleware delegates the request authentication to a Service.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/
         */
        export interface MiddlewareSpecForwardAuthArgs {
            /**
             * AddAuthCookiesToResponse defines the list of cookies to copy from the authentication server response to the response.
             */
            addAuthCookiesToResponse?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Address defines the authentication server address.
             */
            address?: pulumi.Input<string>;
            /**
             * AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server.
             * If not set or empty then all request headers are passed.
             */
            authRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.
             */
            authResponseHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/#authresponseheadersregex
             */
            authResponseHeadersRegex?: pulumi.Input<string>;
            /**
             * TLS defines the configuration used to secure the connection to the authentication server.
             */
            tls?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecForwardAuthTlsArgs>;
            /**
             * TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.
             */
            trustForwardHeader?: pulumi.Input<boolean>;
        }

        /**
         * TLS defines the configuration used to secure the connection to the authentication server.
         */
        export interface MiddlewareSpecForwardAuthTlsArgs {
            /**
             * Deprecated: TLS client authentication is a server side option (see https://github.com/golang/go/blob/740a490f71d026bb7d2d13cb8fa2d6d6e0572b70/src/crypto/tls/common.go#L634).
             */
            caOptional?: pulumi.Input<boolean>;
            /**
             * CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate.
             * The CA certificate is extracted from key `tls.ca` or `ca.crt`.
             */
            caSecret?: pulumi.Input<string>;
            /**
             * CertSecret is the name of the referenced Kubernetes Secret containing the client certificate.
             * The client certificate is extracted from the keys `tls.crt` and `tls.key`.
             */
            certSecret?: pulumi.Input<string>;
            /**
             * InsecureSkipVerify defines whether the server certificates should be validated.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
        }

        /**
         * GrpcWeb holds the gRPC web middleware configuration.
         * This middleware converts a gRPC web request to an HTTP/2 gRPC request.
         */
        export interface MiddlewareSpecGrpcWebArgs {
            /**
             * AllowOrigins is a list of allowable origins.
             * Can also be a wildcard origin "*".
             */
            allowOrigins?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Headers holds the headers middleware configuration.
         * This middleware manages the requests and responses headers.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/headers/#customrequestheaders
         */
        export interface MiddlewareSpecHeadersArgs {
            /**
             * AccessControlAllowCredentials defines whether the request can include user credentials.
             */
            accessControlAllowCredentials?: pulumi.Input<boolean>;
            /**
             * AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.
             */
            accessControlAllowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.
             */
            accessControlAllowMethods?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin "*".
             */
            accessControlAllowOriginList?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).
             */
            accessControlAllowOriginListRegex?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.
             */
            accessControlExposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AccessControlMaxAge defines the time that a preflight request may be cached.
             */
            accessControlMaxAge?: pulumi.Input<number>;
            /**
             * AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.
             */
            addVaryHeader?: pulumi.Input<boolean>;
            /**
             * AllowedHosts defines the fully qualified list of allowed domain names.
             */
            allowedHosts?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.
             */
            browserXssFilter?: pulumi.Input<boolean>;
            /**
             * ContentSecurityPolicy defines the Content-Security-Policy header value.
             */
            contentSecurityPolicy?: pulumi.Input<string>;
            /**
             * ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.
             */
            contentTypeNosniff?: pulumi.Input<boolean>;
            /**
             * CustomBrowserXSSValue defines the X-XSS-Protection header value.
             * This overrides the BrowserXssFilter option.
             */
            customBrowserXSSValue?: pulumi.Input<string>;
            /**
             * CustomFrameOptionsValue defines the X-Frame-Options header value.
             * This overrides the FrameDeny option.
             */
            customFrameOptionsValue?: pulumi.Input<string>;
            /**
             * CustomRequestHeaders defines the header names and values to apply to the request.
             */
            customRequestHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * CustomResponseHeaders defines the header names and values to apply to the response.
             */
            customResponseHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Deprecated: FeaturePolicy option is deprecated, please use PermissionsPolicy instead.
             */
            featurePolicy?: pulumi.Input<string>;
            /**
             * ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.
             */
            forceSTSHeader?: pulumi.Input<boolean>;
            /**
             * FrameDeny defines whether to add the X-Frame-Options header with the DENY value.
             */
            frameDeny?: pulumi.Input<boolean>;
            /**
             * HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.
             */
            hostsProxyHeaders?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing.
             * Usually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain.
             * If you would like your development environment to mimic production with complete Host blocking, SSL redirects,
             * and STS headers, leave this as false.
             */
            isDevelopment?: pulumi.Input<boolean>;
            /**
             * PermissionsPolicy defines the Permissions-Policy header value.
             * This allows sites to control browser features.
             */
            permissionsPolicy?: pulumi.Input<string>;
            /**
             * PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.
             */
            publicKey?: pulumi.Input<string>;
            /**
             * ReferrerPolicy defines the Referrer-Policy header value.
             * This allows sites to control whether browsers forward the Referer header to other sites.
             */
            referrerPolicy?: pulumi.Input<string>;
            /**
             * Deprecated: SSLForceHost option is deprecated, please use RedirectRegex instead.
             */
            sslForceHost?: pulumi.Input<boolean>;
            /**
             * Deprecated: SSLHost option is deprecated, please use RedirectRegex instead.
             */
            sslHost?: pulumi.Input<string>;
            /**
             * SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request.
             * It can be useful when using other proxies (example: "X-Forwarded-Proto": "https").
             */
            sslProxyHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Deprecated: SSLRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.
             */
            sslRedirect?: pulumi.Input<boolean>;
            /**
             * Deprecated: SSLTemporaryRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.
             */
            sslTemporaryRedirect?: pulumi.Input<boolean>;
            /**
             * STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.
             */
            stsIncludeSubdomains?: pulumi.Input<boolean>;
            /**
             * STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.
             */
            stsPreload?: pulumi.Input<boolean>;
            /**
             * STSSeconds defines the max-age of the Strict-Transport-Security header.
             * If set to 0, the header is not set.
             */
            stsSeconds?: pulumi.Input<number>;
        }

        /**
         * InFlightReq holds the in-flight request middleware configuration.
         * This middleware limits the number of requests being processed and served concurrently.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/
         */
        export interface MiddlewareSpecInFlightReqArgs {
            /**
             * Amount defines the maximum amount of allowed simultaneous in-flight request.
             * The middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).
             */
            amount?: pulumi.Input<number>;
            /**
             * SourceCriterion defines what criterion is used to group requests as originating from a common source.
             * If several strategies are defined at the same time, an error will be raised.
             * If none are set, the default is to use the requestHost.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/#sourcecriterion
             */
            sourceCriterion?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecInFlightReqSourceCriterionArgs>;
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source.
         * If several strategies are defined at the same time, an error will be raised.
         * If none are set, the default is to use the requestHost.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/#sourcecriterion
         */
        export interface MiddlewareSpecInFlightReqSourceCriterionArgs {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
             */
            ipStrategy?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecInFlightReqSourceCriterionIpStrategyArgs>;
            /**
             * RequestHeaderName defines the name of the header used to group incoming requests.
             */
            requestHeaderName?: pulumi.Input<string>;
            /**
             * RequestHost defines whether to consider the request Host as the source.
             */
            requestHost?: pulumi.Input<boolean>;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecInFlightReqSourceCriterionIpStrategyArgs {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: pulumi.Input<number>;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * IPAllowList holds the IP allowlist middleware configuration.
         * This middleware limits allowed requests based on the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/
         */
        export interface MiddlewareSpecIpAllowListArgs {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
             */
            ipStrategy?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecIpAllowListIpStrategyArgs>;
            /**
             * RejectStatusCode defines the HTTP status code used for refused requests.
             * If not set, the default is 403 (Forbidden).
             */
            rejectStatusCode?: pulumi.Input<number>;
            /**
             * SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecIpAllowListIpStrategyArgs {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: pulumi.Input<number>;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Deprecated: please use IPAllowList instead.
         */
        export interface MiddlewareSpecIpWhiteListArgs {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
             */
            ipStrategy?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecIpWhiteListIpStrategyArgs>;
            /**
             * SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation). Required.
             */
            sourceRange?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecIpWhiteListIpStrategyArgs {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: pulumi.Input<number>;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PassTLSClientCert holds the pass TLS client cert middleware configuration.
         * This middleware adds the selected data from the passed client TLS certificate to a header.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/passtlsclientcert/
         */
        export interface MiddlewareSpecPassTlsclientCertArgs {
            /**
             * Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
             */
            info?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecPassTlsclientCertInfoArgs>;
            /**
             * PEM sets the X-Forwarded-Tls-Client-Cert header with the certificate.
             */
            pem?: pulumi.Input<boolean>;
        }

        /**
         * Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTlsclientCertInfoArgs {
            /**
             * Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
             */
            issuer?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecPassTlsclientCertInfoIssuerArgs>;
            /**
             * NotAfter defines whether to add the Not After information from the Validity part.
             */
            notAfter?: pulumi.Input<boolean>;
            /**
             * NotBefore defines whether to add the Not Before information from the Validity part.
             */
            notBefore?: pulumi.Input<boolean>;
            /**
             * Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.
             */
            sans?: pulumi.Input<boolean>;
            /**
             * SerialNumber defines whether to add the client serialNumber information.
             */
            serialNumber?: pulumi.Input<boolean>;
            /**
             * Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
             */
            subject?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecPassTlsclientCertInfoSubjectArgs>;
        }

        /**
         * Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTlsclientCertInfoIssuerArgs {
            /**
             * CommonName defines whether to add the organizationalUnit information into the issuer.
             */
            commonName?: pulumi.Input<boolean>;
            /**
             * Country defines whether to add the country information into the issuer.
             */
            country?: pulumi.Input<boolean>;
            /**
             * DomainComponent defines whether to add the domainComponent information into the issuer.
             */
            domainComponent?: pulumi.Input<boolean>;
            /**
             * Locality defines whether to add the locality information into the issuer.
             */
            locality?: pulumi.Input<boolean>;
            /**
             * Organization defines whether to add the organization information into the issuer.
             */
            organization?: pulumi.Input<boolean>;
            /**
             * Province defines whether to add the province information into the issuer.
             */
            province?: pulumi.Input<boolean>;
            /**
             * SerialNumber defines whether to add the serialNumber information into the issuer.
             */
            serialNumber?: pulumi.Input<boolean>;
        }

        /**
         * Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTlsclientCertInfoSubjectArgs {
            /**
             * CommonName defines whether to add the organizationalUnit information into the subject.
             */
            commonName?: pulumi.Input<boolean>;
            /**
             * Country defines whether to add the country information into the subject.
             */
            country?: pulumi.Input<boolean>;
            /**
             * DomainComponent defines whether to add the domainComponent information into the subject.
             */
            domainComponent?: pulumi.Input<boolean>;
            /**
             * Locality defines whether to add the locality information into the subject.
             */
            locality?: pulumi.Input<boolean>;
            /**
             * Organization defines whether to add the organization information into the subject.
             */
            organization?: pulumi.Input<boolean>;
            /**
             * OrganizationalUnit defines whether to add the organizationalUnit information into the subject.
             */
            organizationalUnit?: pulumi.Input<boolean>;
            /**
             * Province defines whether to add the province information into the subject.
             */
            province?: pulumi.Input<boolean>;
            /**
             * SerialNumber defines whether to add the serialNumber information into the subject.
             */
            serialNumber?: pulumi.Input<boolean>;
        }

        /**
         * RateLimit holds the rate limit configuration.
         * This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ratelimit/
         */
        export interface MiddlewareSpecRateLimitArgs {
            /**
             * Average is the maximum rate, by default in requests/s, allowed for the given source.
             * It defaults to 0, which means no rate limiting.
             * The rate is actually defined by dividing Average by Period. So for a rate below 1req/s,
             * one needs to define a Period larger than a second.
             */
            average?: pulumi.Input<number>;
            /**
             * Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time.
             * It defaults to 1.
             */
            burst?: pulumi.Input<number>;
            /**
             * Period, in combination with Average, defines the actual maximum rate, such as:
             * r = Average / Period. It defaults to a second.
             */
            period?: pulumi.Input<number | string>;
            /**
             * SourceCriterion defines what criterion is used to group requests as originating from a common source.
             * If several strategies are defined at the same time, an error will be raised.
             * If none are set, the default is to use the request's remote address field (as an ipStrategy).
             */
            sourceCriterion?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRateLimitSourceCriterionArgs>;
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source.
         * If several strategies are defined at the same time, an error will be raised.
         * If none are set, the default is to use the request's remote address field (as an ipStrategy).
         */
        export interface MiddlewareSpecRateLimitSourceCriterionArgs {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
             */
            ipStrategy?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareSpecRateLimitSourceCriterionIpStrategyArgs>;
            /**
             * RequestHeaderName defines the name of the header used to group incoming requests.
             */
            requestHeaderName?: pulumi.Input<string>;
            /**
             * RequestHost defines whether to consider the request Host as the source.
             */
            requestHost?: pulumi.Input<boolean>;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecRateLimitSourceCriterionIpStrategyArgs {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: pulumi.Input<number>;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * RedirectRegex holds the redirect regex middleware configuration.
         * This middleware redirects a request using regex matching and replacement.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectregex/#regex
         */
        export interface MiddlewareSpecRedirectRegexArgs {
            /**
             * Permanent defines whether the redirection is permanent (301).
             */
            permanent?: pulumi.Input<boolean>;
            /**
             * Regex defines the regex used to match and capture elements from the request URL.
             */
            regex?: pulumi.Input<string>;
            /**
             * Replacement defines how to modify the URL to have the new target URL.
             */
            replacement?: pulumi.Input<string>;
        }

        /**
         * RedirectScheme holds the redirect scheme middleware configuration.
         * This middleware redirects requests from a scheme/port to another.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectscheme/
         */
        export interface MiddlewareSpecRedirectSchemeArgs {
            /**
             * Permanent defines whether the redirection is permanent (301).
             */
            permanent?: pulumi.Input<boolean>;
            /**
             * Port defines the port of the new URL.
             */
            port?: pulumi.Input<string>;
            /**
             * Scheme defines the scheme of the new URL.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * ReplacePath holds the replace path middleware configuration.
         * This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepath/
         */
        export interface MiddlewareSpecReplacePathArgs {
            /**
             * Path defines the path to use as replacement in the request URL.
             */
            path?: pulumi.Input<string>;
        }

        /**
         * ReplacePathRegex holds the replace path regex middleware configuration.
         * This middleware replaces the path of a URL using regex matching and replacement.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepathregex/
         */
        export interface MiddlewareSpecReplacePathRegexArgs {
            /**
             * Regex defines the regular expression used to match and capture the path from the request URL.
             */
            regex?: pulumi.Input<string>;
            /**
             * Replacement defines the replacement path format, which can include captured variables.
             */
            replacement?: pulumi.Input<string>;
        }

        /**
         * Retry holds the retry middleware configuration.
         * This middleware reissues requests a given number of times to a backend server if that server does not reply.
         * As soon as the server answers, the middleware stops retrying, regardless of the response status.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/retry/
         */
        export interface MiddlewareSpecRetryArgs {
            /**
             * Attempts defines how many times the request should be retried.
             */
            attempts?: pulumi.Input<number>;
            /**
             * InitialInterval defines the first wait time in the exponential backoff series.
             * The maximum interval is calculated as twice the initialInterval.
             * If unspecified, requests will be retried immediately.
             * The value of initialInterval should be provided in seconds or as a valid duration format,
             * see https://pkg.go.dev/time#ParseDuration.
             */
            initialInterval?: pulumi.Input<number | string>;
        }

        /**
         * StripPrefix holds the strip prefix middleware configuration.
         * This middleware removes the specified prefixes from the URL path.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefix/
         */
        export interface MiddlewareSpecStripPrefixArgs {
            /**
             * Deprecated: ForceSlash option is deprecated, please remove any usage of this option.
             * ForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary.
             * Default: true.
             */
            forceSlash?: pulumi.Input<boolean>;
            /**
             * Prefixes defines the prefixes to strip from the request URL.
             */
            prefixes?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * StripPrefixRegex holds the strip prefix regex middleware configuration.
         * This middleware removes the matching prefixes from the URL path.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefixregex/
         */
        export interface MiddlewareSpecStripPrefixRegexArgs {
            /**
             * Regex defines the regular expression to match the path prefix from the request URL.
             */
            regex?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.
         */
        export interface MiddlewareTCPSpecArgs {
            /**
             * InFlightConn defines the InFlightConn middleware configuration.
             */
            inFlightConn?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareTCPSpecInFlightConnArgs>;
            /**
             * IPAllowList defines the IPAllowList middleware configuration.
             * This middleware accepts/refuses connections based on the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipallowlist/
             */
            ipAllowList?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareTCPSpecIpAllowListArgs>;
            /**
             * IPWhiteList defines the IPWhiteList middleware configuration.
             * This middleware accepts/refuses connections based on the client IP.
             * Deprecated: please use IPAllowList instead.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipwhitelist/
             */
            ipWhiteList?: pulumi.Input<inputs.traefik.v1alpha1.MiddlewareTCPSpecIpWhiteListArgs>;
        }

        /**
         * InFlightConn defines the InFlightConn middleware configuration.
         */
        export interface MiddlewareTCPSpecInFlightConnArgs {
            /**
             * Amount defines the maximum amount of allowed simultaneous connections.
             * The middleware closes the connection if there are already amount connections opened.
             */
            amount?: pulumi.Input<number>;
        }

        /**
         * IPAllowList defines the IPAllowList middleware configuration.
         * This middleware accepts/refuses connections based on the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipallowlist/
         */
        export interface MiddlewareTCPSpecIpAllowListArgs {
            /**
             * SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * IPWhiteList defines the IPWhiteList middleware configuration.
         * This middleware accepts/refuses connections based on the client IP.
         * Deprecated: please use IPAllowList instead.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipwhitelist/
         */
        export interface MiddlewareTCPSpecIpWhiteListArgs {
            /**
             * SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * ServersTransportSpec defines the desired state of a ServersTransport.
         */
        export interface ServersTransportSpecArgs {
            /**
             * CertificatesSecrets defines a list of secret storing client certificates for mTLS.
             */
            certificatesSecrets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * DisableHTTP2 disables HTTP/2 for connections with backend servers.
             */
            disableHTTP2?: pulumi.Input<boolean>;
            /**
             * ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.
             */
            forwardingTimeouts?: pulumi.Input<inputs.traefik.v1alpha1.ServersTransportSpecForwardingTimeoutsArgs>;
            /**
             * InsecureSkipVerify disables SSL certificate verification.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.
             */
            maxIdleConnsPerHost?: pulumi.Input<number>;
            /**
             * PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.
             */
            peerCertURI?: pulumi.Input<string>;
            /**
             * RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.
             */
            rootCAsSecrets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ServerName defines the server name used to contact the server.
             */
            serverName?: pulumi.Input<string>;
            /**
             * Spiffe defines the SPIFFE configuration.
             */
            spiffe?: pulumi.Input<inputs.traefik.v1alpha1.ServersTransportSpecSpiffeArgs>;
        }

        /**
         * ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.
         */
        export interface ServersTransportSpecForwardingTimeoutsArgs {
            /**
             * DialTimeout is the amount of time to wait until a connection to a backend server can be established.
             */
            dialTimeout?: pulumi.Input<number | string>;
            /**
             * IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.
             */
            idleConnTimeout?: pulumi.Input<number | string>;
            /**
             * PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.
             */
            pingTimeout?: pulumi.Input<number | string>;
            /**
             * ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.
             */
            readIdleTimeout?: pulumi.Input<number | string>;
            /**
             * ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).
             */
            responseHeaderTimeout?: pulumi.Input<number | string>;
        }

        /**
         * Spiffe defines the SPIFFE configuration.
         */
        export interface ServersTransportSpecSpiffeArgs {
            /**
             * IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).
             */
            ids?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * TrustDomain defines the allowed SPIFFE trust domain.
             */
            trustDomain?: pulumi.Input<string>;
        }

        /**
         * ServersTransportTCPSpec defines the desired state of a ServersTransportTCP.
         */
        export interface ServersTransportTCPSpecArgs {
            /**
             * DialKeepAlive is the interval between keep-alive probes for an active network connection. If zero, keep-alive probes are sent with a default value (currently 15 seconds), if supported by the protocol and operating system. Network protocols or operating systems that do not support keep-alives ignore this field. If negative, keep-alive probes are disabled.
             */
            dialKeepAlive?: pulumi.Input<number | string>;
            /**
             * DialTimeout is the amount of time to wait until a connection to a backend server can be established.
             */
            dialTimeout?: pulumi.Input<number | string>;
            /**
             * TerminationDelay defines the delay to wait before fully terminating the connection, after one connected peer has closed its writing capability.
             */
            terminationDelay?: pulumi.Input<number | string>;
            /**
             * TLS defines the TLS configuration
             */
            tls?: pulumi.Input<inputs.traefik.v1alpha1.ServersTransportTCPSpecTlsArgs>;
        }

        /**
         * TLS defines the TLS configuration
         */
        export interface ServersTransportTCPSpecTlsArgs {
            /**
             * CertificatesSecrets defines a list of secret storing client certificates for mTLS.
             */
            certificatesSecrets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * InsecureSkipVerify disables TLS certificate verification.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.
             * PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.
             */
            peerCertURI?: pulumi.Input<string>;
            /**
             * RootCAsSecrets defines a list of CA secret used to validate self-signed certificates.
             */
            rootCAsSecrets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ServerName defines the server name used to contact the server.
             */
            serverName?: pulumi.Input<string>;
            /**
             * Spiffe defines the SPIFFE configuration.
             */
            spiffe?: pulumi.Input<inputs.traefik.v1alpha1.ServersTransportTCPSpecTlsSpiffeArgs>;
        }

        /**
         * Spiffe defines the SPIFFE configuration.
         */
        export interface ServersTransportTCPSpecTlsSpiffeArgs {
            /**
             * IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).
             */
            ids?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * TrustDomain defines the allowed SPIFFE trust domain.
             */
            trustDomain?: pulumi.Input<string>;
        }

        /**
         * TLSOptionSpec defines the desired state of a TLSOption.
         */
        export interface TLSOptionSpecArgs {
            /**
             * ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference.
             * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#alpn-protocols
             */
            alpnProtocols?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2.
             * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#cipher-suites
             */
            cipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ClientAuth defines the server's policy for TLS Client Authentication.
             */
            clientAuth?: pulumi.Input<inputs.traefik.v1alpha1.TLSOptionSpecClientAuthArgs>;
            /**
             * CurvePreferences defines the preferred elliptic curves in a specific order.
             * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#curve-preferences
             */
            curvePreferences?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxVersion defines the maximum TLS version that Traefik will accept.
             * Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
             * Default: None.
             */
            maxVersion?: pulumi.Input<string>;
            /**
             * MinVersion defines the minimum TLS version that Traefik will accept.
             * Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
             * Default: VersionTLS10.
             */
            minVersion?: pulumi.Input<string>;
            /**
             * PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's.
             * It is enabled automatically when minVersion or maxVersion is set.
             * Deprecated: https://github.com/golang/go/issues/45430
             */
            preferServerCipherSuites?: pulumi.Input<boolean>;
            /**
             * SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.
             */
            sniStrict?: pulumi.Input<boolean>;
        }

        /**
         * ClientAuth defines the server's policy for TLS Client Authentication.
         */
        export interface TLSOptionSpecClientAuthArgs {
            /**
             * ClientAuthType defines the client authentication type to apply.
             */
            clientAuthType?: pulumi.Input<string>;
            /**
             * SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.
             */
            secretNames?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * TLSStoreSpec defines the desired state of a TLSStore.
         */
        export interface TLSStoreSpecArgs {
            /**
             * Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.
             */
            certificates?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.TLSStoreSpecCertificatesArgs>[]>;
            /**
             * DefaultCertificate defines the default certificate configuration.
             */
            defaultCertificate?: pulumi.Input<inputs.traefik.v1alpha1.TLSStoreSpecDefaultCertificateArgs>;
            /**
             * DefaultGeneratedCert defines the default generated certificate configuration.
             */
            defaultGeneratedCert?: pulumi.Input<inputs.traefik.v1alpha1.TLSStoreSpecDefaultGeneratedCertArgs>;
        }

        /**
         * Certificate holds a secret name for the TLSStore resource.
         */
        export interface TLSStoreSpecCertificatesArgs {
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * DefaultCertificate defines the default certificate configuration.
         */
        export interface TLSStoreSpecDefaultCertificateArgs {
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * DefaultGeneratedCert defines the default generated certificate configuration.
         */
        export interface TLSStoreSpecDefaultGeneratedCertArgs {
            /**
             * Domain is the domain definition for the DefaultCertificate.
             */
            domain?: pulumi.Input<inputs.traefik.v1alpha1.TLSStoreSpecDefaultGeneratedCertDomainArgs>;
            /**
             * Resolver is the name of the resolver that will be used to issue the DefaultCertificate.
             */
            resolver?: pulumi.Input<string>;
        }

        /**
         * Domain is the domain definition for the DefaultCertificate.
         */
        export interface TLSStoreSpecDefaultGeneratedCertDomainArgs {
            /**
             * Main defines the main domain name.
             */
            main?: pulumi.Input<string>;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * TraefikServiceSpec defines the desired state of a TraefikService.
         */
        export interface TraefikServiceSpecArgs {
            /**
             * Mirroring defines the Mirroring service configuration.
             */
            mirroring?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringArgs>;
            /**
             * Weighted defines the Weighted Round Robin configuration.
             */
            weighted?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedArgs>;
        }

        /**
         * Mirroring defines the Mirroring service configuration.
         */
        export interface TraefikServiceSpecMirroringArgs {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: pulumi.Input<string>;
            /**
             * MaxBodySize defines the maximum size allowed for the body of the request.
             * If the body is larger, the request is not mirrored.
             * Default value is -1, which means unlimited size.
             */
            maxBodySize?: pulumi.Input<number>;
            /**
             * Mirrors defines the list of mirrors where Traefik will duplicate the traffic.
             */
            mirrors?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsArgs>[]>;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: pulumi.Input<string>;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: pulumi.Input<boolean>;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port?: pulumi.Input<number | string>;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringResponseForwardingArgs>;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: pulumi.Input<string>;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * Sticky defines the sticky sessions configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringStickyArgs>;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy?: pulumi.Input<string>;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * MirrorService holds the mirror configuration.
         */
        export interface TraefikServiceSpecMirroringMirrorsArgs {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: pulumi.Input<string>;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: pulumi.Input<boolean>;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader?: pulumi.Input<boolean>;
            /**
             * Percent defines the part of the traffic to mirror.
             * Supported values: 0 to 100.
             */
            percent?: pulumi.Input<number>;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port?: pulumi.Input<number | string>;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsResponseForwardingArgs>;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: pulumi.Input<string>;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * Sticky defines the sticky sessions configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsStickyArgs>;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy?: pulumi.Input<string>;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecMirroringMirrorsResponseForwardingArgs {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval?: pulumi.Input<string>;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecMirroringMirrorsStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecMirroringMirrorsStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: pulumi.Input<number>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecMirroringResponseForwardingArgs {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval?: pulumi.Input<string>;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecMirroringStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecMirroringStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecMirroringStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: pulumi.Input<number>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }

        /**
         * Weighted defines the Weighted Round Robin configuration.
         */
        export interface TraefikServiceSpecWeightedArgs {
            /**
             * Services defines the list of Kubernetes Service and/or TraefikService to load-balance, with weight.
             */
            services?: pulumi.Input<pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesArgs>[]>;
            /**
             * Sticky defines whether sticky sessions are enabled.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#stickiness-and-load-balancing
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedStickyArgs>;
        }

        /**
         * Service defines an upstream HTTP service to proxy traffic to.
         */
        export interface TraefikServiceSpecWeightedServicesArgs {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: pulumi.Input<string>;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: pulumi.Input<string>;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: pulumi.Input<boolean>;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader?: pulumi.Input<boolean>;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port?: pulumi.Input<number | string>;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesResponseForwardingArgs>;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: pulumi.Input<string>;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: pulumi.Input<string>;
            /**
             * Sticky defines the sticky sessions configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
             */
            sticky?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesStickyArgs>;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy?: pulumi.Input<string>;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: pulumi.Input<number>;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecWeightedServicesResponseForwardingArgs {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval?: pulumi.Input<string>;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecWeightedServicesStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecWeightedServicesStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: pulumi.Input<number>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }

        /**
         * Sticky defines whether sticky sessions are enabled.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#stickiness-and-load-balancing
         */
        export interface TraefikServiceSpecWeightedStickyArgs {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: pulumi.Input<inputs.traefik.v1alpha1.TraefikServiceSpecWeightedStickyCookieArgs>;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecWeightedStickyCookieArgs {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: pulumi.Input<boolean>;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: pulumi.Input<number>;
            /**
             * Name defines the Cookie name.
             */
            name?: pulumi.Input<string>;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: pulumi.Input<string>;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: pulumi.Input<boolean>;
        }
    }
}
