// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import * as utilities from "../utilities";

import {ObjectMeta} from "../meta/v1";

export namespace acme {
    export namespace v1 {
        export interface ChallengeSpec {
            /**
             * The URL to the ACME Authorization resource that this challenge is a part of.
             */
            authorizationURL: string;
            /**
             * dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a 'wildcard', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
             */
            dnsName: string;
            /**
             * References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
             */
            issuerRef: outputs.acme.v1.ChallengeSpecIssuerRef;
            /**
             * The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `<private key JWK thumbprint>.<key from acme server for challenge>`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `<private key JWK thumbprint>.<key from acme server for challenge>` text that must be set as the TXT record content.
             */
            key: string;
            /**
             * Contains the domain solving configuration that should be used to solve this challenge resource.
             */
            solver: outputs.acme.v1.ChallengeSpecSolver;
            /**
             * The ACME challenge token for this challenge. This is the raw value returned from the ACME server.
             */
            token: string;
            /**
             * The type of ACME challenge this resource represents. One of "HTTP-01" or "DNS-01".
             */
            type: string;
            /**
             * The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.
             */
            url: string;
            /**
             * wildcard will be true if this challenge is for a wildcard identifier, for example '*.example.com'.
             */
            wildcard?: boolean;
        }

        /**
         * References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
         */
        export interface ChallengeSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Contains the domain solving configuration that should be used to solve this challenge resource.
         */
        export interface ChallengeSpecSolver {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: outputs.acme.v1.ChallengeSpecSolverDns01;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: outputs.acme.v1.ChallengeSpecSolverHttp01;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: outputs.acme.v1.ChallengeSpecSolverSelector;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface ChallengeSpecSolverDns01 {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: outputs.acme.v1.ChallengeSpecSolverDns01AcmeDns;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: outputs.acme.v1.ChallengeSpecSolverDns01Akamai;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: outputs.acme.v1.ChallengeSpecSolverDns01AzureDns;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: outputs.acme.v1.ChallengeSpecSolverDns01CloudDns;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: outputs.acme.v1.ChallengeSpecSolverDns01Cloudflare;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: string;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: outputs.acme.v1.ChallengeSpecSolverDns01Digitalocean;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: outputs.acme.v1.ChallengeSpecSolverDns01Rfc2136;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: outputs.acme.v1.ChallengeSpecSolverDns01Route53;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: outputs.acme.v1.ChallengeSpecSolverDns01Webhook;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AcmeDns {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AcmeDnsAccountSecretRef;
            host: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AcmeDnsAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Akamai {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientSecretSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientTokenSecretRef;
            serviceConsumerDomain: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiAccessTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AzureDns {
            /**
             * Auth: Azure Service Principal: The ClientID of the Azure Service Principal used to authenticate with Azure DNS. If set, ClientSecret and TenantID must also be set.
             */
            clientID?: string;
            /**
             * Auth: Azure Service Principal: A reference to a Secret containing the password associated with the Service Principal. If set, ClientID and TenantID must also be set.
             */
            clientSecretSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01AzureDnsClientSecretSecretRef;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: string;
            /**
             * Auth: Azure Workload Identity or Azure Managed Service Identity: Settings to enable Azure Workload Identity or Azure Managed Service Identity If set, ClientID, ClientSecret and TenantID must not be set.
             */
            managedIdentity?: outputs.acme.v1.ChallengeSpecSolverDns01AzureDnsManagedIdentity;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * Auth: Azure Service Principal: The TenantID of the Azure Service Principal used to authenticate with Azure DNS. If set, ClientID and ClientSecret must also be set.
             */
            tenantID?: string;
        }

        /**
         * Auth: Azure Service Principal: A reference to a Secret containing the password associated with the Service Principal. If set, ClientID and TenantID must also be set.
         */
        export interface ChallengeSpecSolverDns01AzureDnsClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Auth: Azure Workload Identity or Azure Managed Service Identity: Settings to enable Azure Workload Identity or Azure Managed Service Identity If set, ClientID, ClientSecret and TenantID must not be set.
         */
        export interface ChallengeSpecSolverDns01AzureDnsManagedIdentity {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID Cannot be used for Azure Managed Service Identity
             */
            resourceID?: string;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01CloudDns {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: string;
            project: string;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01CloudDnsServiceAccountSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01CloudDnsServiceAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Cloudflare {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01CloudflareApiKeySecretRef;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01CloudflareApiTokenSecretRef;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: string;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface ChallengeSpecSolverDns01CloudflareApiKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ChallengeSpecSolverDns01CloudflareApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Digitalocean {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: outputs.acme.v1.ChallengeSpecSolverDns01DigitaloceanTokenSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01DigitaloceanTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Rfc2136 {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: string;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: string;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ChallengeSpecSolverDns01Rfc2136TsigSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Route53 {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: string;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01Route53AccessKeyIdsecretRef;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: string;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: string;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: outputs.acme.v1.ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53AccessKeyIdsecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53SecretAccessKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Webhook {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ChallengeSpecSolverHttp01 {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHttproute;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: outputs.acme.v1.ChallengeSpecSolverHttp01Ingress;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ChallengeSpecSolverHttp01GatewayHttproute {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: outputs.acme.v1.ChallengeSpecSolverHttp01GatewayHttprouteParentRefs[];
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         *  This API may be extended in the future to support additional kinds of parent resources. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface ChallengeSpecSolverHttp01GatewayHttprouteParentRefs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *  <gateway:experimental:description> ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. </gateway:experimental:description> 
             *  Support: Core
             */
            namespace?: string;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  <gateway:experimental:description> When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values. </gateway:experimental:description> 
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  <gateway:experimental>
             */
            port?: number;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * challengeSpecSolverHttp01GatewayHttprouteParentRefsProvideDefaults sets the appropriate defaults for ChallengeSpecSolverHttp01GatewayHttprouteParentRefs
         */
        export function challengeSpecSolverHttp01GatewayHttprouteParentRefsProvideDefaults(val: ChallengeSpecSolverHttp01GatewayHttprouteParentRefs): ChallengeSpecSolverHttp01GatewayHttprouteParentRefs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ChallengeSpecSolverHttp01Ingress {
            /**
             * This field configures the annotation `kubernetes.io/ingress.class` when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            class?: string;
            /**
             * This field configures the field `ingressClassName` on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            ingressClassName?: string;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressIngressTemplate;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            name?: string;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressIngressTemplate {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressIngressTemplateMetadata;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressIngressTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplate {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateMetadata;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
             */
            spec?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateMetadata {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: {[key: string]: string};
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpec {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecrets[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: string;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys?: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys?: string[];
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys?: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys?: string[];
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys?: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys?: string[];
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
             */
            labelSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys?: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys?: string[];
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.acme.v1.ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecImagePullSecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ChallengeSpecSolverHttp01IngressPodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface ChallengeSpecSolverSelector {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: string[];
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: string[];
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: {[key: string]: string};
        }

        export interface ChallengeStatus {
            /**
             * presented will be set to true if the challenge values for this challenge are currently 'presented'. This *does not* imply the self check is passing. Only that the values have been 'submitted' for the appropriate challenge mechanism (i.e. the DNS01 TXT record has been presented, or the HTTP01 configuration has been configured).
             */
            presented?: boolean;
            /**
             * Used to denote whether this challenge should be processed or not. This field will only be set to true by the 'scheduling' component. It will only be set to false by the 'challenges' controller, after the challenge has reached a final state or timed out. If this field is set to false, the challenge controller will not take any more action.
             */
            processing?: boolean;
            /**
             * Contains human readable information on why the Challenge is in the current state.
             */
            reason?: string;
            /**
             * Contains the current 'state' of the challenge. If not set, the state of the challenge is unknown.
             */
            state?: string;
        }

        export interface OrderSpec {
            /**
             * CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.
             */
            commonName?: string;
            /**
             * DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
             */
            dnsNames?: string[];
            /**
             * Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.
             */
            duration?: string;
            /**
             * IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
             */
            ipAddresses?: string[];
            /**
             * IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
             */
            issuerRef: outputs.acme.v1.OrderSpecIssuerRef;
            /**
             * Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.
             */
            request: string;
        }

        /**
         * IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
         */
        export interface OrderSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        export interface OrderStatus {
            /**
             * Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.
             */
            authorizations?: outputs.acme.v1.OrderStatusAuthorizations[];
            /**
             * Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.
             */
            certificate?: string;
            /**
             * FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.
             */
            failureTime?: string;
            /**
             * FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.
             */
            finalizeURL?: string;
            /**
             * Reason optionally provides more information about a why the order is in the current state.
             */
            reason?: string;
            /**
             * State contains the current state of this Order resource. States 'success' and 'expired' are 'final'
             */
            state?: string;
            /**
             * URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.
             */
            url?: string;
        }

        /**
         * ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.
         */
        export interface OrderStatusAuthorizations {
            /**
             * Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.
             */
            challenges?: outputs.acme.v1.OrderStatusAuthorizationsChallenges[];
            /**
             * Identifier is the DNS name to be validated as part of this authorization
             */
            identifier?: string;
            /**
             * InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.
             */
            initialState?: string;
            /**
             * URL is the URL of the Authorization that must be completed
             */
            url: string;
            /**
             * Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.
             */
            wildcard?: boolean;
        }

        /**
         * Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.
         */
        export interface OrderStatusAuthorizationsChallenges {
            /**
             * Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.
             */
            token: string;
            /**
             * Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.
             */
            type: string;
            /**
             * URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.
             */
            url: string;
        }

    }
}

export namespace certmanager {
    export namespace v1 {
        /**
         * Specification of the desired state of the CertificateRequest resource. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateRequestSpec {
            /**
             * Requested 'duration' (i.e. lifetime) of the Certificate. Note that the issuer may choose to ignore the requested duration, just like any other requested attribute.
             */
            duration?: string;
            /**
             * Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            extra?: {[key: string]: string[]};
            /**
             * Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            groups?: string[];
            /**
             * Requested basic constraints isCA value. Note that the issuer may choose to ignore the requested isCA value, just like any other requested attribute. 
             *  NOTE: If the CSR in the `Request` field has a BasicConstraints extension, it must have the same isCA value as specified here. 
             *  If true, this will automatically add the `cert sign` usage to the list of requested `usages`.
             */
            isCA?: boolean;
            /**
             * Reference to the issuer responsible for issuing the certificate. If the issuer is namespace-scoped, it must be in the same namespace as the Certificate. If the issuer is cluster-scoped, it can be used from any namespace. 
             *  The `name` field of the reference must always be specified.
             */
            issuerRef: outputs.certmanager.v1.CertificateRequestSpecIssuerRef;
            /**
             * The PEM-encoded X.509 certificate signing request to be submitted to the issuer for signing. 
             *  If the CSR has a BasicConstraints extension, its isCA attribute must match the `isCA` value of this CertificateRequest. If the CSR has a KeyUsage extension, its key usages must match the key usages in the `usages` field of this CertificateRequest. If the CSR has a ExtKeyUsage extension, its extended key usages must match the extended key usages in the `usages` field of this CertificateRequest.
             */
            request: string;
            /**
             * UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            uid?: string;
            /**
             * Requested key usages and extended key usages. 
             *  NOTE: If the CSR in the `Request` field has uses the KeyUsage or ExtKeyUsage extension, these extensions must have the same values as specified here without any additional values. 
             *  If unset, defaults to `digital signature` and `key encipherment`.
             */
            usages?: string[];
            /**
             * Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            username?: string;
        }

        /**
         * Reference to the issuer responsible for issuing the certificate. If the issuer is namespace-scoped, it must be in the same namespace as the Certificate. If the issuer is cluster-scoped, it can be used from any namespace. 
         *  The `name` field of the reference must always be specified.
         */
        export interface CertificateRequestSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Status of the CertificateRequest. This is set and managed automatically. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateRequestStatus {
            /**
             * The PEM encoded X.509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.
             */
            ca?: string;
            /**
             * The PEM encoded X.509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.
             */
            certificate?: string;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`, `InvalidRequest`, `Approved` and `Denied`.
             */
            conditions?: outputs.certmanager.v1.CertificateRequestStatusConditions[];
            /**
             * FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.
             */
            failureTime?: string;
        }

        /**
         * CertificateRequestCondition contains condition information for a CertificateRequest.
         */
        export interface CertificateRequestStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).
             */
            type: string;
        }

        /**
         * Specification of the desired state of the Certificate resource. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateSpec {
            /**
             * Defines extra output formats of the private key and signed certificate chain to be written to this Certificate's target Secret. 
             *  This is an Alpha Feature and is only enabled with the `--feature-gates=AdditionalCertificateOutputFormats=true` option set on both the controller and webhook components.
             */
            additionalOutputFormats?: outputs.certmanager.v1.CertificateSpecAdditionalOutputFormats[];
            /**
             * Requested common name X509 certificate subject attribute. More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6 NOTE: TLS clients will ignore this value when any subject alternative name is set (see https://tools.ietf.org/html/rfc6125#section-6.4.4). 
             *  Should have a length of 64 characters or fewer to avoid generating invalid CSRs. Cannot be set if the `literalSubject` field is set.
             */
            commonName?: string;
            /**
             * Requested DNS subject alternative names.
             */
            dnsNames?: string[];
            /**
             * Requested 'duration' (i.e. lifetime) of the Certificate. Note that the issuer may choose to ignore the requested duration, just like any other requested attribute. 
             *  If unset, this defaults to 90 days. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
             */
            duration?: string;
            /**
             * Requested email subject alternative names.
             */
            emailAddresses?: string[];
            /**
             * Whether the KeyUsage and ExtKeyUsage extensions should be set in the encoded CSR. 
             *  This option defaults to true, and should only be disabled if the target issuer does not support CSRs with these X509 KeyUsage/ ExtKeyUsage extensions.
             */
            encodeUsagesInRequest?: boolean;
            /**
             * Requested IP address subject alternative names.
             */
            ipAddresses?: string[];
            /**
             * Requested basic constraints isCA value. The isCA value is used to set the `isCA` field on the created CertificateRequest resources. Note that the issuer may choose to ignore the requested isCA value, just like any other requested attribute. 
             *  If true, this will automatically add the `cert sign` usage to the list of requested `usages`.
             */
            isCA?: boolean;
            /**
             * Reference to the issuer responsible for issuing the certificate. If the issuer is namespace-scoped, it must be in the same namespace as the Certificate. If the issuer is cluster-scoped, it can be used from any namespace. 
             *  The `name` field of the reference must always be specified.
             */
            issuerRef: outputs.certmanager.v1.CertificateSpecIssuerRef;
            /**
             * Additional keystore output formats to be stored in the Certificate's Secret.
             */
            keystores?: outputs.certmanager.v1.CertificateSpecKeystores;
            /**
             * Requested X.509 certificate subject, represented using the LDAP "String Representation of a Distinguished Name" [1]. Important: the LDAP string format also specifies the order of the attributes in the subject, this is important when issuing certs for LDAP authentication. Example: `CN=foo,DC=corp,DC=example,DC=com` More info [1]: https://datatracker.ietf.org/doc/html/rfc4514 More info: https://github.com/cert-manager/cert-manager/issues/3203 More info: https://github.com/cert-manager/cert-manager/issues/4424 
             *  Cannot be set if the `subject` or `commonName` field is set. This is an Alpha Feature and is only enabled with the `--feature-gates=LiteralCertificateSubject=true` option set on both the controller and webhook components.
             */
            literalSubject?: string;
            /**
             * x.509 certificate NameConstraint extension which MUST NOT be used in a non-CA certificate. More Info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.10 
             *  This is an Alpha Feature and is only enabled with the `--feature-gates=NameConstraints=true` option set on both the controller and webhook components.
             */
            nameConstraints?: outputs.certmanager.v1.CertificateSpecNameConstraints;
            /**
             * `otherNames` is an escape hatch for SAN that allows any type. We currently restrict the support to string like otherNames, cf RFC 5280 p 37 Any UTF8 String valued otherName can be passed with by setting the keys oid: x.x.x.x and UTF8Value: somevalue for `otherName`. Most commonly this would be UPN set with oid: 1.3.6.1.4.1.311.20.2.3 You should ensure that any OID passed is valid for the UTF8String type as we do not explicitly validate this.
             */
            otherNames?: outputs.certmanager.v1.CertificateSpecOtherNames[];
            /**
             * Private key options. These include the key algorithm and size, the used encoding and the rotation policy.
             */
            privateKey?: outputs.certmanager.v1.CertificateSpecPrivateKey;
            /**
             * How long before the currently issued certificate's expiry cert-manager should renew the certificate. For example, if a certificate is valid for 60 minutes, and `renewBefore=10m`, cert-manager will begin to attempt to renew the certificate 50 minutes after it was issued (i.e. when there are 10 minutes remaining until the certificate is no longer valid). 
             *  NOTE: The actual lifetime of the issued certificate is used to determine the renewal time. If an issuer returns a certificate with a different lifetime than the one requested, cert-manager will use the lifetime of the issued certificate. 
             *  If unset, this defaults to 1/3 of the issued certificate's lifetime. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration.
             */
            renewBefore?: string;
            /**
             * The maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. 
             *  If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.
             */
            revisionHistoryLimit?: number;
            /**
             * Name of the Secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer. The Secret resource lives in the same namespace as the Certificate resource.
             */
            secretName: string;
            /**
             * Defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.
             */
            secretTemplate?: outputs.certmanager.v1.CertificateSpecSecretTemplate;
            /**
             * Requested set of X509 certificate subject attributes. More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6 
             *  The common name attribute is specified separately in the `commonName` field. Cannot be set if the `literalSubject` field is set.
             */
            subject?: outputs.certmanager.v1.CertificateSpecSubject;
            /**
             * Requested URI subject alternative names.
             */
            uris?: string[];
            /**
             * Requested key usages and extended key usages. These usages are used to set the `usages` field on the created CertificateRequest resources. If `encodeUsagesInRequest` is unset or set to `true`, the usages will additionally be encoded in the `request` field which contains the CSR blob. 
             *  If unset, defaults to `digital signature` and `key encipherment`.
             */
            usages?: string[];
        }

        /**
         * CertificateAdditionalOutputFormat defines an additional output format of a Certificate resource. These contain supplementary data formats of the signed certificate chain and paired private key.
         */
        export interface CertificateSpecAdditionalOutputFormats {
            /**
             * Type is the name of the format type that should be written to the Certificate's target Secret.
             */
            type: string;
        }

        /**
         * Reference to the issuer responsible for issuing the certificate. If the issuer is namespace-scoped, it must be in the same namespace as the Certificate. If the issuer is cluster-scoped, it can be used from any namespace. 
         *  The `name` field of the reference must always be specified.
         */
        export interface CertificateSpecIssuerRef {
            /**
             * Group of the resource being referred to.
             */
            group?: string;
            /**
             * Kind of the resource being referred to.
             */
            kind?: string;
            /**
             * Name of the resource being referred to.
             */
            name: string;
        }

        /**
         * Additional keystore output formats to be stored in the Certificate's Secret.
         */
        export interface CertificateSpecKeystores {
            /**
             * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
             */
            jks?: outputs.certmanager.v1.CertificateSpecKeystoresJks;
            /**
             * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
             */
            pkcs12?: outputs.certmanager.v1.CertificateSpecKeystoresPkcs12;
        }

        /**
         * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresJks {
            /**
             * Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will be updated immediately. If the issuer provided a CA certificate, a file named `truststore.jks` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
             */
            create: boolean;
            /**
             * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
             */
            passwordSecretRef: outputs.certmanager.v1.CertificateSpecKeystoresJksPasswordSecretRef;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
         */
        export interface CertificateSpecKeystoresJksPasswordSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresPkcs12 {
            /**
             * Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will be updated immediately. If the issuer provided a CA certificate, a file named `truststore.p12` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
             */
            create: boolean;
            /**
             * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
             */
            passwordSecretRef: outputs.certmanager.v1.CertificateSpecKeystoresPkcs12PasswordSecretRef;
            /**
             * Profile specifies the key and certificate encryption algorithms and the HMAC algorithm used to create the PKCS12 keystore. Default value is `LegacyRC2` for backward compatibility. 
             *  If provided, allowed values are: `LegacyRC2`: Deprecated. Not supported by default in OpenSSL 3 or Java 20. `LegacyDES`: Less secure algorithm. Use this option for maximal compatibility. `Modern2023`: Secure algorithm. Use this option in case you have to always use secure algorithms (eg. because of company policy). Please note that the security of the algorithm is not that important in reality, because the unencrypted certificate and private key are also stored in the Secret.
             */
            profile?: string;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
         */
        export interface CertificateSpecKeystoresPkcs12PasswordSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * x.509 certificate NameConstraint extension which MUST NOT be used in a non-CA certificate. More Info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.10 
         *  This is an Alpha Feature and is only enabled with the `--feature-gates=NameConstraints=true` option set on both the controller and webhook components.
         */
        export interface CertificateSpecNameConstraints {
            /**
             * if true then the name constraints are marked critical.
             */
            critical?: boolean;
            /**
             * Excluded contains the constraints which must be disallowed. Any name matching a restriction in the excluded field is invalid regardless of information appearing in the permitted
             */
            excluded?: outputs.certmanager.v1.CertificateSpecNameConstraintsExcluded;
            /**
             * Permitted contains the constraints in which the names must be located.
             */
            permitted?: outputs.certmanager.v1.CertificateSpecNameConstraintsPermitted;
        }

        /**
         * Excluded contains the constraints which must be disallowed. Any name matching a restriction in the excluded field is invalid regardless of information appearing in the permitted
         */
        export interface CertificateSpecNameConstraintsExcluded {
            /**
             * DNSDomains is a list of DNS domains that are permitted or excluded.
             */
            dnsDomains?: string[];
            /**
             * EmailAddresses is a list of Email Addresses that are permitted or excluded.
             */
            emailAddresses?: string[];
            /**
             * IPRanges is a list of IP Ranges that are permitted or excluded. This should be a valid CIDR notation.
             */
            ipRanges?: string[];
            /**
             * URIDomains is a list of URI domains that are permitted or excluded.
             */
            uriDomains?: string[];
        }

        /**
         * Permitted contains the constraints in which the names must be located.
         */
        export interface CertificateSpecNameConstraintsPermitted {
            /**
             * DNSDomains is a list of DNS domains that are permitted or excluded.
             */
            dnsDomains?: string[];
            /**
             * EmailAddresses is a list of Email Addresses that are permitted or excluded.
             */
            emailAddresses?: string[];
            /**
             * IPRanges is a list of IP Ranges that are permitted or excluded. This should be a valid CIDR notation.
             */
            ipRanges?: string[];
            /**
             * URIDomains is a list of URI domains that are permitted or excluded.
             */
            uriDomains?: string[];
        }

        export interface CertificateSpecOtherNames {
            /**
             * OID is the object identifier for the otherName SAN. The object identifier must be expressed as a dotted string, for example, "1.2.840.113556.1.4.221".
             */
            oid?: string;
            /**
             * utf8Value is the string value of the otherName SAN. The utf8Value accepts any valid UTF8 string to set as value for the otherName SAN.
             */
            utf8Value?: string;
        }

        /**
         * Private key options. These include the key algorithm and size, the used encoding and the rotation policy.
         */
        export interface CertificateSpecPrivateKey {
            /**
             * Algorithm is the private key algorithm of the corresponding private key for this certificate. 
             *  If provided, allowed values are either `RSA`, `ECDSA` or `Ed25519`. If `algorithm` is specified and `size` is not provided, key size of 2048 will be used for `RSA` key algorithm and key size of 256 will be used for `ECDSA` key algorithm. key size is ignored when using the `Ed25519` key algorithm.
             */
            algorithm?: string;
            /**
             * The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. 
             *  If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.
             */
            encoding?: string;
            /**
             * RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. 
             *  If set to `Never`, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to `Always`, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is `Never` for backward compatibility.
             */
            rotationPolicy?: string;
            /**
             * Size is the key bit size of the corresponding private key for this certificate. 
             *  If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. If `algorithm` is set to `Ed25519`, Size is ignored. No other values are allowed.
             */
            size?: number;
        }

        /**
         * Defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.
         */
        export interface CertificateSpecSecretTemplate {
            /**
             * Annotations is a key value map to be copied to the target Kubernetes Secret.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels is a key value map to be copied to the target Kubernetes Secret.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Requested set of X509 certificate subject attributes. More info: https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6 
         *  The common name attribute is specified separately in the `commonName` field. Cannot be set if the `literalSubject` field is set.
         */
        export interface CertificateSpecSubject {
            /**
             * Countries to be used on the Certificate.
             */
            countries?: string[];
            /**
             * Cities to be used on the Certificate.
             */
            localities?: string[];
            /**
             * Organizational Units to be used on the Certificate.
             */
            organizationalUnits?: string[];
            /**
             * Organizations to be used on the Certificate.
             */
            organizations?: string[];
            /**
             * Postal codes to be used on the Certificate.
             */
            postalCodes?: string[];
            /**
             * State/Provinces to be used on the Certificate.
             */
            provinces?: string[];
            /**
             * Serial number to be used on the Certificate.
             */
            serialNumber?: string;
            /**
             * Street addresses to be used on the Certificate.
             */
            streetAddresses?: string[];
        }

        /**
         * Status of the Certificate. This is set and managed automatically. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface CertificateStatus {
            /**
             * List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
             */
            conditions?: outputs.certmanager.v1.CertificateStatusConditions[];
            /**
             * The number of continuous failed issuance attempts up till now. This field gets removed (if set) on a successful issuance and gets set to 1 if unset and an issuance has failed. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1).
             */
            failedIssuanceAttempts?: number;
            /**
             * LastFailureTime is set only if the lastest issuance for this Certificate failed and contains the time of the failure. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1). If the latest issuance has succeeded this field will be unset.
             */
            lastFailureTime?: string;
            /**
             * The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
             */
            nextPrivateKeySecretName?: string;
            /**
             * The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
             */
            notAfter?: string;
            /**
             * The time after which the certificate stored in the secret named by this resource in `spec.secretName` is valid.
             */
            notBefore?: string;
            /**
             * RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
             */
            renewalTime?: string;
            /**
             * The current 'revision' of the certificate as issued. 
             *  When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. 
             *  Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. 
             *  Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.
             */
            revision?: number;
        }

        /**
         * CertificateCondition contains condition information for an Certificate.
         */
        export interface CertificateStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.
             */
            observedGeneration?: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`, `Issuing`).
             */
            type: string;
        }

        /**
         * Desired state of the ClusterIssuer resource.
         */
        export interface ClusterIssuerSpec {
            /**
             * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
             */
            acme?: outputs.certmanager.v1.ClusterIssuerSpecAcme;
            /**
             * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
             */
            ca?: outputs.certmanager.v1.ClusterIssuerSpecCa;
            /**
             * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
             */
            selfSigned?: outputs.certmanager.v1.ClusterIssuerSpecSelfSigned;
            /**
             * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
             */
            vault?: outputs.certmanager.v1.ClusterIssuerSpecVault;
            /**
             * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
             */
            venafi?: outputs.certmanager.v1.ClusterIssuerSpecVenafi;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
         */
        export interface ClusterIssuerSpecAcme {
            /**
             * Base64-encoded bundle of PEM CAs which can be used to validate the certificate chain presented by the ACME server. Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various kinds of security vulnerabilities. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection.
             */
            caBundle?: string;
            /**
             * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
             */
            disableAccountKeyGeneration?: boolean;
            /**
             * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
             */
            email?: string;
            /**
             * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
             */
            enableDurationFeature?: boolean;
            /**
             * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
             */
            externalAccountBinding?: outputs.certmanager.v1.ClusterIssuerSpecAcmeExternalAccountBinding;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
             */
            preferredChain?: string;
            /**
             * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
             */
            privateKeySecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmePrivateKeySecretRef;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: string;
            /**
             * INSECURE: Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have the TLS certificate chain validated. Mutually exclusive with CABundle; prefer using CABundle to prevent various kinds of security vulnerabilities. Only enable this option in development environments. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection. Defaults to false.
             */
            skipTLSVerify?: boolean;
            /**
             * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolvers[];
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
         */
        export interface ClusterIssuerSpecAcmeExternalAccountBinding {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.
             */
            keyAlgorithm?: string;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: string;
            /**
             * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
             */
            keySecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
         */
        export interface ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface ClusterIssuerSpecAcmePrivateKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
         */
        export interface ClusterIssuerSpecAcmeSolvers {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversSelector;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01 {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AcmeDns;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Akamai;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDns;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudDns;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Cloudflare;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: string;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Digitalocean;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Webhook;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmeDns {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AcmeDnsAccountSecretRef;
            host: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmeDnsAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Akamai {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef;
            serviceConsumerDomain: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDns {
            /**
             * Auth: Azure Service Principal: The ClientID of the Azure Service Principal used to authenticate with Azure DNS. If set, ClientSecret and TenantID must also be set.
             */
            clientID?: string;
            /**
             * Auth: Azure Service Principal: A reference to a Secret containing the password associated with the Service Principal. If set, ClientID and TenantID must also be set.
             */
            clientSecretSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDnsClientSecretSecretRef;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: string;
            /**
             * Auth: Azure Workload Identity or Azure Managed Service Identity: Settings to enable Azure Workload Identity or Azure Managed Service Identity If set, ClientID, ClientSecret and TenantID must not be set.
             */
            managedIdentity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzureDnsManagedIdentity;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * Auth: Azure Service Principal: The TenantID of the Azure Service Principal used to authenticate with Azure DNS. If set, ClientID and ClientSecret must also be set.
             */
            tenantID?: string;
        }

        /**
         * Auth: Azure Service Principal: A reference to a Secret containing the password associated with the Service Principal. If set, ClientID and TenantID must also be set.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDnsClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Auth: Azure Workload Identity or Azure Managed Service Identity: Settings to enable Azure Workload Identity or Azure Managed Service Identity If set, ClientID, ClientSecret and TenantID must not be set.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzureDnsManagedIdentity {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID Cannot be used for Azure Managed Service Identity
             */
            resourceID?: string;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudDns {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: string;
            project: string;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudDnsServiceAccountSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudDnsServiceAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Cloudflare {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: string;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Digitalocean {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136 {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: string;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: string;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53 {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: string;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIdsecretRef;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: string;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: string;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53AccessKeyIdsecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Webhook {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01 {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHttproute;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01Ingress;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHttproute {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayHttprouteParentRefs[];
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         *  This API may be extended in the future to support additional kinds of parent resources. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayHttprouteParentRefs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *  <gateway:experimental:description> ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. </gateway:experimental:description> 
             *  Support: Core
             */
            namespace?: string;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  <gateway:experimental:description> When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values. </gateway:experimental:description> 
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  <gateway:experimental>
             */
            port?: number;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * clusterIssuerSpecAcmeSolversHttp01GatewayHttprouteParentRefsProvideDefaults sets the appropriate defaults for ClusterIssuerSpecAcmeSolversHttp01GatewayHttprouteParentRefs
         */
        export function clusterIssuerSpecAcmeSolversHttp01GatewayHttprouteParentRefsProvideDefaults(val: ClusterIssuerSpecAcmeSolversHttp01GatewayHttprouteParentRefs): ClusterIssuerSpecAcmeSolversHttp01GatewayHttprouteParentRefs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01Ingress {
            /**
             * This field configures the annotation `kubernetes.io/ingress.class` when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            class?: string;
            /**
             * This field configures the field `ingressClassName` on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            ingressClassName?: string;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            name?: string;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
             */
            spec?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: {[key: string]: string};
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecrets[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: string;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys?: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys?: string[];
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys?: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys?: string[];
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys?: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys?: string[];
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
             */
            labelSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys?: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys?: string[];
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface ClusterIssuerSpecAcmeSolversSelector {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: string[];
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: string[];
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface ClusterIssuerSpecCa {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints?: string[];
            /**
             * IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details. As an example, such a URL might be "http://ca.domain.com/ca.crt".
             */
            issuingCertificateURLs?: string[];
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers?: string[];
            /**
             * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
             */
            secretName: string;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
         */
        export interface ClusterIssuerSpecSelfSigned {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints?: string[];
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
         */
        export interface ClusterIssuerSpecVault {
            /**
             * Auth configures how cert-manager authenticates with the Vault server.
             */
            auth: outputs.certmanager.v1.ClusterIssuerSpecVaultAuth;
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by Vault. Only used if using HTTPS to connect to Vault and ignored for HTTP connections. Mutually exclusive with CABundleSecretRef. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection.
             */
            caBundle?: string;
            /**
             * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
             */
            caBundleSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecVaultCaBundleSecretRef;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace?: string;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
             */
            path: string;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: string;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuth {
            /**
             * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
             */
            appRole?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthAppRole;
            /**
             * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
             */
            kubernetes?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetes;
            /**
             * TokenSecretRef authenticates with Vault by presenting a token.
             */
            tokenSecretRef?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthTokenSecretRef;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface ClusterIssuerSpecVaultAuthAppRole {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
             */
            path: string;
            /**
             * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
             */
            roleId: string;
            /**
             * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
             */
            secretRef: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthAppRoleSecretRef;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
         */
        export interface ClusterIssuerSpecVaultAuthAppRoleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetes {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
             */
            mountPath?: string;
            /**
             * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: string;
            /**
             * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
             */
            secretRef?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetesSecretRef;
            /**
             * A reference to a service account that will be used to request a bound token (also known as "projected token"). Compared to using "secretRef", using this field means that you don't rely on statically bound tokens. To use this field, you must configure an RBAC rule to let cert-manager request a token.
             */
            serviceAccountRef?: outputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetesServiceAccountRef;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a service account that will be used to request a bound token (also known as "projected token"). Compared to using "secretRef", using this field means that you don't rely on statically bound tokens. To use this field, you must configure an RBAC rule to let cert-manager request a token.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesServiceAccountRef {
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: string;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface ClusterIssuerSpecVaultAuthTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
         */
        export interface ClusterIssuerSpecVaultCaBundleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
         */
        export interface ClusterIssuerSpecVenafi {
            /**
             * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
             */
            cloud?: outputs.certmanager.v1.ClusterIssuerSpecVenafiCloud;
            /**
             * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
             */
            tpp?: outputs.certmanager.v1.ClusterIssuerSpecVenafiTpp;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
             */
            zone: string;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiCloud {
            /**
             * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
             */
            apiTokenSecretRef: outputs.certmanager.v1.ClusterIssuerSpecVenafiCloudApiTokenSecretRef;
            /**
             * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
             */
            url?: string;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface ClusterIssuerSpecVenafiCloudApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiTpp {
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP. If undefined, the certificate bundle in the cert-manager controller container is used to validate the chain.
             */
            caBundle?: string;
            /**
             * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
             */
            credentialsRef: outputs.certmanager.v1.ClusterIssuerSpecVenafiTppCredentialsRef;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
             */
            url: string;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
         */
        export interface ClusterIssuerSpecVenafiTppCredentialsRef {
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Status of the ClusterIssuer. This is set and managed automatically.
         */
        export interface ClusterIssuerStatus {
            /**
             * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
             */
            acme?: outputs.certmanager.v1.ClusterIssuerStatusAcme;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
             */
            conditions?: outputs.certmanager.v1.ClusterIssuerStatusConditions[];
        }

        /**
         * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
         */
        export interface ClusterIssuerStatusAcme {
            /**
             * LastPrivateKeyHash is a hash of the private key associated with the latest registered ACME account, in order to track changes made to registered account associated with the Issuer
             */
            lastPrivateKeyHash?: string;
            /**
             * LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
             */
            lastRegisteredEmail?: string;
            /**
             * URI is the unique account identifier, which can also be used to retrieve account details from the CA
             */
            uri?: string;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface ClusterIssuerStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
             */
            observedGeneration?: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: string;
        }

        /**
         * Desired state of the Issuer resource.
         */
        export interface IssuerSpec {
            /**
             * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
             */
            acme?: outputs.certmanager.v1.IssuerSpecAcme;
            /**
             * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
             */
            ca?: outputs.certmanager.v1.IssuerSpecCa;
            /**
             * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
             */
            selfSigned?: outputs.certmanager.v1.IssuerSpecSelfSigned;
            /**
             * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
             */
            vault?: outputs.certmanager.v1.IssuerSpecVault;
            /**
             * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
             */
            venafi?: outputs.certmanager.v1.IssuerSpecVenafi;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
         */
        export interface IssuerSpecAcme {
            /**
             * Base64-encoded bundle of PEM CAs which can be used to validate the certificate chain presented by the ACME server. Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various kinds of security vulnerabilities. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection.
             */
            caBundle?: string;
            /**
             * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
             */
            disableAccountKeyGeneration?: boolean;
            /**
             * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
             */
            email?: string;
            /**
             * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
             */
            enableDurationFeature?: boolean;
            /**
             * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
             */
            externalAccountBinding?: outputs.certmanager.v1.IssuerSpecAcmeExternalAccountBinding;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
             */
            preferredChain?: string;
            /**
             * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
             */
            privateKeySecretRef: outputs.certmanager.v1.IssuerSpecAcmePrivateKeySecretRef;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: string;
            /**
             * INSECURE: Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have the TLS certificate chain validated. Mutually exclusive with CABundle; prefer using CABundle to prevent various kinds of security vulnerabilities. Only enable this option in development environments. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection. Defaults to false.
             */
            skipTLSVerify?: boolean;
            /**
             * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers?: outputs.certmanager.v1.IssuerSpecAcmeSolvers[];
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
         */
        export interface IssuerSpecAcmeExternalAccountBinding {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.
             */
            keyAlgorithm?: string;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: string;
            /**
             * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
             */
            keySecretRef: outputs.certmanager.v1.IssuerSpecAcmeExternalAccountBindingKeySecretRef;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
         */
        export interface IssuerSpecAcmeExternalAccountBindingKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface IssuerSpecAcmePrivateKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
         */
        export interface IssuerSpecAcmeSolvers {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: outputs.certmanager.v1.IssuerSpecAcmeSolversSelector;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface IssuerSpecAcmeSolversDns01 {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AcmeDns;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Akamai;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzureDns;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudDns;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Cloudflare;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: string;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Digitalocean;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Rfc2136;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Webhook;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AcmeDns {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AcmeDnsAccountSecretRef;
            host: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AcmeDnsAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Akamai {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef;
            serviceConsumerDomain: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AzureDns {
            /**
             * Auth: Azure Service Principal: The ClientID of the Azure Service Principal used to authenticate with Azure DNS. If set, ClientSecret and TenantID must also be set.
             */
            clientID?: string;
            /**
             * Auth: Azure Service Principal: A reference to a Secret containing the password associated with the Service Principal. If set, ClientID and TenantID must also be set.
             */
            clientSecretSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzureDnsClientSecretSecretRef;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: string;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: string;
            /**
             * Auth: Azure Workload Identity or Azure Managed Service Identity: Settings to enable Azure Workload Identity or Azure Managed Service Identity If set, ClientID, ClientSecret and TenantID must not be set.
             */
            managedIdentity?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzureDnsManagedIdentity;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: string;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: string;
            /**
             * Auth: Azure Service Principal: The TenantID of the Azure Service Principal used to authenticate with Azure DNS. If set, ClientID and ClientSecret must also be set.
             */
            tenantID?: string;
        }

        /**
         * Auth: Azure Service Principal: A reference to a Secret containing the password associated with the Service Principal. If set, ClientID and TenantID must also be set.
         */
        export interface IssuerSpecAcmeSolversDns01AzureDnsClientSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Auth: Azure Workload Identity or Azure Managed Service Identity: Settings to enable Azure Workload Identity or Azure Managed Service Identity If set, ClientID, ClientSecret and TenantID must not be set.
         */
        export interface IssuerSpecAcmeSolversDns01AzureDnsManagedIdentity {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: string;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID Cannot be used for Azure Managed Service Identity
             */
            resourceID?: string;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01CloudDns {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: string;
            project: string;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudDnsServiceAccountSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01CloudDnsServiceAccountSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Cloudflare {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: string;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Digitalocean {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136 {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: string;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: string;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: string;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Route53 {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: string;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53AccessKeyIdsecretRef;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: string;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: string;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: string;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: outputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53AccessKeyIdsecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Webhook {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: {[key: string]: any};
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: string;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: string;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface IssuerSpecAcmeSolversHttp01 {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01GatewayHttproute;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01Ingress;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHttproute {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: {[key: string]: string};
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01GatewayHttprouteParentRefs[];
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). There are two kinds of parent resources with "Core" support: 
         *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
         *  This API may be extended in the future to support additional kinds of parent resources. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayHttprouteParentRefs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: string;
            /**
             * Kind is kind of the referent. 
             *  There are two kinds of parent resources with "Core" support: 
             *  * Gateway (Gateway conformance profile) * Service (Mesh conformance profile, experimental, ClusterIP Services only) 
             *  Support for other resources is Implementation-Specific.
             */
            kind?: string;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: string;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *  <gateway:experimental:description> ParentRefs from a Route to a Service in the same namespace are "producer" routes, which apply default routing rules to inbound connections from any namespace to the Service. 
             *  ParentRefs from a Route to a Service in a different namespace are "consumer" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. </gateway:experimental:description> 
             *  Support: Core
             */
            namespace?: string;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  <gateway:experimental:description> When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values. </gateway:experimental:description> 
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  <gateway:experimental>
             */
            port?: number;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. Note that attaching Routes to Services as Parents is part of experimental Mesh support and is not supported for any other purpose. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: string;
        }
        /**
         * issuerSpecAcmeSolversHttp01GatewayHttprouteParentRefsProvideDefaults sets the appropriate defaults for IssuerSpecAcmeSolversHttp01GatewayHttprouteParentRefs
         */
        export function issuerSpecAcmeSolversHttp01GatewayHttprouteParentRefsProvideDefaults(val: IssuerSpecAcmeSolversHttp01GatewayHttprouteParentRefs): IssuerSpecAcmeSolversHttp01GatewayHttprouteParentRefs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface IssuerSpecAcmeSolversHttp01Ingress {
            /**
             * This field configures the annotation `kubernetes.io/ingress.class` when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            class?: string;
            /**
             * This field configures the field `ingressClassName` on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            ingressClassName?: string;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressIngressTemplate;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            name?: string;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplate;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: string;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplate {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: {[key: string]: string};
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplate {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
             */
            spec?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: {[key: string]: string};
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: {[key: string]: string};
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpec {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecrets[];
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: {[key: string]: string};
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: string;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: string;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations[];
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms[];
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions[];
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            /**
             * The label key that the selector applies to.
             */
            key: string;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: string;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys?: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys?: string[];
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys?: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys?: string[];
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution[];
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution[];
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: number;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            /**
             * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys?: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys?: string[];
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            /**
             * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
             */
            labelSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector;
            /**
             * MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            matchLabelKeys?: string[];
            /**
             * MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
             */
            mismatchLabelKeys?: string[];
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: string[];
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: string;
        }

        /**
         * A label query over a set of resources, in this case pods. If it's null, this PodAffinityTerm matches with no Pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: outputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions[];
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            /**
             * key is the label key that the selector applies to.
             */
            key: string;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: string;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: string[];
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecImagePullSecrets {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: string;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: string;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: string;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: string;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: number;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: string;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface IssuerSpecAcmeSolversSelector {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: string[];
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: string[];
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: {[key: string]: string};
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface IssuerSpecCa {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints?: string[];
            /**
             * IssuingCertificateURLs is a list of URLs which this issuer should embed into certificates it creates. See https://www.rfc-editor.org/rfc/rfc5280#section-4.2.2.1 for more details. As an example, such a URL might be "http://ca.domain.com/ca.crt".
             */
            issuingCertificateURLs?: string[];
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers?: string[];
            /**
             * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
             */
            secretName: string;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
         */
        export interface IssuerSpecSelfSigned {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints?: string[];
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
         */
        export interface IssuerSpecVault {
            /**
             * Auth configures how cert-manager authenticates with the Vault server.
             */
            auth: outputs.certmanager.v1.IssuerSpecVaultAuth;
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by Vault. Only used if using HTTPS to connect to Vault and ignored for HTTP connections. Mutually exclusive with CABundleSecretRef. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection.
             */
            caBundle?: string;
            /**
             * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
             */
            caBundleSecretRef?: outputs.certmanager.v1.IssuerSpecVaultCaBundleSecretRef;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace?: string;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
             */
            path: string;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: string;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface IssuerSpecVaultAuth {
            /**
             * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
             */
            appRole?: outputs.certmanager.v1.IssuerSpecVaultAuthAppRole;
            /**
             * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
             */
            kubernetes?: outputs.certmanager.v1.IssuerSpecVaultAuthKubernetes;
            /**
             * TokenSecretRef authenticates with Vault by presenting a token.
             */
            tokenSecretRef?: outputs.certmanager.v1.IssuerSpecVaultAuthTokenSecretRef;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface IssuerSpecVaultAuthAppRole {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
             */
            path: string;
            /**
             * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
             */
            roleId: string;
            /**
             * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
             */
            secretRef: outputs.certmanager.v1.IssuerSpecVaultAuthAppRoleSecretRef;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
         */
        export interface IssuerSpecVaultAuthAppRoleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
         */
        export interface IssuerSpecVaultAuthKubernetes {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
             */
            mountPath?: string;
            /**
             * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: string;
            /**
             * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
             */
            secretRef?: outputs.certmanager.v1.IssuerSpecVaultAuthKubernetesSecretRef;
            /**
             * A reference to a service account that will be used to request a bound token (also known as "projected token"). Compared to using "secretRef", using this field means that you don't rely on statically bound tokens. To use this field, you must configure an RBAC rule to let cert-manager request a token.
             */
            serviceAccountRef?: outputs.certmanager.v1.IssuerSpecVaultAuthKubernetesServiceAccountRef;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
         */
        export interface IssuerSpecVaultAuthKubernetesSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * A reference to a service account that will be used to request a bound token (also known as "projected token"). Compared to using "secretRef", using this field means that you don't rely on statically bound tokens. To use this field, you must configure an RBAC rule to let cert-manager request a token.
         */
        export interface IssuerSpecVaultAuthKubernetesServiceAccountRef {
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: string;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface IssuerSpecVaultAuthTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
         */
        export interface IssuerSpecVaultCaBundleSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
         */
        export interface IssuerSpecVenafi {
            /**
             * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
             */
            cloud?: outputs.certmanager.v1.IssuerSpecVenafiCloud;
            /**
             * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
             */
            tpp?: outputs.certmanager.v1.IssuerSpecVenafiTpp;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
             */
            zone: string;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiCloud {
            /**
             * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
             */
            apiTokenSecretRef: outputs.certmanager.v1.IssuerSpecVenafiCloudApiTokenSecretRef;
            /**
             * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
             */
            url?: string;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface IssuerSpecVenafiCloudApiTokenSecretRef {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: string;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiTpp {
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP. If undefined, the certificate bundle in the cert-manager controller container is used to validate the chain.
             */
            caBundle?: string;
            /**
             * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
             */
            credentialsRef: outputs.certmanager.v1.IssuerSpecVenafiTppCredentialsRef;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
             */
            url: string;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
         */
        export interface IssuerSpecVenafiTppCredentialsRef {
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: string;
        }

        /**
         * Status of the Issuer. This is set and managed automatically.
         */
        export interface IssuerStatus {
            /**
             * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
             */
            acme?: outputs.certmanager.v1.IssuerStatusAcme;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
             */
            conditions?: outputs.certmanager.v1.IssuerStatusConditions[];
        }

        /**
         * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
         */
        export interface IssuerStatusAcme {
            /**
             * LastPrivateKeyHash is a hash of the private key associated with the latest registered ACME account, in order to track changes made to registered account associated with the Issuer
             */
            lastPrivateKeyHash?: string;
            /**
             * LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
             */
            lastRegisteredEmail?: string;
            /**
             * URI is the unique account identifier, which can also be used to retrieve account details from the CA
             */
            uri?: string;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface IssuerStatusConditions {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: string;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: string;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
             */
            observedGeneration?: number;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: string;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: string;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: string;
        }

    }
}

export namespace traefik {
    export namespace v1alpha1 {
        /**
         * IngressRouteSpec defines the desired state of IngressRoute.
         */
        export interface IngressRouteSpec {
            /**
             * EntryPoints defines the list of entry point names to bind to.
             * Entry points have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/
             * Default: all.
             */
            entryPoints?: string[];
            /**
             * Routes defines the list of routes.
             */
            routes: outputs.traefik.v1alpha1.IngressRouteSpecRoutes[];
            /**
             * TLS defines the TLS configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls
             */
            tls?: outputs.traefik.v1alpha1.IngressRouteSpecTls;
        }

        /**
         * Route holds the HTTP route configuration.
         */
        export interface IngressRouteSpecRoutes {
            /**
             * Kind defines the kind of the route.
             * Rule is the only supported kind.
             */
            kind: string;
            /**
             * Match defines the router's rule.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rule
             */
            match: string;
            /**
             * Middlewares defines the list of references to Middleware resources.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-middleware
             */
            middlewares?: outputs.traefik.v1alpha1.IngressRouteSpecRoutesMiddlewares[];
            /**
             * Priority defines the router's priority.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#priority
             */
            priority?: number;
            /**
             * Services defines the list of Service.
             * It can contain any combination of TraefikService and/or reference to a Kubernetes Service.
             */
            services?: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServices[];
            /**
             * Syntax defines the router's rule syntax.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rulesyntax
             */
            syntax?: string;
        }

        /**
         * MiddlewareRef is a reference to a Middleware resource.
         */
        export interface IngressRouteSpecRoutesMiddlewares {
            /**
             * Name defines the name of the referenced Middleware resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Middleware resource.
             */
            namespace?: string;
        }

        /**
         * Service defines an upstream HTTP service to proxy traffic to.
         */
        export interface IngressRouteSpecRoutesServices {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader?: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port?: number | string;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesResponseForwarding;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: string;
            /**
             * Sticky defines the sticky sessions configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
             */
            sticky?: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesSticky;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy?: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: number;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface IngressRouteSpecRoutesServicesResponseForwarding {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval?: string;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
         */
        export interface IngressRouteSpecRoutesServicesSticky {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: outputs.traefik.v1alpha1.IngressRouteSpecRoutesServicesStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface IngressRouteSpecRoutesServicesStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: number;
            /**
             * Name defines the Cookie name.
             */
            name?: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: boolean;
        }

        /**
         * TLS defines the TLS configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls
         */
        export interface IngressRouteSpecTls {
            /**
             * CertResolver defines the name of the certificate resolver to use.
             * Cert resolvers have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/https/acme/#certificate-resolvers
             */
            certResolver?: string;
            /**
             * Domains defines the list of domains that will be used to issue certificates.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#domains
             */
            domains?: outputs.traefik.v1alpha1.IngressRouteSpecTlsDomains[];
            /**
             * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
             * If not defined, the `default` TLSOption is used.
             * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options
             */
            options?: outputs.traefik.v1alpha1.IngressRouteSpecTlsOptions;
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName?: string;
            /**
             * Store defines the reference to the TLSStore, that will be used to store certificates.
             * Please note that only `default` TLSStore can be used.
             */
            store?: outputs.traefik.v1alpha1.IngressRouteSpecTlsStore;
        }

        /**
         * Domain holds a domain name with SANs.
         */
        export interface IngressRouteSpecTlsDomains {
            /**
             * Main defines the main domain name.
             */
            main?: string;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans?: string[];
        }

        /**
         * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
         * If not defined, the `default` TLSOption is used.
         * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options
         */
        export interface IngressRouteSpecTlsOptions {
            /**
             * Name defines the name of the referenced TLSOption.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsoption
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced TLSOption.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsoption
             */
            namespace?: string;
        }

        /**
         * Store defines the reference to the TLSStore, that will be used to store certificates.
         * Please note that only `default` TLSStore can be used.
         */
        export interface IngressRouteSpecTlsStore {
            /**
             * Name defines the name of the referenced TLSStore.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsstore
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced TLSStore.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#kind-tlsstore
             */
            namespace?: string;
        }

        /**
         * IngressRouteTCPSpec defines the desired state of IngressRouteTCP.
         */
        export interface IngressRouteTCPSpec {
            /**
             * EntryPoints defines the list of entry point names to bind to.
             * Entry points have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/
             * Default: all.
             */
            entryPoints?: string[];
            /**
             * Routes defines the list of routes.
             */
            routes: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutes[];
            /**
             * TLS defines the TLS configuration on a layer 4 / TCP Route.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls_1
             */
            tls?: outputs.traefik.v1alpha1.IngressRouteTCPSpecTls;
        }

        /**
         * RouteTCP holds the TCP route configuration.
         */
        export interface IngressRouteTCPSpecRoutes {
            /**
             * Match defines the router's rule.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rule_1
             */
            match: string;
            /**
             * Middlewares defines the list of references to MiddlewareTCP resources.
             */
            middlewares?: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesMiddlewares[];
            /**
             * Priority defines the router's priority.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#priority_1
             */
            priority?: number;
            /**
             * Services defines the list of TCP services.
             */
            services?: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesServices[];
            /**
             * Syntax defines the router's rule syntax.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#rulesyntax_1
             */
            syntax?: string;
        }

        /**
         * ObjectReference is a generic reference to a Traefik resource.
         */
        export interface IngressRouteTCPSpecRoutesMiddlewares {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace?: string;
        }

        /**
         * ServiceTCP defines an upstream TCP service to proxy traffic to.
         */
        export interface IngressRouteTCPSpecRoutesServices {
            /**
             * Name defines the name of the referenced Kubernetes Service.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service.
             */
            namespace?: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            /**
             * ProxyProtocol defines the PROXY protocol configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#proxy-protocol
             */
            proxyProtocol?: outputs.traefik.v1alpha1.IngressRouteTCPSpecRoutesServicesProxyProtocol;
            /**
             * ServersTransport defines the name of ServersTransportTCP resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: string;
            /**
             * TerminationDelay defines the deadline that the proxy sets, after one of its connected peers indicates
             * it has closed the writing capability of its connection, to close the reading capability as well,
             * hence fully terminating the connection.
             * It is a duration in milliseconds, defaulting to 100.
             * A negative value means an infinite deadline (i.e. the reading capability is never closed).
             * Deprecated: TerminationDelay is not supported APIVersion traefik.io/v1, please use ServersTransport to configure the TerminationDelay instead.
             */
            terminationDelay?: number;
            /**
             * TLS determines whether to use TLS when dialing with the backend.
             */
            tls?: boolean;
            /**
             * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
             */
            weight?: number;
        }

        /**
         * ProxyProtocol defines the PROXY protocol configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#proxy-protocol
         */
        export interface IngressRouteTCPSpecRoutesServicesProxyProtocol {
            /**
             * Version defines the PROXY Protocol version to use.
             */
            version?: number;
        }

        /**
         * TLS defines the TLS configuration on a layer 4 / TCP Route.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#tls_1
         */
        export interface IngressRouteTCPSpecTls {
            /**
             * CertResolver defines the name of the certificate resolver to use.
             * Cert resolvers have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/https/acme/#certificate-resolvers
             */
            certResolver?: string;
            /**
             * Domains defines the list of domains that will be used to issue certificates.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/routers/#domains
             */
            domains?: outputs.traefik.v1alpha1.IngressRouteTCPSpecTlsDomains[];
            /**
             * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
             * If not defined, the `default` TLSOption is used.
             * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options
             */
            options?: outputs.traefik.v1alpha1.IngressRouteTCPSpecTlsOptions;
            /**
             * Passthrough defines whether a TLS router will terminate the TLS connection.
             */
            passthrough?: boolean;
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName?: string;
            /**
             * Store defines the reference to the TLSStore, that will be used to store certificates.
             * Please note that only `default` TLSStore can be used.
             */
            store?: outputs.traefik.v1alpha1.IngressRouteTCPSpecTlsStore;
        }

        /**
         * Domain holds a domain name with SANs.
         */
        export interface IngressRouteTCPSpecTlsDomains {
            /**
             * Main defines the main domain name.
             */
            main?: string;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans?: string[];
        }

        /**
         * Options defines the reference to a TLSOption, that specifies the parameters of the TLS connection.
         * If not defined, the `default` TLSOption is used.
         * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#tls-options
         */
        export interface IngressRouteTCPSpecTlsOptions {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace?: string;
        }

        /**
         * Store defines the reference to the TLSStore, that will be used to store certificates.
         * Please note that only `default` TLSStore can be used.
         */
        export interface IngressRouteTCPSpecTlsStore {
            /**
             * Name defines the name of the referenced Traefik resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Traefik resource.
             */
            namespace?: string;
        }

        /**
         * IngressRouteUDPSpec defines the desired state of a IngressRouteUDP.
         */
        export interface IngressRouteUDPSpec {
            /**
             * EntryPoints defines the list of entry point names to bind to.
             * Entry points have to be configured in the static configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/entrypoints/
             * Default: all.
             */
            entryPoints?: string[];
            /**
             * Routes defines the list of routes.
             */
            routes: outputs.traefik.v1alpha1.IngressRouteUDPSpecRoutes[];
        }

        /**
         * RouteUDP holds the UDP route configuration.
         */
        export interface IngressRouteUDPSpecRoutes {
            /**
             * Services defines the list of UDP services.
             */
            services?: outputs.traefik.v1alpha1.IngressRouteUDPSpecRoutesServices[];
        }

        /**
         * ServiceUDP defines an upstream UDP service to proxy traffic to.
         */
        export interface IngressRouteUDPSpecRoutesServices {
            /**
             * Name defines the name of the referenced Kubernetes Service.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service.
             */
            namespace?: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port: number | string;
            /**
             * Weight defines the weight used when balancing requests between multiple Kubernetes Service.
             */
            weight?: number;
        }

        /**
         * MiddlewareSpec defines the desired state of a Middleware.
         */
        export interface MiddlewareSpec {
            /**
             * AddPrefix holds the add prefix middleware configuration.
             * This middleware updates the path of a request before forwarding it.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/addprefix/
             */
            addPrefix?: outputs.traefik.v1alpha1.MiddlewareSpecAddPrefix;
            /**
             * BasicAuth holds the basic auth middleware configuration.
             * This middleware restricts access to your services to known users.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/
             */
            basicAuth?: outputs.traefik.v1alpha1.MiddlewareSpecBasicAuth;
            /**
             * Buffering holds the buffering middleware configuration.
             * This middleware retries or limits the size of requests that can be forwarded to backends.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#maxrequestbodybytes
             */
            buffering?: outputs.traefik.v1alpha1.MiddlewareSpecBuffering;
            /**
             * Chain holds the configuration of the chain middleware.
             * This middleware enables to define reusable combinations of other pieces of middleware.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/chain/
             */
            chain?: outputs.traefik.v1alpha1.MiddlewareSpecChain;
            /**
             * CircuitBreaker holds the circuit breaker configuration.
             */
            circuitBreaker?: outputs.traefik.v1alpha1.MiddlewareSpecCircuitBreaker;
            /**
             * Compress holds the compress middleware configuration.
             * This middleware compresses responses before sending them to the client, using gzip compression.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/compress/
             */
            compress?: outputs.traefik.v1alpha1.MiddlewareSpecCompress;
            /**
             * ContentType holds the content-type middleware configuration.
             * This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
             */
            contentType?: outputs.traefik.v1alpha1.MiddlewareSpecContentType;
            /**
             * DigestAuth holds the digest auth middleware configuration.
             * This middleware restricts access to your services to known users.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/digestauth/
             */
            digestAuth?: outputs.traefik.v1alpha1.MiddlewareSpecDigestAuth;
            /**
             * ErrorPage holds the custom error middleware configuration.
             * This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/
             */
            errors?: outputs.traefik.v1alpha1.MiddlewareSpecErrors;
            /**
             * ForwardAuth holds the forward auth middleware configuration.
             * This middleware delegates the request authentication to a Service.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/
             */
            forwardAuth?: outputs.traefik.v1alpha1.MiddlewareSpecForwardAuth;
            /**
             * GrpcWeb holds the gRPC web middleware configuration.
             * This middleware converts a gRPC web request to an HTTP/2 gRPC request.
             */
            grpcWeb?: outputs.traefik.v1alpha1.MiddlewareSpecGrpcWeb;
            /**
             * Headers holds the headers middleware configuration.
             * This middleware manages the requests and responses headers.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/headers/#customrequestheaders
             */
            headers?: outputs.traefik.v1alpha1.MiddlewareSpecHeaders;
            /**
             * InFlightReq holds the in-flight request middleware configuration.
             * This middleware limits the number of requests being processed and served concurrently.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/
             */
            inFlightReq?: outputs.traefik.v1alpha1.MiddlewareSpecInFlightReq;
            /**
             * IPAllowList holds the IP allowlist middleware configuration.
             * This middleware limits allowed requests based on the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/
             */
            ipAllowList?: outputs.traefik.v1alpha1.MiddlewareSpecIpAllowList;
            /**
             * Deprecated: please use IPAllowList instead.
             */
            ipWhiteList?: outputs.traefik.v1alpha1.MiddlewareSpecIpWhiteList;
            /**
             * PassTLSClientCert holds the pass TLS client cert middleware configuration.
             * This middleware adds the selected data from the passed client TLS certificate to a header.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/passtlsclientcert/
             */
            passTLSClientCert?: outputs.traefik.v1alpha1.MiddlewareSpecPassTlsclientCert;
            /**
             * Plugin defines the middleware plugin configuration.
             * More info: https://doc.traefik.io/traefik/plugins/
             */
            plugin?: {[key: string]: {[key: string]: any}};
            /**
             * RateLimit holds the rate limit configuration.
             * This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ratelimit/
             */
            rateLimit?: outputs.traefik.v1alpha1.MiddlewareSpecRateLimit;
            /**
             * RedirectRegex holds the redirect regex middleware configuration.
             * This middleware redirects a request using regex matching and replacement.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectregex/#regex
             */
            redirectRegex?: outputs.traefik.v1alpha1.MiddlewareSpecRedirectRegex;
            /**
             * RedirectScheme holds the redirect scheme middleware configuration.
             * This middleware redirects requests from a scheme/port to another.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectscheme/
             */
            redirectScheme?: outputs.traefik.v1alpha1.MiddlewareSpecRedirectScheme;
            /**
             * ReplacePath holds the replace path middleware configuration.
             * This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepath/
             */
            replacePath?: outputs.traefik.v1alpha1.MiddlewareSpecReplacePath;
            /**
             * ReplacePathRegex holds the replace path regex middleware configuration.
             * This middleware replaces the path of a URL using regex matching and replacement.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepathregex/
             */
            replacePathRegex?: outputs.traefik.v1alpha1.MiddlewareSpecReplacePathRegex;
            /**
             * Retry holds the retry middleware configuration.
             * This middleware reissues requests a given number of times to a backend server if that server does not reply.
             * As soon as the server answers, the middleware stops retrying, regardless of the response status.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/retry/
             */
            retry?: outputs.traefik.v1alpha1.MiddlewareSpecRetry;
            /**
             * StripPrefix holds the strip prefix middleware configuration.
             * This middleware removes the specified prefixes from the URL path.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefix/
             */
            stripPrefix?: outputs.traefik.v1alpha1.MiddlewareSpecStripPrefix;
            /**
             * StripPrefixRegex holds the strip prefix regex middleware configuration.
             * This middleware removes the matching prefixes from the URL path.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefixregex/
             */
            stripPrefixRegex?: outputs.traefik.v1alpha1.MiddlewareSpecStripPrefixRegex;
        }

        /**
         * AddPrefix holds the add prefix middleware configuration.
         * This middleware updates the path of a request before forwarding it.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/addprefix/
         */
        export interface MiddlewareSpecAddPrefix {
            /**
             * Prefix is the string to add before the current path in the requested URL.
             * It should include a leading slash (/).
             */
            prefix?: string;
        }

        /**
         * BasicAuth holds the basic auth middleware configuration.
         * This middleware restricts access to your services to known users.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/
         */
        export interface MiddlewareSpecBasicAuth {
            /**
             * HeaderField defines a header field to store the authenticated user.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/#headerfield
             */
            headerField?: string;
            /**
             * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.
             * Default: traefik.
             */
            realm?: string;
            /**
             * RemoveHeader sets the removeHeader option to true to remove the authorization header before forwarding the request to your service.
             * Default: false.
             */
            removeHeader?: boolean;
            /**
             * Secret is the name of the referenced Kubernetes Secret containing user credentials.
             */
            secret?: string;
        }

        /**
         * Buffering holds the buffering middleware configuration.
         * This middleware retries or limits the size of requests that can be forwarded to backends.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#maxrequestbodybytes
         */
        export interface MiddlewareSpecBuffering {
            /**
             * MaxRequestBodyBytes defines the maximum allowed body size for the request (in bytes).
             * If the request exceeds the allowed size, it is not forwarded to the service, and the client gets a 413 (Request Entity Too Large) response.
             * Default: 0 (no maximum).
             */
            maxRequestBodyBytes?: number;
            /**
             * MaxResponseBodyBytes defines the maximum allowed response size from the service (in bytes).
             * If the response exceeds the allowed size, it is not forwarded to the client. The client gets a 500 (Internal Server Error) response instead.
             * Default: 0 (no maximum).
             */
            maxResponseBodyBytes?: number;
            /**
             * MemRequestBodyBytes defines the threshold (in bytes) from which the request will be buffered on disk instead of in memory.
             * Default: 1048576 (1Mi).
             */
            memRequestBodyBytes?: number;
            /**
             * MemResponseBodyBytes defines the threshold (in bytes) from which the response will be buffered on disk instead of in memory.
             * Default: 1048576 (1Mi).
             */
            memResponseBodyBytes?: number;
            /**
             * RetryExpression defines the retry conditions.
             * It is a logical combination of functions with operators AND (&&) and OR (||).
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/buffering/#retryexpression
             */
            retryExpression?: string;
        }

        /**
         * Chain holds the configuration of the chain middleware.
         * This middleware enables to define reusable combinations of other pieces of middleware.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/chain/
         */
        export interface MiddlewareSpecChain {
            /**
             * Middlewares is the list of MiddlewareRef which composes the chain.
             */
            middlewares?: outputs.traefik.v1alpha1.MiddlewareSpecChainMiddlewares[];
        }

        /**
         * MiddlewareRef is a reference to a Middleware resource.
         */
        export interface MiddlewareSpecChainMiddlewares {
            /**
             * Name defines the name of the referenced Middleware resource.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Middleware resource.
             */
            namespace?: string;
        }

        /**
         * CircuitBreaker holds the circuit breaker configuration.
         */
        export interface MiddlewareSpecCircuitBreaker {
            /**
             * CheckPeriod is the interval between successive checks of the circuit breaker condition (when in standby state).
             */
            checkPeriod?: number | string;
            /**
             * Expression is the condition that triggers the tripped state.
             */
            expression?: string;
            /**
             * FallbackDuration is the duration for which the circuit breaker will wait before trying to recover (from a tripped state).
             */
            fallbackDuration?: number | string;
            /**
             * RecoveryDuration is the duration for which the circuit breaker will try to recover (as soon as it is in recovering state).
             */
            recoveryDuration?: number | string;
            /**
             * ResponseCode is the status code that the circuit breaker will return while it is in the open state.
             */
            responseCode?: number;
        }

        /**
         * Compress holds the compress middleware configuration.
         * This middleware compresses responses before sending them to the client, using gzip compression.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/compress/
         */
        export interface MiddlewareSpecCompress {
            /**
             * ExcludedContentTypes defines the list of content types to compare the Content-Type header of the incoming requests and responses before compressing.
             * `application/grpc` is always excluded.
             */
            excludedContentTypes?: string[];
            /**
             * IncludedContentTypes defines the list of content types to compare the Content-Type header of the responses before compressing.
             */
            includedContentTypes?: string[];
            /**
             * MinResponseBodyBytes defines the minimum amount of bytes a response body must have to be compressed.
             * Default: 1024.
             */
            minResponseBodyBytes?: number;
        }

        /**
         * ContentType holds the content-type middleware configuration.
         * This middleware exists to enable the correct behavior until at least the default one can be changed in a future version.
         */
        export interface MiddlewareSpecContentType {
            /**
             * AutoDetect specifies whether to let the `Content-Type` header, if it has not been set by the backend,
             * be automatically set to a value derived from the contents of the response.
             * Deprecated: AutoDetect option is deprecated, Content-Type middleware is only meant to be used to enable the content-type detection, please remove any usage of this option.
             */
            autoDetect?: boolean;
        }

        /**
         * DigestAuth holds the digest auth middleware configuration.
         * This middleware restricts access to your services to known users.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/digestauth/
         */
        export interface MiddlewareSpecDigestAuth {
            /**
             * HeaderField defines a header field to store the authenticated user.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/basicauth/#headerfield
             */
            headerField?: string;
            /**
             * Realm allows the protected resources on a server to be partitioned into a set of protection spaces, each with its own authentication scheme.
             * Default: traefik.
             */
            realm?: string;
            /**
             * RemoveHeader defines whether to remove the authorization header before forwarding the request to the backend.
             */
            removeHeader?: boolean;
            /**
             * Secret is the name of the referenced Kubernetes Secret containing user credentials.
             */
            secret?: string;
        }

        /**
         * ErrorPage holds the custom error middleware configuration.
         * This middleware returns a custom page in lieu of the default, according to configured ranges of HTTP Status codes.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/
         */
        export interface MiddlewareSpecErrors {
            /**
             * Query defines the URL for the error page (hosted by service).
             * The {status} variable can be used in order to insert the status code in the URL.
             */
            query?: string;
            /**
             * Service defines the reference to a Kubernetes Service that will serve the error page.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/#service
             */
            service?: outputs.traefik.v1alpha1.MiddlewareSpecErrorsService;
            /**
             * Status defines which status or range of statuses should result in an error page.
             * It can be either a status code as a number (500),
             * as multiple comma-separated numbers (500,502),
             * as ranges by separating two codes with a dash (500-599),
             * or a combination of the two (404,418,500-599).
             */
            status?: string[];
        }

        /**
         * Service defines the reference to a Kubernetes Service that will serve the error page.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/errorpages/#service
         */
        export interface MiddlewareSpecErrorsService {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader?: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port?: number | string;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceResponseForwarding;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: string;
            /**
             * Sticky defines the sticky sessions configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
             */
            sticky?: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceSticky;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy?: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: number;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface MiddlewareSpecErrorsServiceResponseForwarding {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval?: string;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
         */
        export interface MiddlewareSpecErrorsServiceSticky {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: outputs.traefik.v1alpha1.MiddlewareSpecErrorsServiceStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface MiddlewareSpecErrorsServiceStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: number;
            /**
             * Name defines the Cookie name.
             */
            name?: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: boolean;
        }

        /**
         * ForwardAuth holds the forward auth middleware configuration.
         * This middleware delegates the request authentication to a Service.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/
         */
        export interface MiddlewareSpecForwardAuth {
            /**
             * AddAuthCookiesToResponse defines the list of cookies to copy from the authentication server response to the response.
             */
            addAuthCookiesToResponse?: string[];
            /**
             * Address defines the authentication server address.
             */
            address?: string;
            /**
             * AuthRequestHeaders defines the list of the headers to copy from the request to the authentication server.
             * If not set or empty then all request headers are passed.
             */
            authRequestHeaders?: string[];
            /**
             * AuthResponseHeaders defines the list of headers to copy from the authentication server response and set on forwarded request, replacing any existing conflicting headers.
             */
            authResponseHeaders?: string[];
            /**
             * AuthResponseHeadersRegex defines the regex to match headers to copy from the authentication server response and set on forwarded request, after stripping all headers that match the regex.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/forwardauth/#authresponseheadersregex
             */
            authResponseHeadersRegex?: string;
            /**
             * TLS defines the configuration used to secure the connection to the authentication server.
             */
            tls?: outputs.traefik.v1alpha1.MiddlewareSpecForwardAuthTls;
            /**
             * TrustForwardHeader defines whether to trust (ie: forward) all X-Forwarded-* headers.
             */
            trustForwardHeader?: boolean;
        }

        /**
         * TLS defines the configuration used to secure the connection to the authentication server.
         */
        export interface MiddlewareSpecForwardAuthTls {
            /**
             * Deprecated: TLS client authentication is a server side option (see https://github.com/golang/go/blob/740a490f71d026bb7d2d13cb8fa2d6d6e0572b70/src/crypto/tls/common.go#L634).
             */
            caOptional?: boolean;
            /**
             * CASecret is the name of the referenced Kubernetes Secret containing the CA to validate the server certificate.
             * The CA certificate is extracted from key `tls.ca` or `ca.crt`.
             */
            caSecret?: string;
            /**
             * CertSecret is the name of the referenced Kubernetes Secret containing the client certificate.
             * The client certificate is extracted from the keys `tls.crt` and `tls.key`.
             */
            certSecret?: string;
            /**
             * InsecureSkipVerify defines whether the server certificates should be validated.
             */
            insecureSkipVerify?: boolean;
        }

        /**
         * GrpcWeb holds the gRPC web middleware configuration.
         * This middleware converts a gRPC web request to an HTTP/2 gRPC request.
         */
        export interface MiddlewareSpecGrpcWeb {
            /**
             * AllowOrigins is a list of allowable origins.
             * Can also be a wildcard origin "*".
             */
            allowOrigins?: string[];
        }

        /**
         * Headers holds the headers middleware configuration.
         * This middleware manages the requests and responses headers.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/headers/#customrequestheaders
         */
        export interface MiddlewareSpecHeaders {
            /**
             * AccessControlAllowCredentials defines whether the request can include user credentials.
             */
            accessControlAllowCredentials?: boolean;
            /**
             * AccessControlAllowHeaders defines the Access-Control-Request-Headers values sent in preflight response.
             */
            accessControlAllowHeaders?: string[];
            /**
             * AccessControlAllowMethods defines the Access-Control-Request-Method values sent in preflight response.
             */
            accessControlAllowMethods?: string[];
            /**
             * AccessControlAllowOriginList is a list of allowable origins. Can also be a wildcard origin "*".
             */
            accessControlAllowOriginList?: string[];
            /**
             * AccessControlAllowOriginListRegex is a list of allowable origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).
             */
            accessControlAllowOriginListRegex?: string[];
            /**
             * AccessControlExposeHeaders defines the Access-Control-Expose-Headers values sent in preflight response.
             */
            accessControlExposeHeaders?: string[];
            /**
             * AccessControlMaxAge defines the time that a preflight request may be cached.
             */
            accessControlMaxAge?: number;
            /**
             * AddVaryHeader defines whether the Vary header is automatically added/updated when the AccessControlAllowOriginList is set.
             */
            addVaryHeader?: boolean;
            /**
             * AllowedHosts defines the fully qualified list of allowed domain names.
             */
            allowedHosts?: string[];
            /**
             * BrowserXSSFilter defines whether to add the X-XSS-Protection header with the value 1; mode=block.
             */
            browserXssFilter?: boolean;
            /**
             * ContentSecurityPolicy defines the Content-Security-Policy header value.
             */
            contentSecurityPolicy?: string;
            /**
             * ContentTypeNosniff defines whether to add the X-Content-Type-Options header with the nosniff value.
             */
            contentTypeNosniff?: boolean;
            /**
             * CustomBrowserXSSValue defines the X-XSS-Protection header value.
             * This overrides the BrowserXssFilter option.
             */
            customBrowserXSSValue?: string;
            /**
             * CustomFrameOptionsValue defines the X-Frame-Options header value.
             * This overrides the FrameDeny option.
             */
            customFrameOptionsValue?: string;
            /**
             * CustomRequestHeaders defines the header names and values to apply to the request.
             */
            customRequestHeaders?: {[key: string]: string};
            /**
             * CustomResponseHeaders defines the header names and values to apply to the response.
             */
            customResponseHeaders?: {[key: string]: string};
            /**
             * Deprecated: FeaturePolicy option is deprecated, please use PermissionsPolicy instead.
             */
            featurePolicy?: string;
            /**
             * ForceSTSHeader defines whether to add the STS header even when the connection is HTTP.
             */
            forceSTSHeader?: boolean;
            /**
             * FrameDeny defines whether to add the X-Frame-Options header with the DENY value.
             */
            frameDeny?: boolean;
            /**
             * HostsProxyHeaders defines the header keys that may hold a proxied hostname value for the request.
             */
            hostsProxyHeaders?: string[];
            /**
             * IsDevelopment defines whether to mitigate the unwanted effects of the AllowedHosts, SSL, and STS options when developing.
             * Usually testing takes place using HTTP, not HTTPS, and on localhost, not your production domain.
             * If you would like your development environment to mimic production with complete Host blocking, SSL redirects,
             * and STS headers, leave this as false.
             */
            isDevelopment?: boolean;
            /**
             * PermissionsPolicy defines the Permissions-Policy header value.
             * This allows sites to control browser features.
             */
            permissionsPolicy?: string;
            /**
             * PublicKey is the public key that implements HPKP to prevent MITM attacks with forged certificates.
             */
            publicKey?: string;
            /**
             * ReferrerPolicy defines the Referrer-Policy header value.
             * This allows sites to control whether browsers forward the Referer header to other sites.
             */
            referrerPolicy?: string;
            /**
             * Deprecated: SSLForceHost option is deprecated, please use RedirectRegex instead.
             */
            sslForceHost?: boolean;
            /**
             * Deprecated: SSLHost option is deprecated, please use RedirectRegex instead.
             */
            sslHost?: string;
            /**
             * SSLProxyHeaders defines the header keys with associated values that would indicate a valid HTTPS request.
             * It can be useful when using other proxies (example: "X-Forwarded-Proto": "https").
             */
            sslProxyHeaders?: {[key: string]: string};
            /**
             * Deprecated: SSLRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.
             */
            sslRedirect?: boolean;
            /**
             * Deprecated: SSLTemporaryRedirect option is deprecated, please use EntryPoint redirection or RedirectScheme instead.
             */
            sslTemporaryRedirect?: boolean;
            /**
             * STSIncludeSubdomains defines whether the includeSubDomains directive is appended to the Strict-Transport-Security header.
             */
            stsIncludeSubdomains?: boolean;
            /**
             * STSPreload defines whether the preload flag is appended to the Strict-Transport-Security header.
             */
            stsPreload?: boolean;
            /**
             * STSSeconds defines the max-age of the Strict-Transport-Security header.
             * If set to 0, the header is not set.
             */
            stsSeconds?: number;
        }

        /**
         * InFlightReq holds the in-flight request middleware configuration.
         * This middleware limits the number of requests being processed and served concurrently.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/
         */
        export interface MiddlewareSpecInFlightReq {
            /**
             * Amount defines the maximum amount of allowed simultaneous in-flight request.
             * The middleware responds with HTTP 429 Too Many Requests if there are already amount requests in progress (based on the same sourceCriterion strategy).
             */
            amount?: number;
            /**
             * SourceCriterion defines what criterion is used to group requests as originating from a common source.
             * If several strategies are defined at the same time, an error will be raised.
             * If none are set, the default is to use the requestHost.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/#sourcecriterion
             */
            sourceCriterion?: outputs.traefik.v1alpha1.MiddlewareSpecInFlightReqSourceCriterion;
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source.
         * If several strategies are defined at the same time, an error will be raised.
         * If none are set, the default is to use the requestHost.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/inflightreq/#sourcecriterion
         */
        export interface MiddlewareSpecInFlightReqSourceCriterion {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
             */
            ipStrategy?: outputs.traefik.v1alpha1.MiddlewareSpecInFlightReqSourceCriterionIpStrategy;
            /**
             * RequestHeaderName defines the name of the header used to group incoming requests.
             */
            requestHeaderName?: string;
            /**
             * RequestHost defines whether to consider the request Host as the source.
             */
            requestHost?: boolean;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecInFlightReqSourceCriterionIpStrategy {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: string[];
        }

        /**
         * IPAllowList holds the IP allowlist middleware configuration.
         * This middleware limits allowed requests based on the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/
         */
        export interface MiddlewareSpecIpAllowList {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
             */
            ipStrategy?: outputs.traefik.v1alpha1.MiddlewareSpecIpAllowListIpStrategy;
            /**
             * RejectStatusCode defines the HTTP status code used for refused requests.
             * If not set, the default is 403 (Forbidden).
             */
            rejectStatusCode?: number;
            /**
             * SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange?: string[];
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecIpAllowListIpStrategy {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: string[];
        }

        /**
         * Deprecated: please use IPAllowList instead.
         */
        export interface MiddlewareSpecIpWhiteList {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
             */
            ipStrategy?: outputs.traefik.v1alpha1.MiddlewareSpecIpWhiteListIpStrategy;
            /**
             * SourceRange defines the set of allowed IPs (or ranges of allowed IPs by using CIDR notation). Required.
             */
            sourceRange?: string[];
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecIpWhiteListIpStrategy {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: string[];
        }

        /**
         * PassTLSClientCert holds the pass TLS client cert middleware configuration.
         * This middleware adds the selected data from the passed client TLS certificate to a header.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/passtlsclientcert/
         */
        export interface MiddlewareSpecPassTlsclientCert {
            /**
             * Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
             */
            info?: outputs.traefik.v1alpha1.MiddlewareSpecPassTlsclientCertInfo;
            /**
             * PEM sets the X-Forwarded-Tls-Client-Cert header with the certificate.
             */
            pem?: boolean;
        }

        /**
         * Info selects the specific client certificate details you want to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTlsclientCertInfo {
            /**
             * Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
             */
            issuer?: outputs.traefik.v1alpha1.MiddlewareSpecPassTlsclientCertInfoIssuer;
            /**
             * NotAfter defines whether to add the Not After information from the Validity part.
             */
            notAfter?: boolean;
            /**
             * NotBefore defines whether to add the Not Before information from the Validity part.
             */
            notBefore?: boolean;
            /**
             * Sans defines whether to add the Subject Alternative Name information from the Subject Alternative Name part.
             */
            sans?: boolean;
            /**
             * SerialNumber defines whether to add the client serialNumber information.
             */
            serialNumber?: boolean;
            /**
             * Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
             */
            subject?: outputs.traefik.v1alpha1.MiddlewareSpecPassTlsclientCertInfoSubject;
        }

        /**
         * Issuer defines the client certificate issuer details to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTlsclientCertInfoIssuer {
            /**
             * CommonName defines whether to add the organizationalUnit information into the issuer.
             */
            commonName?: boolean;
            /**
             * Country defines whether to add the country information into the issuer.
             */
            country?: boolean;
            /**
             * DomainComponent defines whether to add the domainComponent information into the issuer.
             */
            domainComponent?: boolean;
            /**
             * Locality defines whether to add the locality information into the issuer.
             */
            locality?: boolean;
            /**
             * Organization defines whether to add the organization information into the issuer.
             */
            organization?: boolean;
            /**
             * Province defines whether to add the province information into the issuer.
             */
            province?: boolean;
            /**
             * SerialNumber defines whether to add the serialNumber information into the issuer.
             */
            serialNumber?: boolean;
        }

        /**
         * Subject defines the client certificate subject details to add to the X-Forwarded-Tls-Client-Cert-Info header.
         */
        export interface MiddlewareSpecPassTlsclientCertInfoSubject {
            /**
             * CommonName defines whether to add the organizationalUnit information into the subject.
             */
            commonName?: boolean;
            /**
             * Country defines whether to add the country information into the subject.
             */
            country?: boolean;
            /**
             * DomainComponent defines whether to add the domainComponent information into the subject.
             */
            domainComponent?: boolean;
            /**
             * Locality defines whether to add the locality information into the subject.
             */
            locality?: boolean;
            /**
             * Organization defines whether to add the organization information into the subject.
             */
            organization?: boolean;
            /**
             * OrganizationalUnit defines whether to add the organizationalUnit information into the subject.
             */
            organizationalUnit?: boolean;
            /**
             * Province defines whether to add the province information into the subject.
             */
            province?: boolean;
            /**
             * SerialNumber defines whether to add the serialNumber information into the subject.
             */
            serialNumber?: boolean;
        }

        /**
         * RateLimit holds the rate limit configuration.
         * This middleware ensures that services will receive a fair amount of requests, and allows one to define what fair is.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ratelimit/
         */
        export interface MiddlewareSpecRateLimit {
            /**
             * Average is the maximum rate, by default in requests/s, allowed for the given source.
             * It defaults to 0, which means no rate limiting.
             * The rate is actually defined by dividing Average by Period. So for a rate below 1req/s,
             * one needs to define a Period larger than a second.
             */
            average?: number;
            /**
             * Burst is the maximum number of requests allowed to arrive in the same arbitrarily small period of time.
             * It defaults to 1.
             */
            burst?: number;
            /**
             * Period, in combination with Average, defines the actual maximum rate, such as:
             * r = Average / Period. It defaults to a second.
             */
            period?: number | string;
            /**
             * SourceCriterion defines what criterion is used to group requests as originating from a common source.
             * If several strategies are defined at the same time, an error will be raised.
             * If none are set, the default is to use the request's remote address field (as an ipStrategy).
             */
            sourceCriterion?: outputs.traefik.v1alpha1.MiddlewareSpecRateLimitSourceCriterion;
        }

        /**
         * SourceCriterion defines what criterion is used to group requests as originating from a common source.
         * If several strategies are defined at the same time, an error will be raised.
         * If none are set, the default is to use the request's remote address field (as an ipStrategy).
         */
        export interface MiddlewareSpecRateLimitSourceCriterion {
            /**
             * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
             */
            ipStrategy?: outputs.traefik.v1alpha1.MiddlewareSpecRateLimitSourceCriterionIpStrategy;
            /**
             * RequestHeaderName defines the name of the header used to group incoming requests.
             */
            requestHeaderName?: string;
            /**
             * RequestHost defines whether to consider the request Host as the source.
             */
            requestHost?: boolean;
        }

        /**
         * IPStrategy holds the IP strategy configuration used by Traefik to determine the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/ipallowlist/#ipstrategy
         */
        export interface MiddlewareSpecRateLimitSourceCriterionIpStrategy {
            /**
             * Depth tells Traefik to use the X-Forwarded-For header and take the IP located at the depth position (starting from the right).
             */
            depth?: number;
            /**
             * ExcludedIPs configures Traefik to scan the X-Forwarded-For header and select the first IP not in the list.
             */
            excludedIPs?: string[];
        }

        /**
         * RedirectRegex holds the redirect regex middleware configuration.
         * This middleware redirects a request using regex matching and replacement.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectregex/#regex
         */
        export interface MiddlewareSpecRedirectRegex {
            /**
             * Permanent defines whether the redirection is permanent (301).
             */
            permanent?: boolean;
            /**
             * Regex defines the regex used to match and capture elements from the request URL.
             */
            regex?: string;
            /**
             * Replacement defines how to modify the URL to have the new target URL.
             */
            replacement?: string;
        }

        /**
         * RedirectScheme holds the redirect scheme middleware configuration.
         * This middleware redirects requests from a scheme/port to another.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/redirectscheme/
         */
        export interface MiddlewareSpecRedirectScheme {
            /**
             * Permanent defines whether the redirection is permanent (301).
             */
            permanent?: boolean;
            /**
             * Port defines the port of the new URL.
             */
            port?: string;
            /**
             * Scheme defines the scheme of the new URL.
             */
            scheme?: string;
        }

        /**
         * ReplacePath holds the replace path middleware configuration.
         * This middleware replaces the path of the request URL and store the original path in an X-Replaced-Path header.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepath/
         */
        export interface MiddlewareSpecReplacePath {
            /**
             * Path defines the path to use as replacement in the request URL.
             */
            path?: string;
        }

        /**
         * ReplacePathRegex holds the replace path regex middleware configuration.
         * This middleware replaces the path of a URL using regex matching and replacement.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/replacepathregex/
         */
        export interface MiddlewareSpecReplacePathRegex {
            /**
             * Regex defines the regular expression used to match and capture the path from the request URL.
             */
            regex?: string;
            /**
             * Replacement defines the replacement path format, which can include captured variables.
             */
            replacement?: string;
        }

        /**
         * Retry holds the retry middleware configuration.
         * This middleware reissues requests a given number of times to a backend server if that server does not reply.
         * As soon as the server answers, the middleware stops retrying, regardless of the response status.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/retry/
         */
        export interface MiddlewareSpecRetry {
            /**
             * Attempts defines how many times the request should be retried.
             */
            attempts?: number;
            /**
             * InitialInterval defines the first wait time in the exponential backoff series.
             * The maximum interval is calculated as twice the initialInterval.
             * If unspecified, requests will be retried immediately.
             * The value of initialInterval should be provided in seconds or as a valid duration format,
             * see https://pkg.go.dev/time#ParseDuration.
             */
            initialInterval?: number | string;
        }

        /**
         * StripPrefix holds the strip prefix middleware configuration.
         * This middleware removes the specified prefixes from the URL path.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefix/
         */
        export interface MiddlewareSpecStripPrefix {
            /**
             * Deprecated: ForceSlash option is deprecated, please remove any usage of this option.
             * ForceSlash ensures that the resulting stripped path is not the empty string, by replacing it with / when necessary.
             * Default: true.
             */
            forceSlash?: boolean;
            /**
             * Prefixes defines the prefixes to strip from the request URL.
             */
            prefixes?: string[];
        }

        /**
         * StripPrefixRegex holds the strip prefix regex middleware configuration.
         * This middleware removes the matching prefixes from the URL path.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/http/stripprefixregex/
         */
        export interface MiddlewareSpecStripPrefixRegex {
            /**
             * Regex defines the regular expression to match the path prefix from the request URL.
             */
            regex?: string[];
        }

        /**
         * MiddlewareTCPSpec defines the desired state of a MiddlewareTCP.
         */
        export interface MiddlewareTCPSpec {
            /**
             * InFlightConn defines the InFlightConn middleware configuration.
             */
            inFlightConn?: outputs.traefik.v1alpha1.MiddlewareTCPSpecInFlightConn;
            /**
             * IPAllowList defines the IPAllowList middleware configuration.
             * This middleware accepts/refuses connections based on the client IP.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipallowlist/
             */
            ipAllowList?: outputs.traefik.v1alpha1.MiddlewareTCPSpecIpAllowList;
            /**
             * IPWhiteList defines the IPWhiteList middleware configuration.
             * This middleware accepts/refuses connections based on the client IP.
             * Deprecated: please use IPAllowList instead.
             * More info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipwhitelist/
             */
            ipWhiteList?: outputs.traefik.v1alpha1.MiddlewareTCPSpecIpWhiteList;
        }

        /**
         * InFlightConn defines the InFlightConn middleware configuration.
         */
        export interface MiddlewareTCPSpecInFlightConn {
            /**
             * Amount defines the maximum amount of allowed simultaneous connections.
             * The middleware closes the connection if there are already amount connections opened.
             */
            amount?: number;
        }

        /**
         * IPAllowList defines the IPAllowList middleware configuration.
         * This middleware accepts/refuses connections based on the client IP.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipallowlist/
         */
        export interface MiddlewareTCPSpecIpAllowList {
            /**
             * SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange?: string[];
        }

        /**
         * IPWhiteList defines the IPWhiteList middleware configuration.
         * This middleware accepts/refuses connections based on the client IP.
         * Deprecated: please use IPAllowList instead.
         * More info: https://doc.traefik.io/traefik/v3.0/middlewares/tcp/ipwhitelist/
         */
        export interface MiddlewareTCPSpecIpWhiteList {
            /**
             * SourceRange defines the allowed IPs (or ranges of allowed IPs by using CIDR notation).
             */
            sourceRange?: string[];
        }

        /**
         * ServersTransportSpec defines the desired state of a ServersTransport.
         */
        export interface ServersTransportSpec {
            /**
             * CertificatesSecrets defines a list of secret storing client certificates for mTLS.
             */
            certificatesSecrets?: string[];
            /**
             * DisableHTTP2 disables HTTP/2 for connections with backend servers.
             */
            disableHTTP2?: boolean;
            /**
             * ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.
             */
            forwardingTimeouts?: outputs.traefik.v1alpha1.ServersTransportSpecForwardingTimeouts;
            /**
             * InsecureSkipVerify disables SSL certificate verification.
             */
            insecureSkipVerify?: boolean;
            /**
             * MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.
             */
            maxIdleConnsPerHost?: number;
            /**
             * PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.
             */
            peerCertURI?: string;
            /**
             * RootCAsSecrets defines a list of CA secret used to validate self-signed certificate.
             */
            rootCAsSecrets?: string[];
            /**
             * ServerName defines the server name used to contact the server.
             */
            serverName?: string;
            /**
             * Spiffe defines the SPIFFE configuration.
             */
            spiffe?: outputs.traefik.v1alpha1.ServersTransportSpecSpiffe;
        }

        /**
         * ForwardingTimeouts defines the timeouts for requests forwarded to the backend servers.
         */
        export interface ServersTransportSpecForwardingTimeouts {
            /**
             * DialTimeout is the amount of time to wait until a connection to a backend server can be established.
             */
            dialTimeout?: number | string;
            /**
             * IdleConnTimeout is the maximum period for which an idle HTTP keep-alive connection will remain open before closing itself.
             */
            idleConnTimeout?: number | string;
            /**
             * PingTimeout is the timeout after which the HTTP/2 connection will be closed if a response to ping is not received.
             */
            pingTimeout?: number | string;
            /**
             * ReadIdleTimeout is the timeout after which a health check using ping frame will be carried out if no frame is received on the HTTP/2 connection.
             */
            readIdleTimeout?: number | string;
            /**
             * ResponseHeaderTimeout is the amount of time to wait for a server's response headers after fully writing the request (including its body, if any).
             */
            responseHeaderTimeout?: number | string;
        }

        /**
         * Spiffe defines the SPIFFE configuration.
         */
        export interface ServersTransportSpecSpiffe {
            /**
             * IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).
             */
            ids?: string[];
            /**
             * TrustDomain defines the allowed SPIFFE trust domain.
             */
            trustDomain?: string;
        }

        /**
         * ServersTransportTCPSpec defines the desired state of a ServersTransportTCP.
         */
        export interface ServersTransportTCPSpec {
            /**
             * DialKeepAlive is the interval between keep-alive probes for an active network connection. If zero, keep-alive probes are sent with a default value (currently 15 seconds), if supported by the protocol and operating system. Network protocols or operating systems that do not support keep-alives ignore this field. If negative, keep-alive probes are disabled.
             */
            dialKeepAlive?: number | string;
            /**
             * DialTimeout is the amount of time to wait until a connection to a backend server can be established.
             */
            dialTimeout?: number | string;
            /**
             * TerminationDelay defines the delay to wait before fully terminating the connection, after one connected peer has closed its writing capability.
             */
            terminationDelay?: number | string;
            /**
             * TLS defines the TLS configuration
             */
            tls?: outputs.traefik.v1alpha1.ServersTransportTCPSpecTls;
        }

        /**
         * TLS defines the TLS configuration
         */
        export interface ServersTransportTCPSpecTls {
            /**
             * CertificatesSecrets defines a list of secret storing client certificates for mTLS.
             */
            certificatesSecrets?: string[];
            /**
             * InsecureSkipVerify disables TLS certificate verification.
             */
            insecureSkipVerify?: boolean;
            /**
             * MaxIdleConnsPerHost controls the maximum idle (keep-alive) to keep per-host.
             * PeerCertURI defines the peer cert URI used to match against SAN URI during the peer certificate verification.
             */
            peerCertURI?: string;
            /**
             * RootCAsSecrets defines a list of CA secret used to validate self-signed certificates.
             */
            rootCAsSecrets?: string[];
            /**
             * ServerName defines the server name used to contact the server.
             */
            serverName?: string;
            /**
             * Spiffe defines the SPIFFE configuration.
             */
            spiffe?: outputs.traefik.v1alpha1.ServersTransportTCPSpecTlsSpiffe;
        }

        /**
         * Spiffe defines the SPIFFE configuration.
         */
        export interface ServersTransportTCPSpecTlsSpiffe {
            /**
             * IDs defines the allowed SPIFFE IDs (takes precedence over the SPIFFE TrustDomain).
             */
            ids?: string[];
            /**
             * TrustDomain defines the allowed SPIFFE trust domain.
             */
            trustDomain?: string;
        }

        /**
         * TLSOptionSpec defines the desired state of a TLSOption.
         */
        export interface TLSOptionSpec {
            /**
             * ALPNProtocols defines the list of supported application level protocols for the TLS handshake, in order of preference.
             * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#alpn-protocols
             */
            alpnProtocols?: string[];
            /**
             * CipherSuites defines the list of supported cipher suites for TLS versions up to TLS 1.2.
             * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#cipher-suites
             */
            cipherSuites?: string[];
            /**
             * ClientAuth defines the server's policy for TLS Client Authentication.
             */
            clientAuth?: outputs.traefik.v1alpha1.TLSOptionSpecClientAuth;
            /**
             * CurvePreferences defines the preferred elliptic curves in a specific order.
             * More info: https://doc.traefik.io/traefik/v3.0/https/tls/#curve-preferences
             */
            curvePreferences?: string[];
            /**
             * MaxVersion defines the maximum TLS version that Traefik will accept.
             * Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
             * Default: None.
             */
            maxVersion?: string;
            /**
             * MinVersion defines the minimum TLS version that Traefik will accept.
             * Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13.
             * Default: VersionTLS10.
             */
            minVersion?: string;
            /**
             * PreferServerCipherSuites defines whether the server chooses a cipher suite among his own instead of among the client's.
             * It is enabled automatically when minVersion or maxVersion is set.
             * Deprecated: https://github.com/golang/go/issues/45430
             */
            preferServerCipherSuites?: boolean;
            /**
             * SniStrict defines whether Traefik allows connections from clients connections that do not specify a server_name extension.
             */
            sniStrict?: boolean;
        }

        /**
         * ClientAuth defines the server's policy for TLS Client Authentication.
         */
        export interface TLSOptionSpecClientAuth {
            /**
             * ClientAuthType defines the client authentication type to apply.
             */
            clientAuthType?: string;
            /**
             * SecretNames defines the names of the referenced Kubernetes Secret storing certificate details.
             */
            secretNames?: string[];
        }

        /**
         * TLSStoreSpec defines the desired state of a TLSStore.
         */
        export interface TLSStoreSpec {
            /**
             * Certificates is a list of secret names, each secret holding a key/certificate pair to add to the store.
             */
            certificates?: outputs.traefik.v1alpha1.TLSStoreSpecCertificates[];
            /**
             * DefaultCertificate defines the default certificate configuration.
             */
            defaultCertificate?: outputs.traefik.v1alpha1.TLSStoreSpecDefaultCertificate;
            /**
             * DefaultGeneratedCert defines the default generated certificate configuration.
             */
            defaultGeneratedCert?: outputs.traefik.v1alpha1.TLSStoreSpecDefaultGeneratedCert;
        }

        /**
         * Certificate holds a secret name for the TLSStore resource.
         */
        export interface TLSStoreSpecCertificates {
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: string;
        }

        /**
         * DefaultCertificate defines the default certificate configuration.
         */
        export interface TLSStoreSpecDefaultCertificate {
            /**
             * SecretName is the name of the referenced Kubernetes Secret to specify the certificate details.
             */
            secretName: string;
        }

        /**
         * DefaultGeneratedCert defines the default generated certificate configuration.
         */
        export interface TLSStoreSpecDefaultGeneratedCert {
            /**
             * Domain is the domain definition for the DefaultCertificate.
             */
            domain?: outputs.traefik.v1alpha1.TLSStoreSpecDefaultGeneratedCertDomain;
            /**
             * Resolver is the name of the resolver that will be used to issue the DefaultCertificate.
             */
            resolver?: string;
        }

        /**
         * Domain is the domain definition for the DefaultCertificate.
         */
        export interface TLSStoreSpecDefaultGeneratedCertDomain {
            /**
             * Main defines the main domain name.
             */
            main?: string;
            /**
             * SANs defines the subject alternative domain names.
             */
            sans?: string[];
        }

        /**
         * TraefikServiceSpec defines the desired state of a TraefikService.
         */
        export interface TraefikServiceSpec {
            /**
             * Mirroring defines the Mirroring service configuration.
             */
            mirroring?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroring;
            /**
             * Weighted defines the Weighted Round Robin configuration.
             */
            weighted?: outputs.traefik.v1alpha1.TraefikServiceSpecWeighted;
        }

        /**
         * Mirroring defines the Mirroring service configuration.
         */
        export interface TraefikServiceSpecMirroring {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: string;
            /**
             * MaxBodySize defines the maximum size allowed for the body of the request.
             * If the body is larger, the request is not mirrored.
             * Default value is -1, which means unlimited size.
             */
            maxBodySize?: number;
            /**
             * Mirrors defines the list of mirrors where Traefik will duplicate the traffic.
             */
            mirrors?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrors[];
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader?: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port?: number | string;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringResponseForwarding;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: string;
            /**
             * Sticky defines the sticky sessions configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
             */
            sticky?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringSticky;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy?: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: number;
        }

        /**
         * MirrorService holds the mirror configuration.
         */
        export interface TraefikServiceSpecMirroringMirrors {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader?: boolean;
            /**
             * Percent defines the part of the traffic to mirror.
             * Supported values: 0 to 100.
             */
            percent?: number;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port?: number | string;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsResponseForwarding;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: string;
            /**
             * Sticky defines the sticky sessions configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
             */
            sticky?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsSticky;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy?: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: number;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecMirroringMirrorsResponseForwarding {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval?: string;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecMirroringMirrorsSticky {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringMirrorsStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecMirroringMirrorsStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: number;
            /**
             * Name defines the Cookie name.
             */
            name?: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: boolean;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecMirroringResponseForwarding {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval?: string;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecMirroringSticky {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: outputs.traefik.v1alpha1.TraefikServiceSpecMirroringStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecMirroringStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: number;
            /**
             * Name defines the Cookie name.
             */
            name?: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: boolean;
        }

        /**
         * Weighted defines the Weighted Round Robin configuration.
         */
        export interface TraefikServiceSpecWeighted {
            /**
             * Services defines the list of Kubernetes Service and/or TraefikService to load-balance, with weight.
             */
            services?: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServices[];
            /**
             * Sticky defines whether sticky sessions are enabled.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#stickiness-and-load-balancing
             */
            sticky?: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedSticky;
        }

        /**
         * Service defines an upstream HTTP service to proxy traffic to.
         */
        export interface TraefikServiceSpecWeightedServices {
            /**
             * Kind defines the kind of the Service.
             */
            kind?: string;
            /**
             * Name defines the name of the referenced Kubernetes Service or TraefikService.
             * The differentiation between the two is specified in the Kind field.
             */
            name: string;
            /**
             * Namespace defines the namespace of the referenced Kubernetes Service or TraefikService.
             */
            namespace?: string;
            /**
             * NativeLB controls, when creating the load-balancer,
             * whether the LB's children are directly the pods IPs or if the only child is the Kubernetes Service clusterIP.
             * The Kubernetes Service itself does load-balance to the pods.
             * By default, NativeLB is false.
             */
            nativeLB?: boolean;
            /**
             * PassHostHeader defines whether the client Host header is forwarded to the upstream Kubernetes Service.
             * By default, passHostHeader is true.
             */
            passHostHeader?: boolean;
            /**
             * Port defines the port of a Kubernetes Service.
             * This can be a reference to a named port.
             */
            port?: number | string;
            /**
             * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
             */
            responseForwarding?: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesResponseForwarding;
            /**
             * Scheme defines the scheme to use for the request to the upstream Kubernetes Service.
             * It defaults to https when Kubernetes Service port is 443, http otherwise.
             */
            scheme?: string;
            /**
             * ServersTransport defines the name of ServersTransport resource to use.
             * It allows to configure the transport between Traefik and your servers.
             * Can only be used on a Kubernetes Service.
             */
            serversTransport?: string;
            /**
             * Sticky defines the sticky sessions configuration.
             * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
             */
            sticky?: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesSticky;
            /**
             * Strategy defines the load balancing strategy between the servers.
             * RoundRobin is the only supported value at the moment.
             */
            strategy?: string;
            /**
             * Weight defines the weight and should only be specified when Name references a TraefikService object
             * (and to be precise, one that embeds a Weighted Round Robin).
             */
            weight?: number;
        }

        /**
         * ResponseForwarding defines how Traefik forwards the response from the upstream Kubernetes Service to the client.
         */
        export interface TraefikServiceSpecWeightedServicesResponseForwarding {
            /**
             * FlushInterval defines the interval, in milliseconds, in between flushes to the client while copying the response body.
             * A negative value means to flush immediately after each write to the client.
             * This configuration is ignored when ReverseProxy recognizes a response as a streaming response;
             * for such responses, writes are flushed to the client immediately.
             * Default: 100ms
             */
            flushInterval?: string;
        }

        /**
         * Sticky defines the sticky sessions configuration.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/services/#sticky-sessions
         */
        export interface TraefikServiceSpecWeightedServicesSticky {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedServicesStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecWeightedServicesStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: number;
            /**
             * Name defines the Cookie name.
             */
            name?: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: boolean;
        }

        /**
         * Sticky defines whether sticky sessions are enabled.
         * More info: https://doc.traefik.io/traefik/v3.0/routing/providers/kubernetes-crd/#stickiness-and-load-balancing
         */
        export interface TraefikServiceSpecWeightedSticky {
            /**
             * Cookie defines the sticky cookie configuration.
             */
            cookie?: outputs.traefik.v1alpha1.TraefikServiceSpecWeightedStickyCookie;
        }

        /**
         * Cookie defines the sticky cookie configuration.
         */
        export interface TraefikServiceSpecWeightedStickyCookie {
            /**
             * HTTPOnly defines whether the cookie can be accessed by client-side APIs, such as JavaScript.
             */
            httpOnly?: boolean;
            /**
             * MaxAge indicates the number of seconds until the cookie expires.
             * When set to a negative number, the cookie expires immediately.
             * When set to zero, the cookie never expires.
             */
            maxAge?: number;
            /**
             * Name defines the Cookie name.
             */
            name?: string;
            /**
             * SameSite defines the same site policy.
             * More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
             */
            sameSite?: string;
            /**
             * Secure defines whether the cookie can only be transmitted over an encrypted connection (i.e. HTTPS).
             */
            secure?: boolean;
        }

    }
}
