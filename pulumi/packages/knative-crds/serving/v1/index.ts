// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { ConfigurationArgs } from "./configuration";
export type Configuration = import("./configuration").Configuration;
export const Configuration: typeof import("./configuration").Configuration = null as any;
utilities.lazyLoad(exports, ["Configuration"], () => require("./configuration"));

export { RevisionArgs } from "./revision";
export type Revision = import("./revision").Revision;
export const Revision: typeof import("./revision").Revision = null as any;
utilities.lazyLoad(exports, ["Revision"], () => require("./revision"));

export { RouteArgs } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { ServiceArgs } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:serving.knative.dev/v1:Configuration":
                return new Configuration(name, <any>undefined, { urn })
            case "kubernetes:serving.knative.dev/v1:Revision":
                return new Revision(name, <any>undefined, { urn })
            case "kubernetes:serving.knative.dev/v1:Route":
                return new Route(name, <any>undefined, { urn })
            case "kubernetes:serving.knative.dev/v1:Service":
                return new Service(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("knative", "serving.knative.dev/v1", _module)
