// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { CertificateArgs } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { ClusterDomainClaimArgs } from "./clusterDomainClaim";
export type ClusterDomainClaim = import("./clusterDomainClaim").ClusterDomainClaim;
export const ClusterDomainClaim: typeof import("./clusterDomainClaim").ClusterDomainClaim = null as any;
utilities.lazyLoad(exports, ["ClusterDomainClaim"], () => require("./clusterDomainClaim"));

export { IngressArgs } from "./ingress";
export type Ingress = import("./ingress").Ingress;
export const Ingress: typeof import("./ingress").Ingress = null as any;
utilities.lazyLoad(exports, ["Ingress"], () => require("./ingress"));

export { ServerlessServiceArgs } from "./serverlessService";
export type ServerlessService = import("./serverlessService").ServerlessService;
export const ServerlessService: typeof import("./serverlessService").ServerlessService = null as any;
utilities.lazyLoad(exports, ["ServerlessService"], () => require("./serverlessService"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:networking.internal.knative.dev/v1alpha1:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "kubernetes:networking.internal.knative.dev/v1alpha1:ClusterDomainClaim":
                return new ClusterDomainClaim(name, <any>undefined, { urn })
            case "kubernetes:networking.internal.knative.dev/v1alpha1:Ingress":
                return new Ingress(name, <any>undefined, { urn })
            case "kubernetes:networking.internal.knative.dev/v1alpha1:ServerlessService":
                return new ServerlessService(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("knative", "networking.internal.knative.dev/v1alpha1", _module)
